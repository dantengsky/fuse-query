name: Benchmark

on:
  workflow_call:
    inputs:
      sha:
        description: Git sha of benchmark
        required: true
        type: string
      run_id:
        description: The run id of benchmark
        required: true
        type: string
      source:
        description: The source of benchmark, pr/release
        required: true
        type: string
      source_id:
        description: The source id of benchmark, pr number/release tag
        required: true
        type: string
      version:
        description: The version of databend to run
        required: true
        type: string
      runner_provider:
        description: 'Self-hosted runner provider, aws or gcp'
        type: string
        required: true

permissions:
  id-token: write
  pull-requests: write
  contents: read

env:
  BUILD_PROFILE: release
  RUNNER_PROVIDER: ${{ inputs.runner_provider }}

jobs:
  local:
    if: inputs.source == 'release'
    timeout-minutes: 60
    runs-on: [self-hosted, X64, Linux, 16c32g, aws]
    strategy:
      matrix:
        dataset:
          - hits
          # - tpch
      fail-fast: true
      max-parallel: 1
    steps:
      - uses: actions/checkout@v4
        if: inputs.source == 'release'
      - uses: actions/checkout@v4
        if: inputs.source == 'pr'
        with:
          ref: "refs/pull/${{ inputs.source_id }}/merge"
      - uses: ./.github/actions/setup_bendsql
      - name: Download artifact for pr
        if: inputs.source == 'pr'
        uses: ./.github/actions/artifact_download
        with:
          sha: ${{ inputs.sha }}
          target: x86_64-unknown-linux-gnu
      - name: Download artifact for release
        if: inputs.source == 'release'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          version=${{ inputs.source_id }}
          target=x86_64-unknown-linux-gnu
          mkdir -p ./distro/
          mkdir -p ./target/release/
          gh release download ${version} --pattern "databend-${version}-${target}.tar.gz" --dir distro/
          tar x -C ./target/release -f ./distro/databend-${version}-${target}.tar.gz --strip-components 1 bin/
          chmod +x ./target/release/databend-*
      - name: Setup Databend Binary
        shell: bash
        run: |
          sudo cp ./target/release/databend-* /usr/local/bin/
          databend-query --version
          databend-meta --version
      - uses: ./.github/actions/benchmark_local
        timeout-minutes: 30
        id: benchmark
        with:
          sha: ${{ inputs.sha }}
          run_id: ${{ inputs.run_id }}
          dataset: ${{ matrix.dataset }}
          source: ${{ inputs.source }}
          source_id: ${{ inputs.source_id }}

  cloud:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - { dataset: hits, size: Small }
          - { dataset: hits, size: Large }
          - { dataset: tpch, size: Small }
          - { dataset: tpch, size: Large }
      fail-fast: true
      max-parallel: 1
    steps:
      - uses: actions/checkout@v4
        if: inputs.source == 'release'
      - uses: actions/checkout@v4
        if: inputs.source == 'pr'
        with:
          ref: "refs/pull/${{ inputs.source_id }}/merge"
      - uses: ./.github/actions/setup_bendsql
      - uses: ./.github/actions/benchmark_cloud
        timeout-minutes: 20
        id: benchmark
        with:
          sha: ${{ inputs.sha }}
          run_id: ${{ inputs.run_id }}
          dataset: ${{ matrix.dataset }}
          source: ${{ inputs.source }}
          source_id: ${{ inputs.source_id }}
          size: ${{ matrix.size }}
          version: ${{ inputs.version }}
          cloud_user: ${{ secrets.BENCHMARK_CLOUD_USER }}
          cloud_password: ${{ secrets.BENCHMARK_CLOUD_PASSWORD }}
          cloud_gateway: ${{ secrets.BENCHMARK_CLOUD_GATEWAY }}

  comment:
    needs: cloud
    if: inputs.source == 'pr'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Dependencies
        run: |
          sudo apt-get update -yq
          sudo apt-get install -yq python3-jinja2
      - uses: actions/download-artifact@v3
        with:
          name: benchmark-hits
          path: benchmark/clickbench/results/hits
      - uses: actions/download-artifact@v3
        with:
          name: benchmark-tpch
          path: benchmark/clickbench/results/tpch
      - name: Get Report Prefix
        run: |
          echo "REPORT_S3_PREFIX=s3://benchmark/clickbench/pr/${{ inputs.source_id }}/${{ inputs.run_id }}" >> $GITHUB_ENV
      - name: Upload PR clickbench result to R2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: auto
          AWS_ENDPOINT_URL: ${{ secrets.R2_ENDPOINT_URL }}
        working-directory: benchmark/clickbench
        run: |
          aws s3 sync ./results/hits/ ${REPORT_S3_PREFIX}/ --include "*.json"
          aws s3 sync ./results/tpch/ ${REPORT_S3_PREFIX}/ --include "*.json"

          aws s3 sync "s3://benchmark/clickbench/release/hits/latest/" ./results/hits/
          aws s3 sync "s3://benchmark/clickbench/release/tpch/latest/" ./results/tpch/

          ./update_results.py --dataset hits --pr ${{ inputs.source_id }}
          ./update_results.py --dataset tpch --pr ${{ inputs.source_id }}

          aws s3 cp ./results/hits.html ${REPORT_S3_PREFIX}/hits.html
          aws s3 cp ./results/tpch.html ${REPORT_S3_PREFIX}/tpch.html
      - name: Comment on PR
        uses: everpcpc/comment-on-pr-action@v1
        with:
          number: ${{ inputs.source_id }}
          token: ${{ github.token }}
          body: |
            ![cloud](https://img.shields.io/static/v1?label=Databend%20Cloud&message=Small&color=blue&logo=icloud) ![cloud](https://img.shields.io/static/v1?label=Databend%20Cloud&message=Large&color=blue&logo=icloud)
            ## ClickBench Report
            * **hits**: https://benchmark.databend.rs/clickbench/pr/${{ inputs.source_id }}/${{ inputs.run_id }}/hits.html
            * **tpch**: https://benchmark.databend.rs/clickbench/pr/${{ inputs.source_id }}/${{ inputs.run_id }}/tpch.html

  archive:
    needs: cloud
    if: inputs.source == 'release'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dataset:
          - "tpch"
          - "hits"
    steps:
      - uses: actions/checkout@v4
      - name: Install Dependencies
        run: |
          sudo apt-get update -yq
          sudo apt-get install -yq python3-jinja2
      - uses: actions/download-artifact@v3
        with:
          name: benchmark-${{ matrix.dataset }}
          path: benchmark/clickbench/results/${{ matrix.dataset }}
      - name: Generate report and upload to R2
        working-directory: benchmark/clickbench
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: auto
          AWS_ENDPOINT_URL: ${{ secrets.R2_ENDPOINT_URL }}
        run: |
          aws s3 sync s3://benchmark/clickbench/release/${{ matrix.dataset }}/$(date --date='-1 month' -u +%Y)/$(date --date='-1 month' -u +%m)/ ./results/${{ matrix.dataset }}/ --no-progress
          aws s3 sync s3://benchmark/clickbench/release/${{ matrix.dataset }}/$(date -u +%Y)/$(date -u +%m)/ ./results/${{ matrix.dataset }}/ --no-progress
          ./update_results.py --dataset ${{ matrix.dataset }} --release ${{ inputs.source_id }}

          RESULT_PREFIX="s3://benchmark/clickbench/release/${{ matrix.dataset }}/$(date -u +%Y)/$(date -u +%m)/$(date -u +%Y-%m-%d)/${{ inputs.source_id }}"
          LATEST_PREFIX="s3://benchmark/clickbench/release/${{ matrix.dataset }}/latest/latest"
          for file in ./results/${{ matrix.dataset }}/*.json; do
            aws s3 cp $file "${RESULT_PREFIX}-$(basename $file)"
            aws s3 cp $file "${LATEST_PREFIX}-$(basename $file)"
          done

          aws s3 cp ./results/${{ matrix.dataset }}.html s3://benchmark/clickbench/release/${{ matrix.dataset }}.html
