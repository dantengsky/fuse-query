---------- Input ----------
show databases
---------- Output ---------
SHOW DATABASES
---------- AST ------------
ShowDatabases(
    ShowDatabasesStmt {
        catalog: None,
        full: false,
        limit: None,
    },
)


---------- Input ----------
show databases format TabSeparatedWithNamesAndTypes;
---------- Output ---------
SHOW DATABASES
---------- AST ------------
ShowDatabases(
    ShowDatabasesStmt {
        catalog: None,
        full: false,
        limit: None,
    },
)


---------- FORMAT ------------
Some(
    "TabSeparatedWithNamesAndTypes",
)
---------- Input ----------
show tables
---------- Output ---------
SHOW TABLES
---------- AST ------------
ShowTables(
    ShowTablesStmt {
        catalog: None,
        database: None,
        full: false,
        limit: None,
        with_history: false,
    },
)


---------- Input ----------
show drop tables
---------- Output ---------
SHOW DROP TABLE
---------- AST ------------
ShowDropTables(
    ShowDropTablesStmt {
        database: None,
        limit: None,
    },
)


---------- Input ----------
show drop tables like 't%'
---------- Output ---------
SHOW DROP TABLE LIKE 't%'
---------- AST ------------
ShowDropTables(
    ShowDropTablesStmt {
        database: None,
        limit: Some(
            Like {
                pattern: "t%",
            },
        ),
    },
)


---------- Input ----------
show drop tables where name='t'
---------- Output ---------
SHOW DROP TABLE WHERE (name = 't')
---------- AST ------------
ShowDropTables(
    ShowDropTablesStmt {
        database: None,
        limit: Some(
            Where {
                selection: BinaryOp {
                    span: Some(
                        27..28,
                    ),
                    op: Eq,
                    left: ColumnRef {
                        span: Some(
                            23..27,
                        ),
                        column: ColumnRef {
                            database: None,
                            table: None,
                            column: Name(
                                Identifier {
                                    span: Some(
                                        23..27,
                                    ),
                                    name: "name",
                                    quote: None,
                                },
                            ),
                        },
                    },
                    right: Literal {
                        span: Some(
                            28..31,
                        ),
                        lit: String(
                            "t",
                        ),
                    },
                },
            },
        ),
    },
)


---------- Input ----------
show tables format TabSeparatedWithNamesAndTypes;
---------- Output ---------
SHOW TABLES
---------- AST ------------
ShowTables(
    ShowTablesStmt {
        catalog: None,
        database: None,
        full: false,
        limit: None,
        with_history: false,
    },
)


---------- FORMAT ------------
Some(
    "TabSeparatedWithNamesAndTypes",
)
---------- Input ----------
describe "name""with""quote";
---------- Output ---------
DESCRIBE "name""with""quote"
---------- AST ------------
DescribeTable(
    DescribeTableStmt {
        catalog: None,
        database: None,
        table: Identifier {
            span: Some(
                9..28,
            ),
            name: "name\"with\"quote",
            quote: Some(
                '"',
            ),
        },
    },
)


---------- Input ----------
describe "name""""with""""quote";
---------- Output ---------
DESCRIBE "name""""with""""quote"
---------- AST ------------
DescribeTable(
    DescribeTableStmt {
        catalog: None,
        database: None,
        table: Identifier {
            span: Some(
                9..32,
            ),
            name: "name\"\"with\"\"quote",
            quote: Some(
                '"',
            ),
        },
    },
)


---------- Input ----------
show full tables
---------- Output ---------
SHOW FULL TABLES
---------- AST ------------
ShowTables(
    ShowTablesStmt {
        catalog: None,
        database: None,
        full: true,
        limit: None,
        with_history: false,
    },
)


---------- Input ----------
show full tables from db
---------- Output ---------
SHOW FULL TABLES FROM db
---------- AST ------------
ShowTables(
    ShowTablesStmt {
        catalog: None,
        database: Some(
            Identifier {
                span: Some(
                    22..24,
                ),
                name: "db",
                quote: None,
            },
        ),
        full: true,
        limit: None,
        with_history: false,
    },
)


---------- Input ----------
show full tables from ctl.db
---------- Output ---------
SHOW FULL TABLES FROM ctl.db
---------- AST ------------
ShowTables(
    ShowTablesStmt {
        catalog: Some(
            Identifier {
                span: Some(
                    22..25,
                ),
                name: "ctl",
                quote: None,
            },
        ),
        database: Some(
            Identifier {
                span: Some(
                    26..28,
                ),
                name: "db",
                quote: None,
            },
        ),
        full: true,
        limit: None,
        with_history: false,
    },
)


---------- Input ----------
show full columns in t in db
---------- Output ---------
SHOW FULL COLUMNS FROM t FROM db
---------- AST ------------
ShowColumns(
    ShowColumnsStmt {
        catalog: None,
        database: Some(
            Identifier {
                span: Some(
                    26..28,
                ),
                name: "db",
                quote: None,
            },
        ),
        table: Identifier {
            span: Some(
                21..22,
            ),
            name: "t",
            quote: None,
        },
        full: true,
        limit: None,
    },
)


---------- Input ----------
show columns in t from ctl.db
---------- Output ---------
SHOW COLUMNS FROM t FROM ctl.db
---------- AST ------------
ShowColumns(
    ShowColumnsStmt {
        catalog: Some(
            Identifier {
                span: Some(
                    23..26,
                ),
                name: "ctl",
                quote: None,
            },
        ),
        database: Some(
            Identifier {
                span: Some(
                    27..29,
                ),
                name: "db",
                quote: None,
            },
        ),
        table: Identifier {
            span: Some(
                16..17,
            ),
            name: "t",
            quote: None,
        },
        full: false,
        limit: None,
    },
)


---------- Input ----------
show full columns from t from db like 'id%'
---------- Output ---------
SHOW FULL COLUMNS FROM t FROM db LIKE 'id%'
---------- AST ------------
ShowColumns(
    ShowColumnsStmt {
        catalog: None,
        database: Some(
            Identifier {
                span: Some(
                    30..32,
                ),
                name: "db",
                quote: None,
            },
        ),
        table: Identifier {
            span: Some(
                23..24,
            ),
            name: "t",
            quote: None,
        },
        full: true,
        limit: Some(
            Like {
                pattern: "id%",
            },
        ),
    },
)


---------- Input ----------
show processlist like 't%' limit 2;
---------- Output ---------
SHOW PROCESSLIST LIKE 't%' LIMIT 2
---------- AST ------------
ShowProcessList {
    show_options: Some(
        ShowOptions {
            show_limit: Some(
                Like {
                    pattern: "t%",
                },
            ),
            limit: Some(
                2,
            ),
        },
    ),
}


---------- Input ----------
show processlist where database='default' limit 2;
---------- Output ---------
SHOW PROCESSLIST WHERE (database = 'default') LIMIT 2
---------- AST ------------
ShowProcessList {
    show_options: Some(
        ShowOptions {
            show_limit: Some(
                Where {
                    selection: BinaryOp {
                        span: Some(
                            31..32,
                        ),
                        op: Eq,
                        left: ColumnRef {
                            span: Some(
                                23..31,
                            ),
                            column: ColumnRef {
                                database: None,
                                table: None,
                                column: Name(
                                    Identifier {
                                        span: Some(
                                            23..31,
                                        ),
                                        name: "database",
                                        quote: None,
                                    },
                                ),
                            },
                        },
                        right: Literal {
                            span: Some(
                                32..41,
                            ),
                            lit: String(
                                "default",
                            ),
                        },
                    },
                },
            ),
            limit: Some(
                2,
            ),
        },
    ),
}


---------- Input ----------
show create table a.b;
---------- Output ---------
SHOW CREATE TABLE a.b
---------- AST ------------
ShowCreateTable(
    ShowCreateTableStmt {
        catalog: None,
        database: Some(
            Identifier {
                span: Some(
                    18..19,
                ),
                name: "a",
                quote: None,
            },
        ),
        table: Identifier {
            span: Some(
                20..21,
            ),
            name: "b",
            quote: None,
        },
    },
)


---------- Input ----------
show create table a.b format TabSeparatedWithNamesAndTypes;
---------- Output ---------
SHOW CREATE TABLE a.b
---------- AST ------------
ShowCreateTable(
    ShowCreateTableStmt {
        catalog: None,
        database: Some(
            Identifier {
                span: Some(
                    18..19,
                ),
                name: "a",
                quote: None,
            },
        ),
        table: Identifier {
            span: Some(
                20..21,
            ),
            name: "b",
            quote: None,
        },
    },
)


---------- FORMAT ------------
Some(
    "TabSeparatedWithNamesAndTypes",
)
---------- Input ----------
explain pipeline select a from b;
---------- Output ---------
EXPLAIN PIPELINE SELECT a FROM b
---------- AST ------------
Explain {
    kind: Pipeline,
    options: [],
    query: Query(
        Query {
            span: Some(
                17..32,
            ),
            with: None,
            body: Select(
                SelectStmt {
                    span: Some(
                        17..32,
                    ),
                    hints: None,
                    distinct: false,
                    select_list: [
                        AliasedExpr {
                            expr: ColumnRef {
                                span: Some(
                                    24..25,
                                ),
                                column: ColumnRef {
                                    database: None,
                                    table: None,
                                    column: Name(
                                        Identifier {
                                            span: Some(
                                                24..25,
                                            ),
                                            name: "a",
                                            quote: None,
                                        },
                                    ),
                                },
                            },
                            alias: None,
                        },
                    ],
                    from: [
                        Table {
                            span: Some(
                                31..32,
                            ),
                            catalog: None,
                            database: None,
                            table: Identifier {
                                span: Some(
                                    31..32,
                                ),
                                name: "b",
                                quote: None,
                            },
                            alias: None,
                            travel_point: None,
                            since_point: None,
                            pivot: None,
                            unpivot: None,
                        },
                    ],
                    selection: None,
                    group_by: None,
                    having: None,
                    window_list: None,
                    qualify: None,
                },
            ),
            order_by: [],
            limit: [],
            offset: None,
            ignore_result: false,
        },
    ),
}


---------- Input ----------
explain pipeline select a from t1 ignore_result;
---------- Output ---------
EXPLAIN PIPELINE SELECT a FROM t1
---------- AST ------------
Explain {
    kind: Pipeline,
    options: [],
    query: Query(
        Query {
            span: Some(
                17..33,
            ),
            with: None,
            body: Select(
                SelectStmt {
                    span: Some(
                        17..33,
                    ),
                    hints: None,
                    distinct: false,
                    select_list: [
                        AliasedExpr {
                            expr: ColumnRef {
                                span: Some(
                                    24..25,
                                ),
                                column: ColumnRef {
                                    database: None,
                                    table: None,
                                    column: Name(
                                        Identifier {
                                            span: Some(
                                                24..25,
                                            ),
                                            name: "a",
                                            quote: None,
                                        },
                                    ),
                                },
                            },
                            alias: None,
                        },
                    ],
                    from: [
                        Table {
                            span: Some(
                                31..33,
                            ),
                            catalog: None,
                            database: None,
                            table: Identifier {
                                span: Some(
                                    31..33,
                                ),
                                name: "t1",
                                quote: None,
                            },
                            alias: None,
                            travel_point: None,
                            since_point: None,
                            pivot: None,
                            unpivot: None,
                        },
                    ],
                    selection: None,
                    group_by: None,
                    having: None,
                    window_list: None,
                    qualify: None,
                },
            ),
            order_by: [],
            limit: [],
            offset: None,
            ignore_result: true,
        },
    ),
}


---------- Input ----------
explain(verbose, logical, optimized) select * from t where a = 1
---------- Output ---------
EXPLAIN(VERBOSE = true, LOGICAL = true, OPTIMIZED = true) SELECT * FROM t WHERE (a = 1)
---------- AST ------------
Explain {
    kind: Plan,
    options: [
        Verbose(
            true,
        ),
        Logical(
            true,
        ),
        Optimized(
            true,
        ),
    ],
    query: Query(
        Query {
            span: Some(
                37..64,
            ),
            with: None,
            body: Select(
                SelectStmt {
                    span: Some(
                        37..64,
                    ),
                    hints: None,
                    distinct: false,
                    select_list: [
                        StarColumns {
                            qualified: [
                                Star(
                                    Some(
                                        44..45,
                                    ),
                                ),
                            ],
                            column_filter: None,
                        },
                    ],
                    from: [
                        Table {
                            span: Some(
                                51..52,
                            ),
                            catalog: None,
                            database: None,
                            table: Identifier {
                                span: Some(
                                    51..52,
                                ),
                                name: "t",
                                quote: None,
                            },
                            alias: None,
                            travel_point: None,
                            since_point: None,
                            pivot: None,
                            unpivot: None,
                        },
                    ],
                    selection: Some(
                        BinaryOp {
                            span: Some(
                                61..62,
                            ),
                            op: Eq,
                            left: ColumnRef {
                                span: Some(
                                    59..60,
                                ),
                                column: ColumnRef {
                                    database: None,
                                    table: None,
                                    column: Name(
                                        Identifier {
                                            span: Some(
                                                59..60,
                                            ),
                                            name: "a",
                                            quote: None,
                                        },
                                    ),
                                },
                            },
                            right: Literal {
                                span: Some(
                                    63..64,
                                ),
                                lit: UInt64(
                                    1,
                                ),
                            },
                        },
                    ),
                    group_by: None,
                    having: None,
                    window_list: None,
                    qualify: None,
                },
            ),
            order_by: [],
            limit: [],
            offset: None,
            ignore_result: false,
        },
    ),
}


---------- Input ----------
describe a;
---------- Output ---------
DESCRIBE a
---------- AST ------------
DescribeTable(
    DescribeTableStmt {
        catalog: None,
        database: None,
        table: Identifier {
            span: Some(
                9..10,
            ),
            name: "a",
            quote: None,
        },
    },
)


---------- Input ----------
describe a format TabSeparatedWithNamesAndTypes;
---------- Output ---------
DESCRIBE a
---------- AST ------------
DescribeTable(
    DescribeTableStmt {
        catalog: None,
        database: None,
        table: Identifier {
            span: Some(
                9..10,
            ),
            name: "a",
            quote: None,
        },
    },
)


---------- FORMAT ------------
Some(
    "TabSeparatedWithNamesAndTypes",
)
---------- Input ----------
CREATE AGGREGATING INDEX idx1 AS SELECT SUM(a), b FROM t1 WHERE b > 3 GROUP BY b;
---------- Output ---------
CREATE SYNC Aggregating INDEX Identifier { span: Some(25..29), name: "idx1", quote: None } AS SELECT SUM(a), b FROM t1 WHERE (b > 3) GROUP BY b
---------- AST ------------
CreateIndex(
    CreateIndexStmt {
        index_type: Aggregating,
        create_option: None,
        index_name: Identifier {
            span: Some(
                25..29,
            ),
            name: "idx1",
            quote: None,
        },
        query: Query {
            span: Some(
                33..80,
            ),
            with: None,
            body: Select(
                SelectStmt {
                    span: Some(
                        33..80,
                    ),
                    hints: None,
                    distinct: false,
                    select_list: [
                        AliasedExpr {
                            expr: FunctionCall {
                                span: Some(
                                    40..46,
                                ),
                                func: FunctionCall {
                                    distinct: false,
                                    name: Identifier {
                                        span: Some(
                                            40..43,
                                        ),
                                        name: "SUM",
                                        quote: None,
                                    },
                                    args: [
                                        ColumnRef {
                                            span: Some(
                                                44..45,
                                            ),
                                            column: ColumnRef {
                                                database: None,
                                                table: None,
                                                column: Name(
                                                    Identifier {
                                                        span: Some(
                                                            44..45,
                                                        ),
                                                        name: "a",
                                                        quote: None,
                                                    },
                                                ),
                                            },
                                        },
                                    ],
                                    params: [],
                                    window: None,
                                    lambda: None,
                                },
                            },
                            alias: None,
                        },
                        AliasedExpr {
                            expr: ColumnRef {
                                span: Some(
                                    48..49,
                                ),
                                column: ColumnRef {
                                    database: None,
                                    table: None,
                                    column: Name(
                                        Identifier {
                                            span: Some(
                                                48..49,
                                            ),
                                            name: "b",
                                            quote: None,
                                        },
                                    ),
                                },
                            },
                            alias: None,
                        },
                    ],
                    from: [
                        Table {
                            span: Some(
                                55..57,
                            ),
                            catalog: None,
                            database: None,
                            table: Identifier {
                                span: Some(
                                    55..57,
                                ),
                                name: "t1",
                                quote: None,
                            },
                            alias: None,
                            travel_point: None,
                            since_point: None,
                            pivot: None,
                            unpivot: None,
                        },
                    ],
                    selection: Some(
                        BinaryOp {
                            span: Some(
                                66..67,
                            ),
                            op: Gt,
                            left: ColumnRef {
                                span: Some(
                                    64..65,
                                ),
                                column: ColumnRef {
                                    database: None,
                                    table: None,
                                    column: Name(
                                        Identifier {
                                            span: Some(
                                                64..65,
                                            ),
                                            name: "b",
                                            quote: None,
                                        },
                                    ),
                                },
                            },
                            right: Literal {
                                span: Some(
                                    68..69,
                                ),
                                lit: UInt64(
                                    3,
                                ),
                            },
                        },
                    ),
                    group_by: Some(
                        Normal(
                            [
                                ColumnRef {
                                    span: Some(
                                        79..80,
                                    ),
                                    column: ColumnRef {
                                        database: None,
                                        table: None,
                                        column: Name(
                                            Identifier {
                                                span: Some(
                                                    79..80,
                                                ),
                                                name: "b",
                                                quote: None,
                                            },
                                        ),
                                    },
                                },
                            ],
                        ),
                    ),
                    having: None,
                    window_list: None,
                    qualify: None,
                },
            ),
            order_by: [],
            limit: [],
            offset: None,
            ignore_result: false,
        },
        sync_creation: true,
    },
)


---------- Input ----------
CREATE OR REPLACE AGGREGATING INDEX idx1 AS SELECT SUM(a), b FROM t1 WHERE b > 3 GROUP BY b;
---------- Output ---------
CREATE OR REPLACE SYNC Aggregating INDEX Identifier { span: Some(36..40), name: "idx1", quote: None } AS SELECT SUM(a), b FROM t1 WHERE (b > 3) GROUP BY b
---------- AST ------------
CreateIndex(
    CreateIndexStmt {
        index_type: Aggregating,
        create_option: CreateOrReplace,
        index_name: Identifier {
            span: Some(
                36..40,
            ),
            name: "idx1",
            quote: None,
        },
        query: Query {
            span: Some(
                44..91,
            ),
            with: None,
            body: Select(
                SelectStmt {
                    span: Some(
                        44..91,
                    ),
                    hints: None,
                    distinct: false,
                    select_list: [
                        AliasedExpr {
                            expr: FunctionCall {
                                span: Some(
                                    51..57,
                                ),
                                func: FunctionCall {
                                    distinct: false,
                                    name: Identifier {
                                        span: Some(
                                            51..54,
                                        ),
                                        name: "SUM",
                                        quote: None,
                                    },
                                    args: [
                                        ColumnRef {
                                            span: Some(
                                                55..56,
                                            ),
                                            column: ColumnRef {
                                                database: None,
                                                table: None,
                                                column: Name(
                                                    Identifier {
                                                        span: Some(
                                                            55..56,
                                                        ),
                                                        name: "a",
                                                        quote: None,
                                                    },
                                                ),
                                            },
                                        },
                                    ],
                                    params: [],
                                    window: None,
                                    lambda: None,
                                },
                            },
                            alias: None,
                        },
                        AliasedExpr {
                            expr: ColumnRef {
                                span: Some(
                                    59..60,
                                ),
                                column: ColumnRef {
                                    database: None,
                                    table: None,
                                    column: Name(
                                        Identifier {
                                            span: Some(
                                                59..60,
                                            ),
                                            name: "b",
                                            quote: None,
                                        },
                                    ),
                                },
                            },
                            alias: None,
                        },
                    ],
                    from: [
                        Table {
                            span: Some(
                                66..68,
                            ),
                            catalog: None,
                            database: None,
                            table: Identifier {
                                span: Some(
                                    66..68,
                                ),
                                name: "t1",
                                quote: None,
                            },
                            alias: None,
                            travel_point: None,
                            since_point: None,
                            pivot: None,
                            unpivot: None,
                        },
                    ],
                    selection: Some(
                        BinaryOp {
                            span: Some(
                                77..78,
                            ),
                            op: Gt,
                            left: ColumnRef {
                                span: Some(
                                    75..76,
                                ),
                                column: ColumnRef {
                                    database: None,
                                    table: None,
                                    column: Name(
                                        Identifier {
                                            span: Some(
                                                75..76,
                                            ),
                                            name: "b",
                                            quote: None,
                                        },
                                    ),
                                },
                            },
                            right: Literal {
                                span: Some(
                                    79..80,
                                ),
                                lit: UInt64(
                                    3,
                                ),
                            },
                        },
                    ),
                    group_by: Some(
                        Normal(
                            [
                                ColumnRef {
                                    span: Some(
                                        90..91,
                                    ),
                                    column: ColumnRef {
                                        database: None,
                                        table: None,
                                        column: Name(
                                            Identifier {
                                                span: Some(
                                                    90..91,
                                                ),
                                                name: "b",
                                                quote: None,
                                            },
                                        ),
                                    },
                                },
                            ],
                        ),
                    ),
                    having: None,
                    window_list: None,
                    qualify: None,
                },
            ),
            order_by: [],
            limit: [],
            offset: None,
            ignore_result: false,
        },
        sync_creation: true,
    },
)


---------- Input ----------
create table a (c decimal(38, 0))
---------- Output ---------
CREATE TABLE a (c Decimal(38, 0))
---------- AST ------------
CreateTable(
    CreateTableStmt {
        create_option: None,
        catalog: None,
        database: None,
        table: Identifier {
            span: Some(
                13..14,
            ),
            name: "a",
            quote: None,
        },
        source: Some(
            Columns(
                [
                    ColumnDefinition {
                        name: Identifier {
                            span: Some(
                                16..17,
                            ),
                            name: "c",
                            quote: None,
                        },
                        data_type: Decimal {
                            precision: 38,
                            scale: 0,
                        },
                        expr: None,
                        comment: None,
                    },
                ],
            ),
        ),
        engine: None,
        uri_location: None,
        cluster_by: [],
        table_options: {},
        as_query: None,
        transient: false,
    },
)


---------- Input ----------
create table a (c decimal(38))
---------- Output ---------
CREATE TABLE a (c Decimal(38, 0))
---------- AST ------------
CreateTable(
    CreateTableStmt {
        create_option: None,
        catalog: None,
        database: None,
        table: Identifier {
            span: Some(
                13..14,
            ),
            name: "a",
            quote: None,
        },
        source: Some(
            Columns(
                [
                    ColumnDefinition {
                        name: Identifier {
                            span: Some(
                                16..17,
                            ),
                            name: "c",
                            quote: None,
                        },
                        data_type: Decimal {
                            precision: 38,
                            scale: 0,
                        },
                        expr: None,
                        comment: None,
                    },
                ],
            ),
        ),
        engine: None,
        uri_location: None,
        cluster_by: [],
        table_options: {},
        as_query: None,
        transient: false,
    },
)


---------- Input ----------
create or replace table a (c decimal(38))
---------- Output ---------
CREATE OR REPLACE TABLE a (c Decimal(38, 0))
---------- AST ------------
CreateTable(
    CreateTableStmt {
        create_option: CreateOrReplace,
        catalog: None,
        database: None,
        table: Identifier {
            span: Some(
                24..25,
            ),
            name: "a",
            quote: None,
        },
        source: Some(
            Columns(
                [
                    ColumnDefinition {
                        name: Identifier {
                            span: Some(
                                27..28,
                            ),
                            name: "c",
                            quote: None,
                        },
                        data_type: Decimal {
                            precision: 38,
                            scale: 0,
                        },
                        expr: None,
                        comment: None,
                    },
                ],
            ),
        ),
        engine: None,
        uri_location: None,
        cluster_by: [],
        table_options: {},
        as_query: None,
        transient: false,
    },
)


---------- Input ----------
create or replace table a (c int(10) unsigned)
---------- Output ---------
CREATE OR REPLACE TABLE a (c UInt32)
---------- AST ------------
CreateTable(
    CreateTableStmt {
        create_option: CreateOrReplace,
        catalog: None,
        database: None,
        table: Identifier {
            span: Some(
                24..25,
            ),
            name: "a",
            quote: None,
        },
        source: Some(
            Columns(
                [
                    ColumnDefinition {
                        name: Identifier {
                            span: Some(
                                27..28,
                            ),
                            name: "c",
                            quote: None,
                        },
                        data_type: UInt32,
                        expr: None,
                        comment: None,
                    },
                ],
            ),
        ),
        engine: None,
        uri_location: None,
        cluster_by: [],
        table_options: {},
        as_query: None,
        transient: false,
    },
)


---------- Input ----------
create table if not exists a.b (c integer not null default 1, b varchar);
---------- Output ---------
CREATE TABLE IF NOT EXISTS a.b (c Int32 NOT NULL DEFAULT 1, b STRING)
---------- AST ------------
CreateTable(
    CreateTableStmt {
        create_option: CreateIfNotExists,
        catalog: None,
        database: Some(
            Identifier {
                span: Some(
                    27..28,
                ),
                name: "a",
                quote: None,
            },
        ),
        table: Identifier {
            span: Some(
                29..30,
            ),
            name: "b",
            quote: None,
        },
        source: Some(
            Columns(
                [
                    ColumnDefinition {
                        name: Identifier {
                            span: Some(
                                32..33,
                            ),
                            name: "c",
                            quote: None,
                        },
                        data_type: NotNull(
                            Int32,
                        ),
                        expr: Some(
                            Default(
                                Literal {
                                    span: Some(
                                        59..60,
                                    ),
                                    lit: UInt64(
                                        1,
                                    ),
                                },
                            ),
                        ),
                        comment: None,
                    },
                    ColumnDefinition {
                        name: Identifier {
                            span: Some(
                                62..63,
                            ),
                            name: "b",
                            quote: None,
                        },
                        data_type: String,
                        expr: None,
                        comment: None,
                    },
                ],
            ),
        ),
        engine: None,
        uri_location: None,
        cluster_by: [],
        table_options: {},
        as_query: None,
        transient: false,
    },
)


---------- Input ----------
create table if not exists a.b (c integer default 1 not null, b varchar) as select * from t;
---------- Output ---------
CREATE TABLE IF NOT EXISTS a.b (c Int32 NOT NULL DEFAULT 1, b STRING) AS SELECT * FROM t
---------- AST ------------
CreateTable(
    CreateTableStmt {
        create_option: CreateIfNotExists,
        catalog: None,
        database: Some(
            Identifier {
                span: Some(
                    27..28,
                ),
                name: "a",
                quote: None,
            },
        ),
        table: Identifier {
            span: Some(
                29..30,
            ),
            name: "b",
            quote: None,
        },
        source: Some(
            Columns(
                [
                    ColumnDefinition {
                        name: Identifier {
                            span: Some(
                                32..33,
                            ),
                            name: "c",
                            quote: None,
                        },
                        data_type: NotNull(
                            Int32,
                        ),
                        expr: Some(
                            Default(
                                Literal {
                                    span: Some(
                                        50..51,
                                    ),
                                    lit: UInt64(
                                        1,
                                    ),
                                },
                            ),
                        ),
                        comment: None,
                    },
                    ColumnDefinition {
                        name: Identifier {
                            span: Some(
                                62..63,
                            ),
                            name: "b",
                            quote: None,
                        },
                        data_type: String,
                        expr: None,
                        comment: None,
                    },
                ],
            ),
        ),
        engine: None,
        uri_location: None,
        cluster_by: [],
        table_options: {},
        as_query: Some(
            Query {
                span: Some(
                    76..91,
                ),
                with: None,
                body: Select(
                    SelectStmt {
                        span: Some(
                            76..91,
                        ),
                        hints: None,
                        distinct: false,
                        select_list: [
                            StarColumns {
                                qualified: [
                                    Star(
                                        Some(
                                            83..84,
                                        ),
                                    ),
                                ],
                                column_filter: None,
                            },
                        ],
                        from: [
                            Table {
                                span: Some(
                                    90..91,
                                ),
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    span: Some(
                                        90..91,
                                    ),
                                    name: "t",
                                    quote: None,
                                },
                                alias: None,
                                travel_point: None,
                                since_point: None,
                                pivot: None,
                                unpivot: None,
                            },
                        ],
                        selection: None,
                        group_by: None,
                        having: None,
                        window_list: None,
                        qualify: None,
                    },
                ),
                order_by: [],
                limit: [],
                offset: None,
                ignore_result: false,
            },
        ),
        transient: false,
    },
)


---------- Input ----------
create table if not exists a.b (c tuple(m integer, n string), d tuple(integer, string));
---------- Output ---------
CREATE TABLE IF NOT EXISTS a.b (c TUPLE(m Int32, n STRING), d TUPLE(Int32, STRING))
---------- AST ------------
CreateTable(
    CreateTableStmt {
        create_option: CreateIfNotExists,
        catalog: None,
        database: Some(
            Identifier {
                span: Some(
                    27..28,
                ),
                name: "a",
                quote: None,
            },
        ),
        table: Identifier {
            span: Some(
                29..30,
            ),
            name: "b",
            quote: None,
        },
        source: Some(
            Columns(
                [
                    ColumnDefinition {
                        name: Identifier {
                            span: Some(
                                32..33,
                            ),
                            name: "c",
                            quote: None,
                        },
                        data_type: Tuple {
                            fields_name: Some(
                                [
                                    "m",
                                    "n",
                                ],
                            ),
                            fields_type: [
                                Int32,
                                String,
                            ],
                        },
                        expr: None,
                        comment: None,
                    },
                    ColumnDefinition {
                        name: Identifier {
                            span: Some(
                                62..63,
                            ),
                            name: "d",
                            quote: None,
                        },
                        data_type: Tuple {
                            fields_name: None,
                            fields_type: [
                                Int32,
                                String,
                            ],
                        },
                        expr: None,
                        comment: None,
                    },
                ],
            ),
        ),
        engine: None,
        uri_location: None,
        cluster_by: [],
        table_options: {},
        as_query: None,
        transient: false,
    },
)


---------- Input ----------
create table if not exists a.b (a string, b string, c string as (concat(a, ' ', b)) stored );
---------- Output ---------
CREATE TABLE IF NOT EXISTS a.b (a STRING, b STRING, c STRING AS (concat(a, ' ', b)) STORED)
---------- AST ------------
CreateTable(
    CreateTableStmt {
        create_option: CreateIfNotExists,
        catalog: None,
        database: Some(
            Identifier {
                span: Some(
                    27..28,
                ),
                name: "a",
                quote: None,
            },
        ),
        table: Identifier {
            span: Some(
                29..30,
            ),
            name: "b",
            quote: None,
        },
        source: Some(
            Columns(
                [
                    ColumnDefinition {
                        name: Identifier {
                            span: Some(
                                32..33,
                            ),
                            name: "a",
                            quote: None,
                        },
                        data_type: String,
                        expr: None,
                        comment: None,
                    },
                    ColumnDefinition {
                        name: Identifier {
                            span: Some(
                                42..43,
                            ),
                            name: "b",
                            quote: None,
                        },
                        data_type: String,
                        expr: None,
                        comment: None,
                    },
                    ColumnDefinition {
                        name: Identifier {
                            span: Some(
                                52..53,
                            ),
                            name: "c",
                            quote: None,
                        },
                        data_type: String,
                        expr: Some(
                            Stored(
                                FunctionCall {
                                    span: Some(
                                        65..82,
                                    ),
                                    func: FunctionCall {
                                        distinct: false,
                                        name: Identifier {
                                            span: Some(
                                                65..71,
                                            ),
                                            name: "concat",
                                            quote: None,
                                        },
                                        args: [
                                            ColumnRef {
                                                span: Some(
                                                    72..73,
                                                ),
                                                column: ColumnRef {
                                                    database: None,
                                                    table: None,
                                                    column: Name(
                                                        Identifier {
                                                            span: Some(
                                                                72..73,
                                                            ),
                                                            name: "a",
                                                            quote: None,
                                                        },
                                                    ),
                                                },
                                            },
                                            Literal {
                                                span: Some(
                                                    75..78,
                                                ),
                                                lit: String(
                                                    " ",
                                                ),
                                            },
                                            ColumnRef {
                                                span: Some(
                                                    80..81,
                                                ),
                                                column: ColumnRef {
                                                    database: None,
                                                    table: None,
                                                    column: Name(
                                                        Identifier {
                                                            span: Some(
                                                                80..81,
                                                            ),
                                                            name: "b",
                                                            quote: None,
                                                        },
                                                    ),
                                                },
                                            },
                                        ],
                                        params: [],
                                        window: None,
                                        lambda: None,
                                    },
                                },
                            ),
                        ),
                        comment: None,
                    },
                ],
            ),
        ),
        engine: None,
        uri_location: None,
        cluster_by: [],
        table_options: {},
        as_query: None,
        transient: false,
    },
)


---------- Input ----------
create table if not exists a.b (a int, b int, c int generated always as (a + b) virtual );
---------- Output ---------
CREATE TABLE IF NOT EXISTS a.b (a Int32, b Int32, c Int32 AS ((a + b)) VIRTUAL)
---------- AST ------------
CreateTable(
    CreateTableStmt {
        create_option: CreateIfNotExists,
        catalog: None,
        database: Some(
            Identifier {
                span: Some(
                    27..28,
                ),
                name: "a",
                quote: None,
            },
        ),
        table: Identifier {
            span: Some(
                29..30,
            ),
            name: "b",
            quote: None,
        },
        source: Some(
            Columns(
                [
                    ColumnDefinition {
                        name: Identifier {
                            span: Some(
                                32..33,
                            ),
                            name: "a",
                            quote: None,
                        },
                        data_type: Int32,
                        expr: None,
                        comment: None,
                    },
                    ColumnDefinition {
                        name: Identifier {
                            span: Some(
                                39..40,
                            ),
                            name: "b",
                            quote: None,
                        },
                        data_type: Int32,
                        expr: None,
                        comment: None,
                    },
                    ColumnDefinition {
                        name: Identifier {
                            span: Some(
                                46..47,
                            ),
                            name: "c",
                            quote: None,
                        },
                        data_type: Int32,
                        expr: Some(
                            Virtual(
                                BinaryOp {
                                    span: Some(
                                        75..76,
                                    ),
                                    op: Plus,
                                    left: ColumnRef {
                                        span: Some(
                                            73..74,
                                        ),
                                        column: ColumnRef {
                                            database: None,
                                            table: None,
                                            column: Name(
                                                Identifier {
                                                    span: Some(
                                                        73..74,
                                                    ),
                                                    name: "a",
                                                    quote: None,
                                                },
                                            ),
                                        },
                                    },
                                    right: ColumnRef {
                                        span: Some(
                                            77..78,
                                        ),
                                        column: ColumnRef {
                                            database: None,
                                            table: None,
                                            column: Name(
                                                Identifier {
                                                    span: Some(
                                                        77..78,
                                                    ),
                                                    name: "b",
                                                    quote: None,
                                                },
                                            ),
                                        },
                                    },
                                },
                            ),
                        ),
                        comment: None,
                    },
                ],
            ),
        ),
        engine: None,
        uri_location: None,
        cluster_by: [],
        table_options: {},
        as_query: None,
        transient: false,
    },
)


---------- Input ----------
create table a.b like c.d;
---------- Output ---------
CREATE TABLE a.b LIKE c.d
---------- AST ------------
CreateTable(
    CreateTableStmt {
        create_option: None,
        catalog: None,
        database: Some(
            Identifier {
                span: Some(
                    13..14,
                ),
                name: "a",
                quote: None,
            },
        ),
        table: Identifier {
            span: Some(
                15..16,
            ),
            name: "b",
            quote: None,
        },
        source: Some(
            Like {
                catalog: None,
                database: Some(
                    Identifier {
                        span: Some(
                            22..23,
                        ),
                        name: "c",
                        quote: None,
                    },
                ),
                table: Identifier {
                    span: Some(
                        24..25,
                    ),
                    name: "d",
                    quote: None,
                },
            },
        ),
        engine: None,
        uri_location: None,
        cluster_by: [],
        table_options: {},
        as_query: None,
        transient: false,
    },
)


---------- Input ----------
create table t like t2 engine = memory;
---------- Output ---------
CREATE TABLE t LIKE t2 ENGINE = MEMORY
---------- AST ------------
CreateTable(
    CreateTableStmt {
        create_option: None,
        catalog: None,
        database: None,
        table: Identifier {
            span: Some(
                13..14,
            ),
            name: "t",
            quote: None,
        },
        source: Some(
            Like {
                catalog: None,
                database: None,
                table: Identifier {
                    span: Some(
                        20..22,
                    ),
                    name: "t2",
                    quote: None,
                },
            },
        ),
        engine: Some(
            Memory,
        ),
        uri_location: None,
        cluster_by: [],
        table_options: {},
        as_query: None,
        transient: false,
    },
)


---------- Input ----------
create table if not exists a.b (a int) 's3://testbucket/admin/data/' connection=(aws_key_id='minioadmin' aws_secret_key='minioadmin' endpoint_url='http://127.0.0.1:9900');
---------- Output ---------
CREATE TABLE IF NOT EXISTS a.b (a Int32) 's3://testbucket/admin/data/' CONNECTION = ( aws_key_id = '******min', aws_secret_key = '******min', endpoint_url = '******900' )
---------- AST ------------
CreateTable(
    CreateTableStmt {
        create_option: CreateIfNotExists,
        catalog: None,
        database: Some(
            Identifier {
                span: Some(
                    27..28,
                ),
                name: "a",
                quote: None,
            },
        ),
        table: Identifier {
            span: Some(
                29..30,
            ),
            name: "b",
            quote: None,
        },
        source: Some(
            Columns(
                [
                    ColumnDefinition {
                        name: Identifier {
                            span: Some(
                                32..33,
                            ),
                            name: "a",
                            quote: None,
                        },
                        data_type: Int32,
                        expr: None,
                        comment: None,
                    },
                ],
            ),
        ),
        engine: None,
        uri_location: Some(
            UriLocation {
                protocol: "s3",
                name: "testbucket",
                path: "/admin/data/",
                part_prefix: "",
                connection: Connection {
                    visited_keys: {},
                    conns: {
                        "aws_key_id": "minioadmin",
                        "aws_secret_key": "minioadmin",
                        "endpoint_url": "http://127.0.0.1:9900",
                    },
                },
            },
        ),
        cluster_by: [],
        table_options: {},
        as_query: None,
        transient: false,
    },
)


---------- Input ----------
create table if not exists a.b (a int) 's3://testbucket/admin/data/'
             connection=(aws_key_id='minioadmin' aws_secret_key='minioadmin' endpoint_url='http://127.0.0.1:9900')
             location_prefix = 'db';
---------- Output ---------
CREATE TABLE IF NOT EXISTS a.b (a Int32) 's3://testbucket/admin/data/' LOCATION_PREFIX = 'db' CONNECTION = ( aws_key_id = '******min', aws_secret_key = '******min', endpoint_url = '******900' )
---------- AST ------------
CreateTable(
    CreateTableStmt {
        create_option: CreateIfNotExists,
        catalog: None,
        database: Some(
            Identifier {
                span: Some(
                    27..28,
                ),
                name: "a",
                quote: None,
            },
        ),
        table: Identifier {
            span: Some(
                29..30,
            ),
            name: "b",
            quote: None,
        },
        source: Some(
            Columns(
                [
                    ColumnDefinition {
                        name: Identifier {
                            span: Some(
                                32..33,
                            ),
                            name: "a",
                            quote: None,
                        },
                        data_type: Int32,
                        expr: None,
                        comment: None,
                    },
                ],
            ),
        ),
        engine: None,
        uri_location: Some(
            UriLocation {
                protocol: "s3",
                name: "testbucket",
                path: "/admin/data/",
                part_prefix: "db",
                connection: Connection {
                    visited_keys: {},
                    conns: {
                        "aws_key_id": "minioadmin",
                        "aws_secret_key": "minioadmin",
                        "endpoint_url": "http://127.0.0.1:9900",
                    },
                },
            },
        ),
        cluster_by: [],
        table_options: {},
        as_query: None,
        transient: false,
    },
)


---------- Input ----------
truncate table a;
---------- Output ---------
TRUNCATE TABLE a
---------- AST ------------
TruncateTable(
    TruncateTableStmt {
        catalog: None,
        database: None,
        table: Identifier {
            span: Some(
                15..16,
            ),
            name: "a",
            quote: None,
        },
    },
)


---------- Input ----------
truncate table "a".b;
---------- Output ---------
TRUNCATE TABLE "a".b
---------- AST ------------
TruncateTable(
    TruncateTableStmt {
        catalog: None,
        database: Some(
            Identifier {
                span: Some(
                    15..18,
                ),
                name: "a",
                quote: Some(
                    '"',
                ),
            },
        ),
        table: Identifier {
            span: Some(
                19..20,
            ),
            name: "b",
            quote: None,
        },
    },
)


---------- Input ----------
drop table a;
---------- Output ---------
DROP TABLE a
---------- AST ------------
DropTable(
    DropTableStmt {
        if_exists: false,
        catalog: None,
        database: None,
        table: Identifier {
            span: Some(
                11..12,
            ),
            name: "a",
            quote: None,
        },
        all: false,
    },
)


---------- Input ----------
drop table if exists a."b";
---------- Output ---------
DROP TABLE IF EXISTS a."b"
---------- AST ------------
DropTable(
    DropTableStmt {
        if_exists: true,
        catalog: None,
        database: Some(
            Identifier {
                span: Some(
                    21..22,
                ),
                name: "a",
                quote: None,
            },
        ),
        table: Identifier {
            span: Some(
                23..26,
            ),
            name: "b",
            quote: Some(
                '"',
            ),
        },
        all: false,
    },
)


---------- Input ----------
use "a";
---------- Output ---------
USE "a"
---------- AST ------------
UseDatabase {
    database: Identifier {
        span: Some(
            4..7,
        ),
        name: "a",
        quote: Some(
            '"',
        ),
    },
}


---------- Input ----------
create catalog ctl type=hive connection=(url='<hive-meta-store>' thrift_protocol='binary');
---------- Output ---------
CREATE CATALOG ctl TYPE='HIVE' CONNECTION = ( thrift_protocol = 'binary', url = '<hive-meta-store>' )
---------- AST ------------
CreateCatalog(
    CreateCatalogStmt {
        if_not_exists: false,
        catalog_name: "ctl",
        catalog_type: Hive,
        catalog_options: {
            "thrift_protocol": "binary",
            "url": "<hive-meta-store>",
        },
    },
)


---------- Input ----------
create database if not exists a;
---------- Output ---------
CREATE DATABASE IF NOT EXISTS a
---------- AST ------------
CreateDatabase(
    CreateDatabaseStmt {
        create_option: CreateIfNotExists,
        database: DatabaseRef {
            catalog: None,
            database: Identifier {
                span: Some(
                    30..31,
                ),
                name: "a",
                quote: None,
            },
        },
        engine: None,
        options: [],
        from_share: None,
    },
)


---------- Input ----------
create database ctl.t engine = Default;
---------- Output ---------
CREATE DATABASEctl.t ENGINE = DEFAULT
---------- AST ------------
CreateDatabase(
    CreateDatabaseStmt {
        create_option: None,
        database: DatabaseRef {
            catalog: Some(
                Identifier {
                    span: Some(
                        16..19,
                    ),
                    name: "ctl",
                    quote: None,
                },
            ),
            database: Identifier {
                span: Some(
                    20..21,
                ),
                name: "t",
                quote: None,
            },
        },
        engine: Some(
            Default,
        ),
        options: [],
        from_share: None,
    },
)


---------- Input ----------
create database t engine = Default;
---------- Output ---------
CREATE DATABASEt ENGINE = DEFAULT
---------- AST ------------
CreateDatabase(
    CreateDatabaseStmt {
        create_option: None,
        database: DatabaseRef {
            catalog: None,
            database: Identifier {
                span: Some(
                    16..17,
                ),
                name: "t",
                quote: None,
            },
        },
        engine: Some(
            Default,
        ),
        options: [],
        from_share: None,
    },
)


---------- Input ----------
create database t FROM SHARE a.s;
---------- Output ---------
CREATE DATABASEt FROM SHARE a.s
---------- AST ------------
CreateDatabase(
    CreateDatabaseStmt {
        create_option: None,
        database: DatabaseRef {
            catalog: None,
            database: Identifier {
                span: Some(
                    16..17,
                ),
                name: "t",
                quote: None,
            },
        },
        engine: None,
        options: [],
        from_share: Some(
            ShareNameIdent {
                tenant: "a",
                share_name: "s",
            },
        ),
    },
)


---------- Input ----------
create or replace database a;
---------- Output ---------
CREATE OR REPLACE DATABASEa
---------- AST ------------
CreateDatabase(
    CreateDatabaseStmt {
        create_option: CreateOrReplace,
        database: DatabaseRef {
            catalog: None,
            database: Identifier {
                span: Some(
                    27..28,
                ),
                name: "a",
                quote: None,
            },
        },
        engine: None,
        options: [],
        from_share: None,
    },
)


---------- Input ----------
drop database ctl.t;
---------- Output ---------
DROP DATABASE ctl.t
---------- AST ------------
DropDatabase(
    DropDatabaseStmt {
        if_exists: false,
        catalog: Some(
            Identifier {
                span: Some(
                    14..17,
                ),
                name: "ctl",
                quote: None,
            },
        ),
        database: Identifier {
            span: Some(
                18..19,
            ),
            name: "t",
            quote: None,
        },
    },
)


---------- Input ----------
drop database if exists t;
---------- Output ---------
DROP DATABASE IF EXISTS t
---------- AST ------------
DropDatabase(
    DropDatabaseStmt {
        if_exists: true,
        catalog: None,
        database: Identifier {
            span: Some(
                24..25,
            ),
            name: "t",
            quote: None,
        },
    },
)


---------- Input ----------
create table c(a DateTime null, b DateTime(3));
---------- Output ---------
CREATE TABLE c (a TIMESTAMP NULL, b TIMESTAMP)
---------- AST ------------
CreateTable(
    CreateTableStmt {
        create_option: None,
        catalog: None,
        database: None,
        table: Identifier {
            span: Some(
                13..14,
            ),
            name: "c",
            quote: None,
        },
        source: Some(
            Columns(
                [
                    ColumnDefinition {
                        name: Identifier {
                            span: Some(
                                15..16,
                            ),
                            name: "a",
                            quote: None,
                        },
                        data_type: Nullable(
                            Timestamp,
                        ),
                        expr: None,
                        comment: None,
                    },
                    ColumnDefinition {
                        name: Identifier {
                            span: Some(
                                32..33,
                            ),
                            name: "b",
                            quote: None,
                        },
                        data_type: Timestamp,
                        expr: None,
                        comment: None,
                    },
                ],
            ),
        ),
        engine: None,
        uri_location: None,
        cluster_by: [],
        table_options: {},
        as_query: None,
        transient: false,
    },
)


---------- Input ----------
create view v as select number % 3 as a from numbers(1000);
---------- Output ---------
CREATE VIEW v AS SELECT (number % 3) AS a FROM numbers(1000)
---------- AST ------------
CreateView(
    CreateViewStmt {
        create_option: None,
        catalog: None,
        database: None,
        view: Identifier {
            span: Some(
                12..13,
            ),
            name: "v",
            quote: None,
        },
        columns: [],
        query: Query {
            span: Some(
                17..58,
            ),
            with: None,
            body: Select(
                SelectStmt {
                    span: Some(
                        17..58,
                    ),
                    hints: None,
                    distinct: false,
                    select_list: [
                        AliasedExpr {
                            expr: BinaryOp {
                                span: Some(
                                    31..32,
                                ),
                                op: Modulo,
                                left: ColumnRef {
                                    span: Some(
                                        24..30,
                                    ),
                                    column: ColumnRef {
                                        database: None,
                                        table: None,
                                        column: Name(
                                            Identifier {
                                                span: Some(
                                                    24..30,
                                                ),
                                                name: "number",
                                                quote: None,
                                            },
                                        ),
                                    },
                                },
                                right: Literal {
                                    span: Some(
                                        33..34,
                                    ),
                                    lit: UInt64(
                                        3,
                                    ),
                                },
                            },
                            alias: Some(
                                Identifier {
                                    span: Some(
                                        38..39,
                                    ),
                                    name: "a",
                                    quote: None,
                                },
                            ),
                        },
                    ],
                    from: [
                        TableFunction {
                            span: Some(
                                45..58,
                            ),
                            lateral: false,
                            name: Identifier {
                                span: Some(
                                    45..52,
                                ),
                                name: "numbers",
                                quote: None,
                            },
                            params: [
                                Literal {
                                    span: Some(
                                        53..57,
                                    ),
                                    lit: UInt64(
                                        1000,
                                    ),
                                },
                            ],
                            named_params: [],
                            alias: None,
                        },
                    ],
                    selection: None,
                    group_by: None,
                    having: None,
                    window_list: None,
                    qualify: None,
                },
            ),
            order_by: [],
            limit: [],
            offset: None,
            ignore_result: false,
        },
    },
)


---------- Input ----------
alter view v as select number % 3 as a from numbers(1000);
---------- Output ---------
ALTER VIEW v AS SELECT (number % 3) AS a FROM numbers(1000)
---------- AST ------------
AlterView(
    AlterViewStmt {
        catalog: None,
        database: None,
        view: Identifier {
            span: Some(
                11..12,
            ),
            name: "v",
            quote: None,
        },
        columns: [],
        query: Query {
            span: Some(
                16..57,
            ),
            with: None,
            body: Select(
                SelectStmt {
                    span: Some(
                        16..57,
                    ),
                    hints: None,
                    distinct: false,
                    select_list: [
                        AliasedExpr {
                            expr: BinaryOp {
                                span: Some(
                                    30..31,
                                ),
                                op: Modulo,
                                left: ColumnRef {
                                    span: Some(
                                        23..29,
                                    ),
                                    column: ColumnRef {
                                        database: None,
                                        table: None,
                                        column: Name(
                                            Identifier {
                                                span: Some(
                                                    23..29,
                                                ),
                                                name: "number",
                                                quote: None,
                                            },
                                        ),
                                    },
                                },
                                right: Literal {
                                    span: Some(
                                        32..33,
                                    ),
                                    lit: UInt64(
                                        3,
                                    ),
                                },
                            },
                            alias: Some(
                                Identifier {
                                    span: Some(
                                        37..38,
                                    ),
                                    name: "a",
                                    quote: None,
                                },
                            ),
                        },
                    ],
                    from: [
                        TableFunction {
                            span: Some(
                                44..57,
                            ),
                            lateral: false,
                            name: Identifier {
                                span: Some(
                                    44..51,
                                ),
                                name: "numbers",
                                quote: None,
                            },
                            params: [
                                Literal {
                                    span: Some(
                                        52..56,
                                    ),
                                    lit: UInt64(
                                        1000,
                                    ),
                                },
                            ],
                            named_params: [],
                            alias: None,
                        },
                    ],
                    selection: None,
                    group_by: None,
                    having: None,
                    window_list: None,
                    qualify: None,
                },
            ),
            order_by: [],
            limit: [],
            offset: None,
            ignore_result: false,
        },
    },
)


---------- Input ----------
drop view v;
---------- Output ---------
DROP VIEW v
---------- AST ------------
DropView(
    DropViewStmt {
        if_exists: false,
        catalog: None,
        database: None,
        view: Identifier {
            span: Some(
                10..11,
            ),
            name: "v",
            quote: None,
        },
    },
)


---------- Input ----------
create view v1(c1) as select number % 3 as a from numbers(1000);
---------- Output ---------
CREATE VIEW v1 (c1) AS SELECT (number % 3) AS a FROM numbers(1000)
---------- AST ------------
CreateView(
    CreateViewStmt {
        create_option: None,
        catalog: None,
        database: None,
        view: Identifier {
            span: Some(
                12..14,
            ),
            name: "v1",
            quote: None,
        },
        columns: [
            Identifier {
                span: Some(
                    15..17,
                ),
                name: "c1",
                quote: None,
            },
        ],
        query: Query {
            span: Some(
                22..63,
            ),
            with: None,
            body: Select(
                SelectStmt {
                    span: Some(
                        22..63,
                    ),
                    hints: None,
                    distinct: false,
                    select_list: [
                        AliasedExpr {
                            expr: BinaryOp {
                                span: Some(
                                    36..37,
                                ),
                                op: Modulo,
                                left: ColumnRef {
                                    span: Some(
                                        29..35,
                                    ),
                                    column: ColumnRef {
                                        database: None,
                                        table: None,
                                        column: Name(
                                            Identifier {
                                                span: Some(
                                                    29..35,
                                                ),
                                                name: "number",
                                                quote: None,
                                            },
                                        ),
                                    },
                                },
                                right: Literal {
                                    span: Some(
                                        38..39,
                                    ),
                                    lit: UInt64(
                                        3,
                                    ),
                                },
                            },
                            alias: Some(
                                Identifier {
                                    span: Some(
                                        43..44,
                                    ),
                                    name: "a",
                                    quote: None,
                                },
                            ),
                        },
                    ],
                    from: [
                        TableFunction {
                            span: Some(
                                50..63,
                            ),
                            lateral: false,
                            name: Identifier {
                                span: Some(
                                    50..57,
                                ),
                                name: "numbers",
                                quote: None,
                            },
                            params: [
                                Literal {
                                    span: Some(
                                        58..62,
                                    ),
                                    lit: UInt64(
                                        1000,
                                    ),
                                },
                            ],
                            named_params: [],
                            alias: None,
                        },
                    ],
                    selection: None,
                    group_by: None,
                    having: None,
                    window_list: None,
                    qualify: None,
                },
            ),
            order_by: [],
            limit: [],
            offset: None,
            ignore_result: false,
        },
    },
)


---------- Input ----------
create or replace view v1(c1) as select number % 3 as a from numbers(1000);
---------- Output ---------
CREATE OR REPLACE VIEW v1 (c1) AS SELECT (number % 3) AS a FROM numbers(1000)
---------- AST ------------
CreateView(
    CreateViewStmt {
        create_option: CreateOrReplace,
        catalog: None,
        database: None,
        view: Identifier {
            span: Some(
                23..25,
            ),
            name: "v1",
            quote: None,
        },
        columns: [
            Identifier {
                span: Some(
                    26..28,
                ),
                name: "c1",
                quote: None,
            },
        ],
        query: Query {
            span: Some(
                33..74,
            ),
            with: None,
            body: Select(
                SelectStmt {
                    span: Some(
                        33..74,
                    ),
                    hints: None,
                    distinct: false,
                    select_list: [
                        AliasedExpr {
                            expr: BinaryOp {
                                span: Some(
                                    47..48,
                                ),
                                op: Modulo,
                                left: ColumnRef {
                                    span: Some(
                                        40..46,
                                    ),
                                    column: ColumnRef {
                                        database: None,
                                        table: None,
                                        column: Name(
                                            Identifier {
                                                span: Some(
                                                    40..46,
                                                ),
                                                name: "number",
                                                quote: None,
                                            },
                                        ),
                                    },
                                },
                                right: Literal {
                                    span: Some(
                                        49..50,
                                    ),
                                    lit: UInt64(
                                        3,
                                    ),
                                },
                            },
                            alias: Some(
                                Identifier {
                                    span: Some(
                                        54..55,
                                    ),
                                    name: "a",
                                    quote: None,
                                },
                            ),
                        },
                    ],
                    from: [
                        TableFunction {
                            span: Some(
                                61..74,
                            ),
                            lateral: false,
                            name: Identifier {
                                span: Some(
                                    61..68,
                                ),
                                name: "numbers",
                                quote: None,
                            },
                            params: [
                                Literal {
                                    span: Some(
                                        69..73,
                                    ),
                                    lit: UInt64(
                                        1000,
                                    ),
                                },
                            ],
                            named_params: [],
                            alias: None,
                        },
                    ],
                    selection: None,
                    group_by: None,
                    having: None,
                    window_list: None,
                    qualify: None,
                },
            ),
            order_by: [],
            limit: [],
            offset: None,
            ignore_result: false,
        },
    },
)


---------- Input ----------
alter view v1(c2) as select number % 3 as a from numbers(1000);
---------- Output ---------
ALTER VIEW v1 (c2) AS SELECT (number % 3) AS a FROM numbers(1000)
---------- AST ------------
AlterView(
    AlterViewStmt {
        catalog: None,
        database: None,
        view: Identifier {
            span: Some(
                11..13,
            ),
            name: "v1",
            quote: None,
        },
        columns: [
            Identifier {
                span: Some(
                    14..16,
                ),
                name: "c2",
                quote: None,
            },
        ],
        query: Query {
            span: Some(
                21..62,
            ),
            with: None,
            body: Select(
                SelectStmt {
                    span: Some(
                        21..62,
                    ),
                    hints: None,
                    distinct: false,
                    select_list: [
                        AliasedExpr {
                            expr: BinaryOp {
                                span: Some(
                                    35..36,
                                ),
                                op: Modulo,
                                left: ColumnRef {
                                    span: Some(
                                        28..34,
                                    ),
                                    column: ColumnRef {
                                        database: None,
                                        table: None,
                                        column: Name(
                                            Identifier {
                                                span: Some(
                                                    28..34,
                                                ),
                                                name: "number",
                                                quote: None,
                                            },
                                        ),
                                    },
                                },
                                right: Literal {
                                    span: Some(
                                        37..38,
                                    ),
                                    lit: UInt64(
                                        3,
                                    ),
                                },
                            },
                            alias: Some(
                                Identifier {
                                    span: Some(
                                        42..43,
                                    ),
                                    name: "a",
                                    quote: None,
                                },
                            ),
                        },
                    ],
                    from: [
                        TableFunction {
                            span: Some(
                                49..62,
                            ),
                            lateral: false,
                            name: Identifier {
                                span: Some(
                                    49..56,
                                ),
                                name: "numbers",
                                quote: None,
                            },
                            params: [
                                Literal {
                                    span: Some(
                                        57..61,
                                    ),
                                    lit: UInt64(
                                        1000,
                                    ),
                                },
                            ],
                            named_params: [],
                            alias: None,
                        },
                    ],
                    selection: None,
                    group_by: None,
                    having: None,
                    window_list: None,
                    qualify: None,
                },
            ),
            order_by: [],
            limit: [],
            offset: None,
            ignore_result: false,
        },
    },
)


---------- Input ----------
create stream test2.s1 on table test.t append_only = false;
---------- Output ---------
CREATE STREAM test2.s1 ON TABLE test.t APPEND_ONLY = false
---------- AST ------------
CreateStream(
    CreateStreamStmt {
        create_option: None,
        catalog: None,
        database: Some(
            Identifier {
                span: Some(
                    14..19,
                ),
                name: "test2",
                quote: None,
            },
        ),
        stream: Identifier {
            span: Some(
                20..22,
            ),
            name: "s1",
            quote: None,
        },
        table_database: Some(
            Identifier {
                span: Some(
                    32..36,
                ),
                name: "test",
                quote: None,
            },
        ),
        table: Identifier {
            span: Some(
                37..38,
            ),
            name: "t",
            quote: None,
        },
        stream_point: None,
        append_only: false,
        comment: None,
    },
)


---------- Input ----------
create stream if not exists test2.s2 on table test.t at (stream => test1.s1) comment = 'this is a stream';
---------- Output ---------
CREATE STREAM IF NOT EXISTS test2.s2 ON TABLE test.t AT (STREAM => test1.s1) COMMENT = 'this is a stream'
---------- AST ------------
CreateStream(
    CreateStreamStmt {
        create_option: CreateIfNotExists,
        catalog: None,
        database: Some(
            Identifier {
                span: Some(
                    28..33,
                ),
                name: "test2",
                quote: None,
            },
        ),
        stream: Identifier {
            span: Some(
                34..36,
            ),
            name: "s2",
            quote: None,
        },
        table_database: Some(
            Identifier {
                span: Some(
                    46..50,
                ),
                name: "test",
                quote: None,
            },
        ),
        table: Identifier {
            span: Some(
                51..52,
            ),
            name: "t",
            quote: None,
        },
        stream_point: Some(
            AtStream {
                database: Some(
                    Identifier {
                        span: Some(
                            67..72,
                        ),
                        name: "test1",
                        quote: None,
                    },
                ),
                name: Identifier {
                    span: Some(
                        73..75,
                    ),
                    name: "s1",
                    quote: None,
                },
            },
        ),
        append_only: true,
        comment: Some(
            "this is a stream",
        ),
    },
)


---------- Input ----------
create or replace stream test2.s1 on table test.t append_only = false;
---------- Output ---------
CREATE OR REPLACE STREAM test2.s1 ON TABLE test.t APPEND_ONLY = false
---------- AST ------------
CreateStream(
    CreateStreamStmt {
        create_option: CreateOrReplace,
        catalog: None,
        database: Some(
            Identifier {
                span: Some(
                    25..30,
                ),
                name: "test2",
                quote: None,
            },
        ),
        stream: Identifier {
            span: Some(
                31..33,
            ),
            name: "s1",
            quote: None,
        },
        table_database: Some(
            Identifier {
                span: Some(
                    43..47,
                ),
                name: "test",
                quote: None,
            },
        ),
        table: Identifier {
            span: Some(
                48..49,
            ),
            name: "t",
            quote: None,
        },
        stream_point: None,
        append_only: false,
        comment: None,
    },
)


---------- Input ----------
show full streams from default.test2 like 's%';
---------- Output ---------
SHOW FULL STREAMS FROM default.test2 LIKE 's%'
---------- AST ------------
ShowStreams(
    ShowStreamsStmt {
        catalog: Some(
            Identifier {
                span: Some(
                    23..30,
                ),
                name: "default",
                quote: None,
            },
        ),
        database: Some(
            Identifier {
                span: Some(
                    31..36,
                ),
                name: "test2",
                quote: None,
            },
        ),
        full: true,
        limit: Some(
            Like {
                pattern: "s%",
            },
        ),
    },
)


---------- Input ----------
describe stream test2.s2;
---------- Output ---------
DESCRIBE STREAM test2.s2
---------- AST ------------
DescribeStream(
    DescribeStreamStmt {
        catalog: None,
        database: Some(
            Identifier {
                span: Some(
                    16..21,
                ),
                name: "test2",
                quote: None,
            },
        ),
        stream: Identifier {
            span: Some(
                22..24,
            ),
            name: "s2",
            quote: None,
        },
    },
)


---------- Input ----------
drop stream if exists test2.s2;
---------- Output ---------
DROP STREAM IF EXISTS test2.s2
---------- AST ------------
DropStream(
    DropStreamStmt {
        if_exists: true,
        catalog: None,
        database: Some(
            Identifier {
                span: Some(
                    22..27,
                ),
                name: "test2",
                quote: None,
            },
        ),
        stream: Identifier {
            span: Some(
                28..30,
            ),
            name: "s2",
            quote: None,
        },
    },
)


---------- Input ----------
rename table d.t to e.s;
---------- Output ---------
RENAME TABLE d.t TO e.s
---------- AST ------------
RenameTable(
    RenameTableStmt {
        if_exists: false,
        catalog: None,
        database: Some(
            Identifier {
                span: Some(
                    13..14,
                ),
                name: "d",
                quote: None,
            },
        ),
        table: Identifier {
            span: Some(
                15..16,
            ),
            name: "t",
            quote: None,
        },
        new_catalog: None,
        new_database: Some(
            Identifier {
                span: Some(
                    20..21,
                ),
                name: "e",
                quote: None,
            },
        ),
        new_table: Identifier {
            span: Some(
                22..23,
            ),
            name: "s",
            quote: None,
        },
    },
)


---------- Input ----------
truncate table test;
---------- Output ---------
TRUNCATE TABLE test
---------- AST ------------
TruncateTable(
    TruncateTableStmt {
        catalog: None,
        database: None,
        table: Identifier {
            span: Some(
                15..19,
            ),
            name: "test",
            quote: None,
        },
    },
)


---------- Input ----------
truncate table test_db.test;
---------- Output ---------
TRUNCATE TABLE test_db.test
---------- AST ------------
TruncateTable(
    TruncateTableStmt {
        catalog: None,
        database: Some(
            Identifier {
                span: Some(
                    15..22,
                ),
                name: "test_db",
                quote: None,
            },
        ),
        table: Identifier {
            span: Some(
                23..27,
            ),
            name: "test",
            quote: None,
        },
    },
)


---------- Input ----------
DROP table table1;
---------- Output ---------
DROP TABLE table1
---------- AST ------------
DropTable(
    DropTableStmt {
        if_exists: false,
        catalog: None,
        database: None,
        table: Identifier {
            span: Some(
                11..17,
            ),
            name: "table1",
            quote: None,
        },
        all: false,
    },
)


---------- Input ----------
DROP table IF EXISTS table1;
---------- Output ---------
DROP TABLE IF EXISTS table1
---------- AST ------------
DropTable(
    DropTableStmt {
        if_exists: true,
        catalog: None,
        database: None,
        table: Identifier {
            span: Some(
                21..27,
            ),
            name: "table1",
            quote: None,
        },
        all: false,
    },
)


---------- Input ----------
CREATE TABLE t(c1 int null, c2 bigint null, c3 varchar null);
---------- Output ---------
CREATE TABLE t (c1 Int32 NULL, c2 Int64 NULL, c3 STRING NULL)
---------- AST ------------
CreateTable(
    CreateTableStmt {
        create_option: None,
        catalog: None,
        database: None,
        table: Identifier {
            span: Some(
                13..14,
            ),
            name: "t",
            quote: None,
        },
        source: Some(
            Columns(
                [
                    ColumnDefinition {
                        name: Identifier {
                            span: Some(
                                15..17,
                            ),
                            name: "c1",
                            quote: None,
                        },
                        data_type: Nullable(
                            Int32,
                        ),
                        expr: None,
                        comment: None,
                    },
                    ColumnDefinition {
                        name: Identifier {
                            span: Some(
                                28..30,
                            ),
                            name: "c2",
                            quote: None,
                        },
                        data_type: Nullable(
                            Int64,
                        ),
                        expr: None,
                        comment: None,
                    },
                    ColumnDefinition {
                        name: Identifier {
                            span: Some(
                                44..46,
                            ),
                            name: "c3",
                            quote: None,
                        },
                        data_type: Nullable(
                            String,
                        ),
                        expr: None,
                        comment: None,
                    },
                ],
            ),
        ),
        engine: None,
        uri_location: None,
        cluster_by: [],
        table_options: {},
        as_query: None,
        transient: false,
    },
)


---------- Input ----------
CREATE TABLE t(c1 int not null, c2 bigint not null, c3 varchar not null);
---------- Output ---------
CREATE TABLE t (c1 Int32 NOT NULL, c2 Int64 NOT NULL, c3 STRING NOT NULL)
---------- AST ------------
CreateTable(
    CreateTableStmt {
        create_option: None,
        catalog: None,
        database: None,
        table: Identifier {
            span: Some(
                13..14,
            ),
            name: "t",
            quote: None,
        },
        source: Some(
            Columns(
                [
                    ColumnDefinition {
                        name: Identifier {
                            span: Some(
                                15..17,
                            ),
                            name: "c1",
                            quote: None,
                        },
                        data_type: NotNull(
                            Int32,
                        ),
                        expr: None,
                        comment: None,
                    },
                    ColumnDefinition {
                        name: Identifier {
                            span: Some(
                                32..34,
                            ),
                            name: "c2",
                            quote: None,
                        },
                        data_type: NotNull(
                            Int64,
                        ),
                        expr: None,
                        comment: None,
                    },
                    ColumnDefinition {
                        name: Identifier {
                            span: Some(
                                52..54,
                            ),
                            name: "c3",
                            quote: None,
                        },
                        data_type: NotNull(
                            String,
                        ),
                        expr: None,
                        comment: None,
                    },
                ],
            ),
        ),
        engine: None,
        uri_location: None,
        cluster_by: [],
        table_options: {},
        as_query: None,
        transient: false,
    },
)


---------- Input ----------
CREATE TABLE t(c1 varbinary, c2 binary(10));
---------- Output ---------
CREATE TABLE t (c1 BINARY, c2 BINARY)
---------- AST ------------
CreateTable(
    CreateTableStmt {
        create_option: None,
        catalog: None,
        database: None,
        table: Identifier {
            span: Some(
                13..14,
            ),
            name: "t",
            quote: None,
        },
        source: Some(
            Columns(
                [
                    ColumnDefinition {
                        name: Identifier {
                            span: Some(
                                15..17,
                            ),
                            name: "c1",
                            quote: None,
                        },
                        data_type: Binary,
                        expr: None,
                        comment: None,
                    },
                    ColumnDefinition {
                        name: Identifier {
                            span: Some(
                                29..31,
                            ),
                            name: "c2",
                            quote: None,
                        },
                        data_type: Binary,
                        expr: None,
                        comment: None,
                    },
                ],
            ),
        ),
        engine: None,
        uri_location: None,
        cluster_by: [],
        table_options: {},
        as_query: None,
        transient: false,
    },
)


---------- Input ----------
CREATE TABLE t(c1 int default 1);
---------- Output ---------
CREATE TABLE t (c1 Int32 DEFAULT 1)
---------- AST ------------
CreateTable(
    CreateTableStmt {
        create_option: None,
        catalog: None,
        database: None,
        table: Identifier {
            span: Some(
                13..14,
            ),
            name: "t",
            quote: None,
        },
        source: Some(
            Columns(
                [
                    ColumnDefinition {
                        name: Identifier {
                            span: Some(
                                15..17,
                            ),
                            name: "c1",
                            quote: None,
                        },
                        data_type: Int32,
                        expr: Some(
                            Default(
                                Literal {
                                    span: Some(
                                        30..31,
                                    ),
                                    lit: UInt64(
                                        1,
                                    ),
                                },
                            ),
                        ),
                        comment: None,
                    },
                ],
            ),
        ),
        engine: None,
        uri_location: None,
        cluster_by: [],
        table_options: {},
        as_query: None,
        transient: false,
    },
)


---------- Input ----------
create table abc as (select * from xyz limit 10)
---------- Output ---------
CREATE TABLE abc AS SELECT * FROM xyz LIMIT 10
---------- AST ------------
CreateTable(
    CreateTableStmt {
        create_option: None,
        catalog: None,
        database: None,
        table: Identifier {
            span: Some(
                13..16,
            ),
            name: "abc",
            quote: None,
        },
        source: None,
        engine: None,
        uri_location: None,
        cluster_by: [],
        table_options: {},
        as_query: Some(
            Query {
                span: Some(
                    21..38,
                ),
                with: None,
                body: Select(
                    SelectStmt {
                        span: Some(
                            21..38,
                        ),
                        hints: None,
                        distinct: false,
                        select_list: [
                            StarColumns {
                                qualified: [
                                    Star(
                                        Some(
                                            28..29,
                                        ),
                                    ),
                                ],
                                column_filter: None,
                            },
                        ],
                        from: [
                            Table {
                                span: Some(
                                    35..38,
                                ),
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    span: Some(
                                        35..38,
                                    ),
                                    name: "xyz",
                                    quote: None,
                                },
                                alias: None,
                                travel_point: None,
                                since_point: None,
                                pivot: None,
                                unpivot: None,
                            },
                        ],
                        selection: None,
                        group_by: None,
                        having: None,
                        window_list: None,
                        qualify: None,
                    },
                ),
                order_by: [],
                limit: [
                    Literal {
                        span: Some(
                            45..47,
                        ),
                        lit: UInt64(
                            10,
                        ),
                    },
                ],
                offset: None,
                ignore_result: false,
            },
        ),
        transient: false,
    },
)


---------- Input ----------
ALTER USER u1 IDENTIFIED BY '123456';
---------- Output ---------
ALTER USER 'u1'@'%' IDENTIFIED BY '123456'
---------- AST ------------
AlterUser(
    AlterUserStmt {
        user: Some(
            UserIdentity {
                username: "u1",
                hostname: "%",
            },
        ),
        auth_option: Some(
            AuthOption {
                auth_type: None,
                password: Some(
                    "123456",
                ),
            },
        ),
        user_options: [],
    },
)


---------- Input ----------
ALTER USER u1 WITH DEFAULT_ROLE = role1;
---------- Output ---------
ALTER USER 'u1'@'%' WITH DEFAULT_ROLE = 'role1'
---------- AST ------------
AlterUser(
    AlterUserStmt {
        user: Some(
            UserIdentity {
                username: "u1",
                hostname: "%",
            },
        ),
        auth_option: None,
        user_options: [
            DefaultRole(
                "role1",
            ),
        ],
    },
)


---------- Input ----------
ALTER USER u1 WITH DEFAULT_ROLE = role1, TENANTSETTING;
---------- Output ---------
ALTER USER 'u1'@'%' WITH DEFAULT_ROLE = 'role1' TENANTSETTING
---------- AST ------------
AlterUser(
    AlterUserStmt {
        user: Some(
            UserIdentity {
                username: "u1",
                hostname: "%",
            },
        ),
        auth_option: None,
        user_options: [
            DefaultRole(
                "role1",
            ),
            TenantSetting(
                true,
            ),
        ],
    },
)


---------- Input ----------
ALTER USER u1 WITH SET NETWORK POLICY = 'policy1';
---------- Output ---------
ALTER USER 'u1'@'%' WITH SET NETWORK POLICY = 'policy1'
---------- AST ------------
AlterUser(
    AlterUserStmt {
        user: Some(
            UserIdentity {
                username: "u1",
                hostname: "%",
            },
        ),
        auth_option: None,
        user_options: [
            SetNetworkPolicy(
                "policy1",
            ),
        ],
    },
)


---------- Input ----------
ALTER USER u1 WITH UNSET NETWORK POLICY;
---------- Output ---------
ALTER USER 'u1'@'%' WITH UNSET NETWORK POLICY
---------- AST ------------
AlterUser(
    AlterUserStmt {
        user: Some(
            UserIdentity {
                username: "u1",
                hostname: "%",
            },
        ),
        auth_option: None,
        user_options: [
            UnsetNetworkPolicy,
        ],
    },
)


---------- Input ----------
CREATE USER u1 IDENTIFIED BY '123456' WITH DEFAULT_ROLE='role123', TENANTSETTING
---------- Output ---------
CREATE USER 'u1'@'%' IDENTIFIED BY '123456' WITH DEFAULT_ROLE = 'role123' TENANTSETTING
---------- AST ------------
CreateUser(
    CreateUserStmt {
        create_option: None,
        user: UserIdentity {
            username: "u1",
            hostname: "%",
        },
        auth_option: AuthOption {
            auth_type: None,
            password: Some(
                "123456",
            ),
        },
        user_options: [
            DefaultRole(
                "role123",
            ),
            TenantSetting(
                true,
            ),
        ],
    },
)


---------- Input ----------
CREATE USER u1 IDENTIFIED BY '123456' WITH SET NETWORK POLICY='policy1'
---------- Output ---------
CREATE USER 'u1'@'%' IDENTIFIED BY '123456' WITH SET NETWORK POLICY = 'policy1'
---------- AST ------------
CreateUser(
    CreateUserStmt {
        create_option: None,
        user: UserIdentity {
            username: "u1",
            hostname: "%",
        },
        auth_option: AuthOption {
            auth_type: None,
            password: Some(
                "123456",
            ),
        },
        user_options: [
            SetNetworkPolicy(
                "policy1",
            ),
        ],
    },
)


---------- Input ----------
DROP database if exists db1;
---------- Output ---------
DROP DATABASE IF EXISTS db1
---------- AST ------------
DropDatabase(
    DropDatabaseStmt {
        if_exists: true,
        catalog: None,
        database: Identifier {
            span: Some(
                24..27,
            ),
            name: "db1",
            quote: None,
        },
    },
)


---------- Input ----------
select distinct a, count(*) from t where a = 1 and b - 1 < a group by a having a = 1;
---------- Output ---------
SELECT DISTINCT a, COUNT(*) FROM t WHERE ((a = 1) AND ((b - 1) < a)) GROUP BY a HAVING (a = 1)
---------- AST ------------
Query(
    Query {
        span: Some(
            0..84,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..84,
                ),
                hints: None,
                distinct: true,
                select_list: [
                    AliasedExpr {
                        expr: ColumnRef {
                            span: Some(
                                16..17,
                            ),
                            column: ColumnRef {
                                database: None,
                                table: None,
                                column: Name(
                                    Identifier {
                                        span: Some(
                                            16..17,
                                        ),
                                        name: "a",
                                        quote: None,
                                    },
                                ),
                            },
                        },
                        alias: None,
                    },
                    AliasedExpr {
                        expr: CountAll {
                            span: Some(
                                19..27,
                            ),
                            window: None,
                        },
                        alias: None,
                    },
                ],
                from: [
                    Table {
                        span: Some(
                            33..34,
                        ),
                        catalog: None,
                        database: None,
                        table: Identifier {
                            span: Some(
                                33..34,
                            ),
                            name: "t",
                            quote: None,
                        },
                        alias: None,
                        travel_point: None,
                        since_point: None,
                        pivot: None,
                        unpivot: None,
                    },
                ],
                selection: Some(
                    BinaryOp {
                        span: Some(
                            47..50,
                        ),
                        op: And,
                        left: BinaryOp {
                            span: Some(
                                43..44,
                            ),
                            op: Eq,
                            left: ColumnRef {
                                span: Some(
                                    41..42,
                                ),
                                column: ColumnRef {
                                    database: None,
                                    table: None,
                                    column: Name(
                                        Identifier {
                                            span: Some(
                                                41..42,
                                            ),
                                            name: "a",
                                            quote: None,
                                        },
                                    ),
                                },
                            },
                            right: Literal {
                                span: Some(
                                    45..46,
                                ),
                                lit: UInt64(
                                    1,
                                ),
                            },
                        },
                        right: BinaryOp {
                            span: Some(
                                57..58,
                            ),
                            op: Lt,
                            left: BinaryOp {
                                span: Some(
                                    53..54,
                                ),
                                op: Minus,
                                left: ColumnRef {
                                    span: Some(
                                        51..52,
                                    ),
                                    column: ColumnRef {
                                        database: None,
                                        table: None,
                                        column: Name(
                                            Identifier {
                                                span: Some(
                                                    51..52,
                                                ),
                                                name: "b",
                                                quote: None,
                                            },
                                        ),
                                    },
                                },
                                right: Literal {
                                    span: Some(
                                        55..56,
                                    ),
                                    lit: UInt64(
                                        1,
                                    ),
                                },
                            },
                            right: ColumnRef {
                                span: Some(
                                    59..60,
                                ),
                                column: ColumnRef {
                                    database: None,
                                    table: None,
                                    column: Name(
                                        Identifier {
                                            span: Some(
                                                59..60,
                                            ),
                                            name: "a",
                                            quote: None,
                                        },
                                    ),
                                },
                            },
                        },
                    },
                ),
                group_by: Some(
                    Normal(
                        [
                            ColumnRef {
                                span: Some(
                                    70..71,
                                ),
                                column: ColumnRef {
                                    database: None,
                                    table: None,
                                    column: Name(
                                        Identifier {
                                            span: Some(
                                                70..71,
                                            ),
                                            name: "a",
                                            quote: None,
                                        },
                                    ),
                                },
                            },
                        ],
                    ),
                ),
                having: Some(
                    BinaryOp {
                        span: Some(
                            81..82,
                        ),
                        op: Eq,
                        left: ColumnRef {
                            span: Some(
                                79..80,
                            ),
                            column: ColumnRef {
                                database: None,
                                table: None,
                                column: Name(
                                    Identifier {
                                        span: Some(
                                            79..80,
                                        ),
                                        name: "a",
                                        quote: None,
                                    },
                                ),
                            },
                        },
                        right: Literal {
                            span: Some(
                                83..84,
                            ),
                            lit: UInt64(
                                1,
                            ),
                        },
                    },
                ),
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
select * from t4;
---------- Output ---------
SELECT * FROM t4
---------- AST ------------
Query(
    Query {
        span: Some(
            0..16,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..16,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    StarColumns {
                        qualified: [
                            Star(
                                Some(
                                    7..8,
                                ),
                            ),
                        ],
                        column_filter: None,
                    },
                ],
                from: [
                    Table {
                        span: Some(
                            14..16,
                        ),
                        catalog: None,
                        database: None,
                        table: Identifier {
                            span: Some(
                                14..16,
                            ),
                            name: "t4",
                            quote: None,
                        },
                        alias: None,
                        travel_point: None,
                        since_point: None,
                        pivot: None,
                        unpivot: None,
                    },
                ],
                selection: None,
                group_by: None,
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
select * from aa.bb;
---------- Output ---------
SELECT * FROM aa.bb
---------- AST ------------
Query(
    Query {
        span: Some(
            0..19,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..19,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    StarColumns {
                        qualified: [
                            Star(
                                Some(
                                    7..8,
                                ),
                            ),
                        ],
                        column_filter: None,
                    },
                ],
                from: [
                    Table {
                        span: Some(
                            14..19,
                        ),
                        catalog: None,
                        database: Some(
                            Identifier {
                                span: Some(
                                    14..16,
                                ),
                                name: "aa",
                                quote: None,
                            },
                        ),
                        table: Identifier {
                            span: Some(
                                17..19,
                            ),
                            name: "bb",
                            quote: None,
                        },
                        alias: None,
                        travel_point: None,
                        since_point: None,
                        pivot: None,
                        unpivot: None,
                    },
                ],
                selection: None,
                group_by: None,
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
select * from a, b, c;
---------- Output ---------
SELECT * FROM a, b, c
---------- AST ------------
Query(
    Query {
        span: Some(
            0..21,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..21,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    StarColumns {
                        qualified: [
                            Star(
                                Some(
                                    7..8,
                                ),
                            ),
                        ],
                        column_filter: None,
                    },
                ],
                from: [
                    Table {
                        span: Some(
                            14..15,
                        ),
                        catalog: None,
                        database: None,
                        table: Identifier {
                            span: Some(
                                14..15,
                            ),
                            name: "a",
                            quote: None,
                        },
                        alias: None,
                        travel_point: None,
                        since_point: None,
                        pivot: None,
                        unpivot: None,
                    },
                    Table {
                        span: Some(
                            17..18,
                        ),
                        catalog: None,
                        database: None,
                        table: Identifier {
                            span: Some(
                                17..18,
                            ),
                            name: "b",
                            quote: None,
                        },
                        alias: None,
                        travel_point: None,
                        since_point: None,
                        pivot: None,
                        unpivot: None,
                    },
                    Table {
                        span: Some(
                            20..21,
                        ),
                        catalog: None,
                        database: None,
                        table: Identifier {
                            span: Some(
                                20..21,
                            ),
                            name: "c",
                            quote: None,
                        },
                        alias: None,
                        travel_point: None,
                        since_point: None,
                        pivot: None,
                        unpivot: None,
                    },
                ],
                selection: None,
                group_by: None,
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
select * from a, b, c order by "db"."a"."c1";
---------- Output ---------
SELECT * FROM a, b, c ORDER BY "db"."a"."c1"
---------- AST ------------
Query(
    Query {
        span: Some(
            0..21,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..21,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    StarColumns {
                        qualified: [
                            Star(
                                Some(
                                    7..8,
                                ),
                            ),
                        ],
                        column_filter: None,
                    },
                ],
                from: [
                    Table {
                        span: Some(
                            14..15,
                        ),
                        catalog: None,
                        database: None,
                        table: Identifier {
                            span: Some(
                                14..15,
                            ),
                            name: "a",
                            quote: None,
                        },
                        alias: None,
                        travel_point: None,
                        since_point: None,
                        pivot: None,
                        unpivot: None,
                    },
                    Table {
                        span: Some(
                            17..18,
                        ),
                        catalog: None,
                        database: None,
                        table: Identifier {
                            span: Some(
                                17..18,
                            ),
                            name: "b",
                            quote: None,
                        },
                        alias: None,
                        travel_point: None,
                        since_point: None,
                        pivot: None,
                        unpivot: None,
                    },
                    Table {
                        span: Some(
                            20..21,
                        ),
                        catalog: None,
                        database: None,
                        table: Identifier {
                            span: Some(
                                20..21,
                            ),
                            name: "c",
                            quote: None,
                        },
                        alias: None,
                        travel_point: None,
                        since_point: None,
                        pivot: None,
                        unpivot: None,
                    },
                ],
                selection: None,
                group_by: None,
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [
            OrderByExpr {
                expr: ColumnRef {
                    span: Some(
                        31..35,
                    ),
                    column: ColumnRef {
                        database: Some(
                            Identifier {
                                span: Some(
                                    31..35,
                                ),
                                name: "db",
                                quote: Some(
                                    '"',
                                ),
                            },
                        ),
                        table: Some(
                            Identifier {
                                span: Some(
                                    36..39,
                                ),
                                name: "a",
                                quote: Some(
                                    '"',
                                ),
                            },
                        ),
                        column: Name(
                            Identifier {
                                span: Some(
                                    40..44,
                                ),
                                name: "c1",
                                quote: Some(
                                    '"',
                                ),
                            },
                        ),
                    },
                },
                asc: None,
                nulls_first: None,
            },
        ],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
select * from a join b on a.a = b.a;
---------- Output ---------
SELECT * FROM a INNER JOIN b ON (a.a = b.a)
---------- AST ------------
Query(
    Query {
        span: Some(
            0..35,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..35,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    StarColumns {
                        qualified: [
                            Star(
                                Some(
                                    7..8,
                                ),
                            ),
                        ],
                        column_filter: None,
                    },
                ],
                from: [
                    Join {
                        span: Some(
                            16..20,
                        ),
                        join: Join {
                            op: Inner,
                            condition: On(
                                BinaryOp {
                                    span: Some(
                                        30..31,
                                    ),
                                    op: Eq,
                                    left: ColumnRef {
                                        span: Some(
                                            26..27,
                                        ),
                                        column: ColumnRef {
                                            database: None,
                                            table: Some(
                                                Identifier {
                                                    span: Some(
                                                        26..27,
                                                    ),
                                                    name: "a",
                                                    quote: None,
                                                },
                                            ),
                                            column: Name(
                                                Identifier {
                                                    span: Some(
                                                        28..29,
                                                    ),
                                                    name: "a",
                                                    quote: None,
                                                },
                                            ),
                                        },
                                    },
                                    right: ColumnRef {
                                        span: Some(
                                            32..33,
                                        ),
                                        column: ColumnRef {
                                            database: None,
                                            table: Some(
                                                Identifier {
                                                    span: Some(
                                                        32..33,
                                                    ),
                                                    name: "b",
                                                    quote: None,
                                                },
                                            ),
                                            column: Name(
                                                Identifier {
                                                    span: Some(
                                                        34..35,
                                                    ),
                                                    name: "a",
                                                    quote: None,
                                                },
                                            ),
                                        },
                                    },
                                },
                            ),
                            left: Table {
                                span: Some(
                                    14..15,
                                ),
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    span: Some(
                                        14..15,
                                    ),
                                    name: "a",
                                    quote: None,
                                },
                                alias: None,
                                travel_point: None,
                                since_point: None,
                                pivot: None,
                                unpivot: None,
                            },
                            right: Table {
                                span: Some(
                                    21..22,
                                ),
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    span: Some(
                                        21..22,
                                    ),
                                    name: "b",
                                    quote: None,
                                },
                                alias: None,
                                travel_point: None,
                                since_point: None,
                                pivot: None,
                                unpivot: None,
                            },
                        },
                    },
                ],
                selection: None,
                group_by: None,
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
select * from a left outer join b on a.a = b.a;
---------- Output ---------
SELECT * FROM a LEFT OUTER JOIN b ON (a.a = b.a)
---------- AST ------------
Query(
    Query {
        span: Some(
            0..46,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..46,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    StarColumns {
                        qualified: [
                            Star(
                                Some(
                                    7..8,
                                ),
                            ),
                        ],
                        column_filter: None,
                    },
                ],
                from: [
                    Join {
                        span: Some(
                            16..31,
                        ),
                        join: Join {
                            op: LeftOuter,
                            condition: On(
                                BinaryOp {
                                    span: Some(
                                        41..42,
                                    ),
                                    op: Eq,
                                    left: ColumnRef {
                                        span: Some(
                                            37..38,
                                        ),
                                        column: ColumnRef {
                                            database: None,
                                            table: Some(
                                                Identifier {
                                                    span: Some(
                                                        37..38,
                                                    ),
                                                    name: "a",
                                                    quote: None,
                                                },
                                            ),
                                            column: Name(
                                                Identifier {
                                                    span: Some(
                                                        39..40,
                                                    ),
                                                    name: "a",
                                                    quote: None,
                                                },
                                            ),
                                        },
                                    },
                                    right: ColumnRef {
                                        span: Some(
                                            43..44,
                                        ),
                                        column: ColumnRef {
                                            database: None,
                                            table: Some(
                                                Identifier {
                                                    span: Some(
                                                        43..44,
                                                    ),
                                                    name: "b",
                                                    quote: None,
                                                },
                                            ),
                                            column: Name(
                                                Identifier {
                                                    span: Some(
                                                        45..46,
                                                    ),
                                                    name: "a",
                                                    quote: None,
                                                },
                                            ),
                                        },
                                    },
                                },
                            ),
                            left: Table {
                                span: Some(
                                    14..15,
                                ),
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    span: Some(
                                        14..15,
                                    ),
                                    name: "a",
                                    quote: None,
                                },
                                alias: None,
                                travel_point: None,
                                since_point: None,
                                pivot: None,
                                unpivot: None,
                            },
                            right: Table {
                                span: Some(
                                    32..33,
                                ),
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    span: Some(
                                        32..33,
                                    ),
                                    name: "b",
                                    quote: None,
                                },
                                alias: None,
                                travel_point: None,
                                since_point: None,
                                pivot: None,
                                unpivot: None,
                            },
                        },
                    },
                ],
                selection: None,
                group_by: None,
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
select * from a right outer join b on a.a = b.a;
---------- Output ---------
SELECT * FROM a RIGHT OUTER JOIN b ON (a.a = b.a)
---------- AST ------------
Query(
    Query {
        span: Some(
            0..47,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..47,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    StarColumns {
                        qualified: [
                            Star(
                                Some(
                                    7..8,
                                ),
                            ),
                        ],
                        column_filter: None,
                    },
                ],
                from: [
                    Join {
                        span: Some(
                            16..32,
                        ),
                        join: Join {
                            op: RightOuter,
                            condition: On(
                                BinaryOp {
                                    span: Some(
                                        42..43,
                                    ),
                                    op: Eq,
                                    left: ColumnRef {
                                        span: Some(
                                            38..39,
                                        ),
                                        column: ColumnRef {
                                            database: None,
                                            table: Some(
                                                Identifier {
                                                    span: Some(
                                                        38..39,
                                                    ),
                                                    name: "a",
                                                    quote: None,
                                                },
                                            ),
                                            column: Name(
                                                Identifier {
                                                    span: Some(
                                                        40..41,
                                                    ),
                                                    name: "a",
                                                    quote: None,
                                                },
                                            ),
                                        },
                                    },
                                    right: ColumnRef {
                                        span: Some(
                                            44..45,
                                        ),
                                        column: ColumnRef {
                                            database: None,
                                            table: Some(
                                                Identifier {
                                                    span: Some(
                                                        44..45,
                                                    ),
                                                    name: "b",
                                                    quote: None,
                                                },
                                            ),
                                            column: Name(
                                                Identifier {
                                                    span: Some(
                                                        46..47,
                                                    ),
                                                    name: "a",
                                                    quote: None,
                                                },
                                            ),
                                        },
                                    },
                                },
                            ),
                            left: Table {
                                span: Some(
                                    14..15,
                                ),
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    span: Some(
                                        14..15,
                                    ),
                                    name: "a",
                                    quote: None,
                                },
                                alias: None,
                                travel_point: None,
                                since_point: None,
                                pivot: None,
                                unpivot: None,
                            },
                            right: Table {
                                span: Some(
                                    33..34,
                                ),
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    span: Some(
                                        33..34,
                                    ),
                                    name: "b",
                                    quote: None,
                                },
                                alias: None,
                                travel_point: None,
                                since_point: None,
                                pivot: None,
                                unpivot: None,
                            },
                        },
                    },
                ],
                selection: None,
                group_by: None,
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
select * from a left semi join b on a.a = b.a;
---------- Output ---------
SELECT * FROM a LEFT SEMI JOIN b ON (a.a = b.a)
---------- AST ------------
Query(
    Query {
        span: Some(
            0..45,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..45,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    StarColumns {
                        qualified: [
                            Star(
                                Some(
                                    7..8,
                                ),
                            ),
                        ],
                        column_filter: None,
                    },
                ],
                from: [
                    Join {
                        span: Some(
                            16..30,
                        ),
                        join: Join {
                            op: LeftSemi,
                            condition: On(
                                BinaryOp {
                                    span: Some(
                                        40..41,
                                    ),
                                    op: Eq,
                                    left: ColumnRef {
                                        span: Some(
                                            36..37,
                                        ),
                                        column: ColumnRef {
                                            database: None,
                                            table: Some(
                                                Identifier {
                                                    span: Some(
                                                        36..37,
                                                    ),
                                                    name: "a",
                                                    quote: None,
                                                },
                                            ),
                                            column: Name(
                                                Identifier {
                                                    span: Some(
                                                        38..39,
                                                    ),
                                                    name: "a",
                                                    quote: None,
                                                },
                                            ),
                                        },
                                    },
                                    right: ColumnRef {
                                        span: Some(
                                            42..43,
                                        ),
                                        column: ColumnRef {
                                            database: None,
                                            table: Some(
                                                Identifier {
                                                    span: Some(
                                                        42..43,
                                                    ),
                                                    name: "b",
                                                    quote: None,
                                                },
                                            ),
                                            column: Name(
                                                Identifier {
                                                    span: Some(
                                                        44..45,
                                                    ),
                                                    name: "a",
                                                    quote: None,
                                                },
                                            ),
                                        },
                                    },
                                },
                            ),
                            left: Table {
                                span: Some(
                                    14..15,
                                ),
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    span: Some(
                                        14..15,
                                    ),
                                    name: "a",
                                    quote: None,
                                },
                                alias: None,
                                travel_point: None,
                                since_point: None,
                                pivot: None,
                                unpivot: None,
                            },
                            right: Table {
                                span: Some(
                                    31..32,
                                ),
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    span: Some(
                                        31..32,
                                    ),
                                    name: "b",
                                    quote: None,
                                },
                                alias: None,
                                travel_point: None,
                                since_point: None,
                                pivot: None,
                                unpivot: None,
                            },
                        },
                    },
                ],
                selection: None,
                group_by: None,
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
select * from a semi join b on a.a = b.a;
---------- Output ---------
SELECT * FROM a LEFT SEMI JOIN b ON (a.a = b.a)
---------- AST ------------
Query(
    Query {
        span: Some(
            0..40,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..40,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    StarColumns {
                        qualified: [
                            Star(
                                Some(
                                    7..8,
                                ),
                            ),
                        ],
                        column_filter: None,
                    },
                ],
                from: [
                    Join {
                        span: Some(
                            16..25,
                        ),
                        join: Join {
                            op: LeftSemi,
                            condition: On(
                                BinaryOp {
                                    span: Some(
                                        35..36,
                                    ),
                                    op: Eq,
                                    left: ColumnRef {
                                        span: Some(
                                            31..32,
                                        ),
                                        column: ColumnRef {
                                            database: None,
                                            table: Some(
                                                Identifier {
                                                    span: Some(
                                                        31..32,
                                                    ),
                                                    name: "a",
                                                    quote: None,
                                                },
                                            ),
                                            column: Name(
                                                Identifier {
                                                    span: Some(
                                                        33..34,
                                                    ),
                                                    name: "a",
                                                    quote: None,
                                                },
                                            ),
                                        },
                                    },
                                    right: ColumnRef {
                                        span: Some(
                                            37..38,
                                        ),
                                        column: ColumnRef {
                                            database: None,
                                            table: Some(
                                                Identifier {
                                                    span: Some(
                                                        37..38,
                                                    ),
                                                    name: "b",
                                                    quote: None,
                                                },
                                            ),
                                            column: Name(
                                                Identifier {
                                                    span: Some(
                                                        39..40,
                                                    ),
                                                    name: "a",
                                                    quote: None,
                                                },
                                            ),
                                        },
                                    },
                                },
                            ),
                            left: Table {
                                span: Some(
                                    14..15,
                                ),
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    span: Some(
                                        14..15,
                                    ),
                                    name: "a",
                                    quote: None,
                                },
                                alias: None,
                                travel_point: None,
                                since_point: None,
                                pivot: None,
                                unpivot: None,
                            },
                            right: Table {
                                span: Some(
                                    26..27,
                                ),
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    span: Some(
                                        26..27,
                                    ),
                                    name: "b",
                                    quote: None,
                                },
                                alias: None,
                                travel_point: None,
                                since_point: None,
                                pivot: None,
                                unpivot: None,
                            },
                        },
                    },
                ],
                selection: None,
                group_by: None,
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
select * from a left anti join b on a.a = b.a;
---------- Output ---------
SELECT * FROM a LEFT ANTI JOIN b ON (a.a = b.a)
---------- AST ------------
Query(
    Query {
        span: Some(
            0..45,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..45,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    StarColumns {
                        qualified: [
                            Star(
                                Some(
                                    7..8,
                                ),
                            ),
                        ],
                        column_filter: None,
                    },
                ],
                from: [
                    Join {
                        span: Some(
                            16..30,
                        ),
                        join: Join {
                            op: LeftAnti,
                            condition: On(
                                BinaryOp {
                                    span: Some(
                                        40..41,
                                    ),
                                    op: Eq,
                                    left: ColumnRef {
                                        span: Some(
                                            36..37,
                                        ),
                                        column: ColumnRef {
                                            database: None,
                                            table: Some(
                                                Identifier {
                                                    span: Some(
                                                        36..37,
                                                    ),
                                                    name: "a",
                                                    quote: None,
                                                },
                                            ),
                                            column: Name(
                                                Identifier {
                                                    span: Some(
                                                        38..39,
                                                    ),
                                                    name: "a",
                                                    quote: None,
                                                },
                                            ),
                                        },
                                    },
                                    right: ColumnRef {
                                        span: Some(
                                            42..43,
                                        ),
                                        column: ColumnRef {
                                            database: None,
                                            table: Some(
                                                Identifier {
                                                    span: Some(
                                                        42..43,
                                                    ),
                                                    name: "b",
                                                    quote: None,
                                                },
                                            ),
                                            column: Name(
                                                Identifier {
                                                    span: Some(
                                                        44..45,
                                                    ),
                                                    name: "a",
                                                    quote: None,
                                                },
                                            ),
                                        },
                                    },
                                },
                            ),
                            left: Table {
                                span: Some(
                                    14..15,
                                ),
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    span: Some(
                                        14..15,
                                    ),
                                    name: "a",
                                    quote: None,
                                },
                                alias: None,
                                travel_point: None,
                                since_point: None,
                                pivot: None,
                                unpivot: None,
                            },
                            right: Table {
                                span: Some(
                                    31..32,
                                ),
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    span: Some(
                                        31..32,
                                    ),
                                    name: "b",
                                    quote: None,
                                },
                                alias: None,
                                travel_point: None,
                                since_point: None,
                                pivot: None,
                                unpivot: None,
                            },
                        },
                    },
                ],
                selection: None,
                group_by: None,
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
select * from a anti join b on a.a = b.a;
---------- Output ---------
SELECT * FROM a LEFT ANTI JOIN b ON (a.a = b.a)
---------- AST ------------
Query(
    Query {
        span: Some(
            0..40,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..40,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    StarColumns {
                        qualified: [
                            Star(
                                Some(
                                    7..8,
                                ),
                            ),
                        ],
                        column_filter: None,
                    },
                ],
                from: [
                    Join {
                        span: Some(
                            16..25,
                        ),
                        join: Join {
                            op: LeftAnti,
                            condition: On(
                                BinaryOp {
                                    span: Some(
                                        35..36,
                                    ),
                                    op: Eq,
                                    left: ColumnRef {
                                        span: Some(
                                            31..32,
                                        ),
                                        column: ColumnRef {
                                            database: None,
                                            table: Some(
                                                Identifier {
                                                    span: Some(
                                                        31..32,
                                                    ),
                                                    name: "a",
                                                    quote: None,
                                                },
                                            ),
                                            column: Name(
                                                Identifier {
                                                    span: Some(
                                                        33..34,
                                                    ),
                                                    name: "a",
                                                    quote: None,
                                                },
                                            ),
                                        },
                                    },
                                    right: ColumnRef {
                                        span: Some(
                                            37..38,
                                        ),
                                        column: ColumnRef {
                                            database: None,
                                            table: Some(
                                                Identifier {
                                                    span: Some(
                                                        37..38,
                                                    ),
                                                    name: "b",
                                                    quote: None,
                                                },
                                            ),
                                            column: Name(
                                                Identifier {
                                                    span: Some(
                                                        39..40,
                                                    ),
                                                    name: "a",
                                                    quote: None,
                                                },
                                            ),
                                        },
                                    },
                                },
                            ),
                            left: Table {
                                span: Some(
                                    14..15,
                                ),
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    span: Some(
                                        14..15,
                                    ),
                                    name: "a",
                                    quote: None,
                                },
                                alias: None,
                                travel_point: None,
                                since_point: None,
                                pivot: None,
                                unpivot: None,
                            },
                            right: Table {
                                span: Some(
                                    26..27,
                                ),
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    span: Some(
                                        26..27,
                                    ),
                                    name: "b",
                                    quote: None,
                                },
                                alias: None,
                                travel_point: None,
                                since_point: None,
                                pivot: None,
                                unpivot: None,
                            },
                        },
                    },
                ],
                selection: None,
                group_by: None,
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
select * from a right semi join b on a.a = b.a;
---------- Output ---------
SELECT * FROM a RIGHT SEMI JOIN b ON (a.a = b.a)
---------- AST ------------
Query(
    Query {
        span: Some(
            0..46,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..46,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    StarColumns {
                        qualified: [
                            Star(
                                Some(
                                    7..8,
                                ),
                            ),
                        ],
                        column_filter: None,
                    },
                ],
                from: [
                    Join {
                        span: Some(
                            16..31,
                        ),
                        join: Join {
                            op: RightSemi,
                            condition: On(
                                BinaryOp {
                                    span: Some(
                                        41..42,
                                    ),
                                    op: Eq,
                                    left: ColumnRef {
                                        span: Some(
                                            37..38,
                                        ),
                                        column: ColumnRef {
                                            database: None,
                                            table: Some(
                                                Identifier {
                                                    span: Some(
                                                        37..38,
                                                    ),
                                                    name: "a",
                                                    quote: None,
                                                },
                                            ),
                                            column: Name(
                                                Identifier {
                                                    span: Some(
                                                        39..40,
                                                    ),
                                                    name: "a",
                                                    quote: None,
                                                },
                                            ),
                                        },
                                    },
                                    right: ColumnRef {
                                        span: Some(
                                            43..44,
                                        ),
                                        column: ColumnRef {
                                            database: None,
                                            table: Some(
                                                Identifier {
                                                    span: Some(
                                                        43..44,
                                                    ),
                                                    name: "b",
                                                    quote: None,
                                                },
                                            ),
                                            column: Name(
                                                Identifier {
                                                    span: Some(
                                                        45..46,
                                                    ),
                                                    name: "a",
                                                    quote: None,
                                                },
                                            ),
                                        },
                                    },
                                },
                            ),
                            left: Table {
                                span: Some(
                                    14..15,
                                ),
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    span: Some(
                                        14..15,
                                    ),
                                    name: "a",
                                    quote: None,
                                },
                                alias: None,
                                travel_point: None,
                                since_point: None,
                                pivot: None,
                                unpivot: None,
                            },
                            right: Table {
                                span: Some(
                                    32..33,
                                ),
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    span: Some(
                                        32..33,
                                    ),
                                    name: "b",
                                    quote: None,
                                },
                                alias: None,
                                travel_point: None,
                                since_point: None,
                                pivot: None,
                                unpivot: None,
                            },
                        },
                    },
                ],
                selection: None,
                group_by: None,
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
select * from a right anti join b on a.a = b.a;
---------- Output ---------
SELECT * FROM a RIGHT ANTI JOIN b ON (a.a = b.a)
---------- AST ------------
Query(
    Query {
        span: Some(
            0..46,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..46,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    StarColumns {
                        qualified: [
                            Star(
                                Some(
                                    7..8,
                                ),
                            ),
                        ],
                        column_filter: None,
                    },
                ],
                from: [
                    Join {
                        span: Some(
                            16..31,
                        ),
                        join: Join {
                            op: RightAnti,
                            condition: On(
                                BinaryOp {
                                    span: Some(
                                        41..42,
                                    ),
                                    op: Eq,
                                    left: ColumnRef {
                                        span: Some(
                                            37..38,
                                        ),
                                        column: ColumnRef {
                                            database: None,
                                            table: Some(
                                                Identifier {
                                                    span: Some(
                                                        37..38,
                                                    ),
                                                    name: "a",
                                                    quote: None,
                                                },
                                            ),
                                            column: Name(
                                                Identifier {
                                                    span: Some(
                                                        39..40,
                                                    ),
                                                    name: "a",
                                                    quote: None,
                                                },
                                            ),
                                        },
                                    },
                                    right: ColumnRef {
                                        span: Some(
                                            43..44,
                                        ),
                                        column: ColumnRef {
                                            database: None,
                                            table: Some(
                                                Identifier {
                                                    span: Some(
                                                        43..44,
                                                    ),
                                                    name: "b",
                                                    quote: None,
                                                },
                                            ),
                                            column: Name(
                                                Identifier {
                                                    span: Some(
                                                        45..46,
                                                    ),
                                                    name: "a",
                                                    quote: None,
                                                },
                                            ),
                                        },
                                    },
                                },
                            ),
                            left: Table {
                                span: Some(
                                    14..15,
                                ),
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    span: Some(
                                        14..15,
                                    ),
                                    name: "a",
                                    quote: None,
                                },
                                alias: None,
                                travel_point: None,
                                since_point: None,
                                pivot: None,
                                unpivot: None,
                            },
                            right: Table {
                                span: Some(
                                    32..33,
                                ),
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    span: Some(
                                        32..33,
                                    ),
                                    name: "b",
                                    quote: None,
                                },
                                alias: None,
                                travel_point: None,
                                since_point: None,
                                pivot: None,
                                unpivot: None,
                            },
                        },
                    },
                ],
                selection: None,
                group_by: None,
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
select * from a full outer join b on a.a = b.a;
---------- Output ---------
SELECT * FROM a FULL OUTER JOIN b ON (a.a = b.a)
---------- AST ------------
Query(
    Query {
        span: Some(
            0..46,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..46,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    StarColumns {
                        qualified: [
                            Star(
                                Some(
                                    7..8,
                                ),
                            ),
                        ],
                        column_filter: None,
                    },
                ],
                from: [
                    Join {
                        span: Some(
                            16..31,
                        ),
                        join: Join {
                            op: FullOuter,
                            condition: On(
                                BinaryOp {
                                    span: Some(
                                        41..42,
                                    ),
                                    op: Eq,
                                    left: ColumnRef {
                                        span: Some(
                                            37..38,
                                        ),
                                        column: ColumnRef {
                                            database: None,
                                            table: Some(
                                                Identifier {
                                                    span: Some(
                                                        37..38,
                                                    ),
                                                    name: "a",
                                                    quote: None,
                                                },
                                            ),
                                            column: Name(
                                                Identifier {
                                                    span: Some(
                                                        39..40,
                                                    ),
                                                    name: "a",
                                                    quote: None,
                                                },
                                            ),
                                        },
                                    },
                                    right: ColumnRef {
                                        span: Some(
                                            43..44,
                                        ),
                                        column: ColumnRef {
                                            database: None,
                                            table: Some(
                                                Identifier {
                                                    span: Some(
                                                        43..44,
                                                    ),
                                                    name: "b",
                                                    quote: None,
                                                },
                                            ),
                                            column: Name(
                                                Identifier {
                                                    span: Some(
                                                        45..46,
                                                    ),
                                                    name: "a",
                                                    quote: None,
                                                },
                                            ),
                                        },
                                    },
                                },
                            ),
                            left: Table {
                                span: Some(
                                    14..15,
                                ),
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    span: Some(
                                        14..15,
                                    ),
                                    name: "a",
                                    quote: None,
                                },
                                alias: None,
                                travel_point: None,
                                since_point: None,
                                pivot: None,
                                unpivot: None,
                            },
                            right: Table {
                                span: Some(
                                    32..33,
                                ),
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    span: Some(
                                        32..33,
                                    ),
                                    name: "b",
                                    quote: None,
                                },
                                alias: None,
                                travel_point: None,
                                since_point: None,
                                pivot: None,
                                unpivot: None,
                            },
                        },
                    },
                ],
                selection: None,
                group_by: None,
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
select * from a inner join b on a.a = b.a;
---------- Output ---------
SELECT * FROM a INNER JOIN b ON (a.a = b.a)
---------- AST ------------
Query(
    Query {
        span: Some(
            0..41,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..41,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    StarColumns {
                        qualified: [
                            Star(
                                Some(
                                    7..8,
                                ),
                            ),
                        ],
                        column_filter: None,
                    },
                ],
                from: [
                    Join {
                        span: Some(
                            16..26,
                        ),
                        join: Join {
                            op: Inner,
                            condition: On(
                                BinaryOp {
                                    span: Some(
                                        36..37,
                                    ),
                                    op: Eq,
                                    left: ColumnRef {
                                        span: Some(
                                            32..33,
                                        ),
                                        column: ColumnRef {
                                            database: None,
                                            table: Some(
                                                Identifier {
                                                    span: Some(
                                                        32..33,
                                                    ),
                                                    name: "a",
                                                    quote: None,
                                                },
                                            ),
                                            column: Name(
                                                Identifier {
                                                    span: Some(
                                                        34..35,
                                                    ),
                                                    name: "a",
                                                    quote: None,
                                                },
                                            ),
                                        },
                                    },
                                    right: ColumnRef {
                                        span: Some(
                                            38..39,
                                        ),
                                        column: ColumnRef {
                                            database: None,
                                            table: Some(
                                                Identifier {
                                                    span: Some(
                                                        38..39,
                                                    ),
                                                    name: "b",
                                                    quote: None,
                                                },
                                            ),
                                            column: Name(
                                                Identifier {
                                                    span: Some(
                                                        40..41,
                                                    ),
                                                    name: "a",
                                                    quote: None,
                                                },
                                            ),
                                        },
                                    },
                                },
                            ),
                            left: Table {
                                span: Some(
                                    14..15,
                                ),
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    span: Some(
                                        14..15,
                                    ),
                                    name: "a",
                                    quote: None,
                                },
                                alias: None,
                                travel_point: None,
                                since_point: None,
                                pivot: None,
                                unpivot: None,
                            },
                            right: Table {
                                span: Some(
                                    27..28,
                                ),
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    span: Some(
                                        27..28,
                                    ),
                                    name: "b",
                                    quote: None,
                                },
                                alias: None,
                                travel_point: None,
                                since_point: None,
                                pivot: None,
                                unpivot: None,
                            },
                        },
                    },
                ],
                selection: None,
                group_by: None,
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
select * from a left outer join b using(a);
---------- Output ---------
SELECT * FROM a LEFT OUTER JOIN b USING(a)
---------- AST ------------
Query(
    Query {
        span: Some(
            0..42,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..42,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    StarColumns {
                        qualified: [
                            Star(
                                Some(
                                    7..8,
                                ),
                            ),
                        ],
                        column_filter: None,
                    },
                ],
                from: [
                    Join {
                        span: Some(
                            16..31,
                        ),
                        join: Join {
                            op: LeftOuter,
                            condition: Using(
                                [
                                    Identifier {
                                        span: Some(
                                            40..41,
                                        ),
                                        name: "a",
                                        quote: None,
                                    },
                                ],
                            ),
                            left: Table {
                                span: Some(
                                    14..15,
                                ),
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    span: Some(
                                        14..15,
                                    ),
                                    name: "a",
                                    quote: None,
                                },
                                alias: None,
                                travel_point: None,
                                since_point: None,
                                pivot: None,
                                unpivot: None,
                            },
                            right: Table {
                                span: Some(
                                    32..33,
                                ),
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    span: Some(
                                        32..33,
                                    ),
                                    name: "b",
                                    quote: None,
                                },
                                alias: None,
                                travel_point: None,
                                since_point: None,
                                pivot: None,
                                unpivot: None,
                            },
                        },
                    },
                ],
                selection: None,
                group_by: None,
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
select * from a right outer join b using(a);
---------- Output ---------
SELECT * FROM a RIGHT OUTER JOIN b USING(a)
---------- AST ------------
Query(
    Query {
        span: Some(
            0..43,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..43,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    StarColumns {
                        qualified: [
                            Star(
                                Some(
                                    7..8,
                                ),
                            ),
                        ],
                        column_filter: None,
                    },
                ],
                from: [
                    Join {
                        span: Some(
                            16..32,
                        ),
                        join: Join {
                            op: RightOuter,
                            condition: Using(
                                [
                                    Identifier {
                                        span: Some(
                                            41..42,
                                        ),
                                        name: "a",
                                        quote: None,
                                    },
                                ],
                            ),
                            left: Table {
                                span: Some(
                                    14..15,
                                ),
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    span: Some(
                                        14..15,
                                    ),
                                    name: "a",
                                    quote: None,
                                },
                                alias: None,
                                travel_point: None,
                                since_point: None,
                                pivot: None,
                                unpivot: None,
                            },
                            right: Table {
                                span: Some(
                                    33..34,
                                ),
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    span: Some(
                                        33..34,
                                    ),
                                    name: "b",
                                    quote: None,
                                },
                                alias: None,
                                travel_point: None,
                                since_point: None,
                                pivot: None,
                                unpivot: None,
                            },
                        },
                    },
                ],
                selection: None,
                group_by: None,
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
select * from a full outer join b using(a);
---------- Output ---------
SELECT * FROM a FULL OUTER JOIN b USING(a)
---------- AST ------------
Query(
    Query {
        span: Some(
            0..42,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..42,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    StarColumns {
                        qualified: [
                            Star(
                                Some(
                                    7..8,
                                ),
                            ),
                        ],
                        column_filter: None,
                    },
                ],
                from: [
                    Join {
                        span: Some(
                            16..31,
                        ),
                        join: Join {
                            op: FullOuter,
                            condition: Using(
                                [
                                    Identifier {
                                        span: Some(
                                            40..41,
                                        ),
                                        name: "a",
                                        quote: None,
                                    },
                                ],
                            ),
                            left: Table {
                                span: Some(
                                    14..15,
                                ),
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    span: Some(
                                        14..15,
                                    ),
                                    name: "a",
                                    quote: None,
                                },
                                alias: None,
                                travel_point: None,
                                since_point: None,
                                pivot: None,
                                unpivot: None,
                            },
                            right: Table {
                                span: Some(
                                    32..33,
                                ),
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    span: Some(
                                        32..33,
                                    ),
                                    name: "b",
                                    quote: None,
                                },
                                alias: None,
                                travel_point: None,
                                since_point: None,
                                pivot: None,
                                unpivot: None,
                            },
                        },
                    },
                ],
                selection: None,
                group_by: None,
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
select * from a inner join b using(a);
---------- Output ---------
SELECT * FROM a INNER JOIN b USING(a)
---------- AST ------------
Query(
    Query {
        span: Some(
            0..37,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..37,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    StarColumns {
                        qualified: [
                            Star(
                                Some(
                                    7..8,
                                ),
                            ),
                        ],
                        column_filter: None,
                    },
                ],
                from: [
                    Join {
                        span: Some(
                            16..26,
                        ),
                        join: Join {
                            op: Inner,
                            condition: Using(
                                [
                                    Identifier {
                                        span: Some(
                                            35..36,
                                        ),
                                        name: "a",
                                        quote: None,
                                    },
                                ],
                            ),
                            left: Table {
                                span: Some(
                                    14..15,
                                ),
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    span: Some(
                                        14..15,
                                    ),
                                    name: "a",
                                    quote: None,
                                },
                                alias: None,
                                travel_point: None,
                                since_point: None,
                                pivot: None,
                                unpivot: None,
                            },
                            right: Table {
                                span: Some(
                                    27..28,
                                ),
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    span: Some(
                                        27..28,
                                    ),
                                    name: "b",
                                    quote: None,
                                },
                                alias: None,
                                travel_point: None,
                                since_point: None,
                                pivot: None,
                                unpivot: None,
                            },
                        },
                    },
                ],
                selection: None,
                group_by: None,
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
select * from a where a.a = any (select b.a from b);
---------- Output ---------
SELECT * FROM a WHERE (a.a = ANY (SELECT b.a FROM b))
---------- AST ------------
Query(
    Query {
        span: Some(
            0..51,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..51,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    StarColumns {
                        qualified: [
                            Star(
                                Some(
                                    7..8,
                                ),
                            ),
                        ],
                        column_filter: None,
                    },
                ],
                from: [
                    Table {
                        span: Some(
                            14..15,
                        ),
                        catalog: None,
                        database: None,
                        table: Identifier {
                            span: Some(
                                14..15,
                            ),
                            name: "a",
                            quote: None,
                        },
                        alias: None,
                        travel_point: None,
                        since_point: None,
                        pivot: None,
                        unpivot: None,
                    },
                ],
                selection: Some(
                    BinaryOp {
                        span: Some(
                            26..27,
                        ),
                        op: Eq,
                        left: ColumnRef {
                            span: Some(
                                22..23,
                            ),
                            column: ColumnRef {
                                database: None,
                                table: Some(
                                    Identifier {
                                        span: Some(
                                            22..23,
                                        ),
                                        name: "a",
                                        quote: None,
                                    },
                                ),
                                column: Name(
                                    Identifier {
                                        span: Some(
                                            24..25,
                                        ),
                                        name: "a",
                                        quote: None,
                                    },
                                ),
                            },
                        },
                        right: Subquery {
                            span: Some(
                                28..51,
                            ),
                            modifier: Some(
                                Any,
                            ),
                            subquery: Query {
                                span: Some(
                                    33..50,
                                ),
                                with: None,
                                body: Select(
                                    SelectStmt {
                                        span: Some(
                                            33..50,
                                        ),
                                        hints: None,
                                        distinct: false,
                                        select_list: [
                                            AliasedExpr {
                                                expr: ColumnRef {
                                                    span: Some(
                                                        40..41,
                                                    ),
                                                    column: ColumnRef {
                                                        database: None,
                                                        table: Some(
                                                            Identifier {
                                                                span: Some(
                                                                    40..41,
                                                                ),
                                                                name: "b",
                                                                quote: None,
                                                            },
                                                        ),
                                                        column: Name(
                                                            Identifier {
                                                                span: Some(
                                                                    42..43,
                                                                ),
                                                                name: "a",
                                                                quote: None,
                                                            },
                                                        ),
                                                    },
                                                },
                                                alias: None,
                                            },
                                        ],
                                        from: [
                                            Table {
                                                span: Some(
                                                    49..50,
                                                ),
                                                catalog: None,
                                                database: None,
                                                table: Identifier {
                                                    span: Some(
                                                        49..50,
                                                    ),
                                                    name: "b",
                                                    quote: None,
                                                },
                                                alias: None,
                                                travel_point: None,
                                                since_point: None,
                                                pivot: None,
                                                unpivot: None,
                                            },
                                        ],
                                        selection: None,
                                        group_by: None,
                                        having: None,
                                        window_list: None,
                                        qualify: None,
                                    },
                                ),
                                order_by: [],
                                limit: [],
                                offset: None,
                                ignore_result: false,
                            },
                        },
                    },
                ),
                group_by: None,
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
select * from a where a.a = all (select b.a from b);
---------- Output ---------
SELECT * FROM a WHERE (a.a = ALL (SELECT b.a FROM b))
---------- AST ------------
Query(
    Query {
        span: Some(
            0..51,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..51,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    StarColumns {
                        qualified: [
                            Star(
                                Some(
                                    7..8,
                                ),
                            ),
                        ],
                        column_filter: None,
                    },
                ],
                from: [
                    Table {
                        span: Some(
                            14..15,
                        ),
                        catalog: None,
                        database: None,
                        table: Identifier {
                            span: Some(
                                14..15,
                            ),
                            name: "a",
                            quote: None,
                        },
                        alias: None,
                        travel_point: None,
                        since_point: None,
                        pivot: None,
                        unpivot: None,
                    },
                ],
                selection: Some(
                    BinaryOp {
                        span: Some(
                            26..27,
                        ),
                        op: Eq,
                        left: ColumnRef {
                            span: Some(
                                22..23,
                            ),
                            column: ColumnRef {
                                database: None,
                                table: Some(
                                    Identifier {
                                        span: Some(
                                            22..23,
                                        ),
                                        name: "a",
                                        quote: None,
                                    },
                                ),
                                column: Name(
                                    Identifier {
                                        span: Some(
                                            24..25,
                                        ),
                                        name: "a",
                                        quote: None,
                                    },
                                ),
                            },
                        },
                        right: Subquery {
                            span: Some(
                                28..51,
                            ),
                            modifier: Some(
                                All,
                            ),
                            subquery: Query {
                                span: Some(
                                    33..50,
                                ),
                                with: None,
                                body: Select(
                                    SelectStmt {
                                        span: Some(
                                            33..50,
                                        ),
                                        hints: None,
                                        distinct: false,
                                        select_list: [
                                            AliasedExpr {
                                                expr: ColumnRef {
                                                    span: Some(
                                                        40..41,
                                                    ),
                                                    column: ColumnRef {
                                                        database: None,
                                                        table: Some(
                                                            Identifier {
                                                                span: Some(
                                                                    40..41,
                                                                ),
                                                                name: "b",
                                                                quote: None,
                                                            },
                                                        ),
                                                        column: Name(
                                                            Identifier {
                                                                span: Some(
                                                                    42..43,
                                                                ),
                                                                name: "a",
                                                                quote: None,
                                                            },
                                                        ),
                                                    },
                                                },
                                                alias: None,
                                            },
                                        ],
                                        from: [
                                            Table {
                                                span: Some(
                                                    49..50,
                                                ),
                                                catalog: None,
                                                database: None,
                                                table: Identifier {
                                                    span: Some(
                                                        49..50,
                                                    ),
                                                    name: "b",
                                                    quote: None,
                                                },
                                                alias: None,
                                                travel_point: None,
                                                since_point: None,
                                                pivot: None,
                                                unpivot: None,
                                            },
                                        ],
                                        selection: None,
                                        group_by: None,
                                        having: None,
                                        window_list: None,
                                        qualify: None,
                                    },
                                ),
                                order_by: [],
                                limit: [],
                                offset: None,
                                ignore_result: false,
                            },
                        },
                    },
                ),
                group_by: None,
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
select * from a where a.a = some (select b.a from b);
---------- Output ---------
SELECT * FROM a WHERE (a.a = SOME (SELECT b.a FROM b))
---------- AST ------------
Query(
    Query {
        span: Some(
            0..52,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..52,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    StarColumns {
                        qualified: [
                            Star(
                                Some(
                                    7..8,
                                ),
                            ),
                        ],
                        column_filter: None,
                    },
                ],
                from: [
                    Table {
                        span: Some(
                            14..15,
                        ),
                        catalog: None,
                        database: None,
                        table: Identifier {
                            span: Some(
                                14..15,
                            ),
                            name: "a",
                            quote: None,
                        },
                        alias: None,
                        travel_point: None,
                        since_point: None,
                        pivot: None,
                        unpivot: None,
                    },
                ],
                selection: Some(
                    BinaryOp {
                        span: Some(
                            26..27,
                        ),
                        op: Eq,
                        left: ColumnRef {
                            span: Some(
                                22..23,
                            ),
                            column: ColumnRef {
                                database: None,
                                table: Some(
                                    Identifier {
                                        span: Some(
                                            22..23,
                                        ),
                                        name: "a",
                                        quote: None,
                                    },
                                ),
                                column: Name(
                                    Identifier {
                                        span: Some(
                                            24..25,
                                        ),
                                        name: "a",
                                        quote: None,
                                    },
                                ),
                            },
                        },
                        right: Subquery {
                            span: Some(
                                28..52,
                            ),
                            modifier: Some(
                                Some,
                            ),
                            subquery: Query {
                                span: Some(
                                    34..51,
                                ),
                                with: None,
                                body: Select(
                                    SelectStmt {
                                        span: Some(
                                            34..51,
                                        ),
                                        hints: None,
                                        distinct: false,
                                        select_list: [
                                            AliasedExpr {
                                                expr: ColumnRef {
                                                    span: Some(
                                                        41..42,
                                                    ),
                                                    column: ColumnRef {
                                                        database: None,
                                                        table: Some(
                                                            Identifier {
                                                                span: Some(
                                                                    41..42,
                                                                ),
                                                                name: "b",
                                                                quote: None,
                                                            },
                                                        ),
                                                        column: Name(
                                                            Identifier {
                                                                span: Some(
                                                                    43..44,
                                                                ),
                                                                name: "a",
                                                                quote: None,
                                                            },
                                                        ),
                                                    },
                                                },
                                                alias: None,
                                            },
                                        ],
                                        from: [
                                            Table {
                                                span: Some(
                                                    50..51,
                                                ),
                                                catalog: None,
                                                database: None,
                                                table: Identifier {
                                                    span: Some(
                                                        50..51,
                                                    ),
                                                    name: "b",
                                                    quote: None,
                                                },
                                                alias: None,
                                                travel_point: None,
                                                since_point: None,
                                                pivot: None,
                                                unpivot: None,
                                            },
                                        ],
                                        selection: None,
                                        group_by: None,
                                        having: None,
                                        window_list: None,
                                        qualify: None,
                                    },
                                ),
                                order_by: [],
                                limit: [],
                                offset: None,
                                ignore_result: false,
                            },
                        },
                    },
                ),
                group_by: None,
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
select * from a where a.a > (select b.a from b);
---------- Output ---------
SELECT * FROM a WHERE (a.a > (SELECT b.a FROM b))
---------- AST ------------
Query(
    Query {
        span: Some(
            0..47,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..47,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    StarColumns {
                        qualified: [
                            Star(
                                Some(
                                    7..8,
                                ),
                            ),
                        ],
                        column_filter: None,
                    },
                ],
                from: [
                    Table {
                        span: Some(
                            14..15,
                        ),
                        catalog: None,
                        database: None,
                        table: Identifier {
                            span: Some(
                                14..15,
                            ),
                            name: "a",
                            quote: None,
                        },
                        alias: None,
                        travel_point: None,
                        since_point: None,
                        pivot: None,
                        unpivot: None,
                    },
                ],
                selection: Some(
                    BinaryOp {
                        span: Some(
                            26..27,
                        ),
                        op: Gt,
                        left: ColumnRef {
                            span: Some(
                                22..23,
                            ),
                            column: ColumnRef {
                                database: None,
                                table: Some(
                                    Identifier {
                                        span: Some(
                                            22..23,
                                        ),
                                        name: "a",
                                        quote: None,
                                    },
                                ),
                                column: Name(
                                    Identifier {
                                        span: Some(
                                            24..25,
                                        ),
                                        name: "a",
                                        quote: None,
                                    },
                                ),
                            },
                        },
                        right: Subquery {
                            span: Some(
                                28..47,
                            ),
                            modifier: None,
                            subquery: Query {
                                span: Some(
                                    29..46,
                                ),
                                with: None,
                                body: Select(
                                    SelectStmt {
                                        span: Some(
                                            29..46,
                                        ),
                                        hints: None,
                                        distinct: false,
                                        select_list: [
                                            AliasedExpr {
                                                expr: ColumnRef {
                                                    span: Some(
                                                        36..37,
                                                    ),
                                                    column: ColumnRef {
                                                        database: None,
                                                        table: Some(
                                                            Identifier {
                                                                span: Some(
                                                                    36..37,
                                                                ),
                                                                name: "b",
                                                                quote: None,
                                                            },
                                                        ),
                                                        column: Name(
                                                            Identifier {
                                                                span: Some(
                                                                    38..39,
                                                                ),
                                                                name: "a",
                                                                quote: None,
                                                            },
                                                        ),
                                                    },
                                                },
                                                alias: None,
                                            },
                                        ],
                                        from: [
                                            Table {
                                                span: Some(
                                                    45..46,
                                                ),
                                                catalog: None,
                                                database: None,
                                                table: Identifier {
                                                    span: Some(
                                                        45..46,
                                                    ),
                                                    name: "b",
                                                    quote: None,
                                                },
                                                alias: None,
                                                travel_point: None,
                                                since_point: None,
                                                pivot: None,
                                                unpivot: None,
                                            },
                                        ],
                                        selection: None,
                                        group_by: None,
                                        having: None,
                                        window_list: None,
                                        qualify: None,
                                    },
                                ),
                                order_by: [],
                                limit: [],
                                offset: None,
                                ignore_result: false,
                            },
                        },
                    },
                ),
                group_by: None,
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
select 1 from numbers(1) where ((1 = 1) or 1)
---------- Output ---------
SELECT 1 FROM numbers(1) WHERE ((1 = 1) OR 1)
---------- AST ------------
Query(
    Query {
        span: Some(
            0..45,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..45,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    AliasedExpr {
                        expr: Literal {
                            span: Some(
                                7..8,
                            ),
                            lit: UInt64(
                                1,
                            ),
                        },
                        alias: None,
                    },
                ],
                from: [
                    TableFunction {
                        span: Some(
                            14..24,
                        ),
                        lateral: false,
                        name: Identifier {
                            span: Some(
                                14..21,
                            ),
                            name: "numbers",
                            quote: None,
                        },
                        params: [
                            Literal {
                                span: Some(
                                    22..23,
                                ),
                                lit: UInt64(
                                    1,
                                ),
                            },
                        ],
                        named_params: [],
                        alias: None,
                    },
                ],
                selection: Some(
                    BinaryOp {
                        span: Some(
                            40..42,
                        ),
                        op: Or,
                        left: BinaryOp {
                            span: Some(
                                35..36,
                            ),
                            op: Eq,
                            left: Literal {
                                span: Some(
                                    33..34,
                                ),
                                lit: UInt64(
                                    1,
                                ),
                            },
                            right: Literal {
                                span: Some(
                                    37..38,
                                ),
                                lit: UInt64(
                                    1,
                                ),
                            },
                        },
                        right: Literal {
                            span: Some(
                                43..44,
                            ),
                            lit: UInt64(
                                1,
                            ),
                        },
                    },
                ),
                group_by: None,
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
select * from read_parquet('p1', 'p2', 'p3', prune_page => true, refresh_meta_cache => true);
---------- Output ---------
SELECT * FROM read_parquet('p1', 'p2', 'p3',prune_page=>TRUE,refresh_meta_cache=>TRUE)
---------- AST ------------
Query(
    Query {
        span: Some(
            0..92,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..92,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    StarColumns {
                        qualified: [
                            Star(
                                Some(
                                    7..8,
                                ),
                            ),
                        ],
                        column_filter: None,
                    },
                ],
                from: [
                    TableFunction {
                        span: Some(
                            14..92,
                        ),
                        lateral: false,
                        name: Identifier {
                            span: Some(
                                14..26,
                            ),
                            name: "read_parquet",
                            quote: None,
                        },
                        params: [
                            Literal {
                                span: Some(
                                    27..31,
                                ),
                                lit: String(
                                    "p1",
                                ),
                            },
                            Literal {
                                span: Some(
                                    33..37,
                                ),
                                lit: String(
                                    "p2",
                                ),
                            },
                            Literal {
                                span: Some(
                                    39..43,
                                ),
                                lit: String(
                                    "p3",
                                ),
                            },
                        ],
                        named_params: [
                            (
                                Identifier {
                                    span: Some(
                                        45..55,
                                    ),
                                    name: "prune_page",
                                    quote: None,
                                },
                                Literal {
                                    span: Some(
                                        59..63,
                                    ),
                                    lit: Boolean(
                                        true,
                                    ),
                                },
                            ),
                            (
                                Identifier {
                                    span: Some(
                                        65..83,
                                    ),
                                    name: "refresh_meta_cache",
                                    quote: None,
                                },
                                Literal {
                                    span: Some(
                                        87..91,
                                    ),
                                    lit: Boolean(
                                        true,
                                    ),
                                },
                            ),
                        ],
                        alias: None,
                    },
                ],
                selection: None,
                group_by: None,
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
select * from @foo (pattern=>'[.]*parquet' file_format=>'tsv');
---------- Output ---------
SELECT * FROM @foo ( FILE_FORMAT => 'tsv', PATTERN => '[.]*parquet', )
---------- AST ------------
Query(
    Query {
        span: Some(
            0..62,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..62,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    StarColumns {
                        qualified: [
                            Star(
                                Some(
                                    7..8,
                                ),
                            ),
                        ],
                        column_filter: None,
                    },
                ],
                from: [
                    Location {
                        span: Some(
                            14..62,
                        ),
                        location: Stage(
                            "foo",
                        ),
                        options: SelectStageOptions {
                            files: None,
                            pattern: Some(
                                "[.]*parquet",
                            ),
                            file_format: Some(
                                "tsv",
                            ),
                            connection: {},
                        },
                        alias: None,
                    },
                ],
                selection: None,
                group_by: None,
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
select 'stringwith''quote'''
---------- Output ---------
SELECT 'stringwith\'quote\''
---------- AST ------------
Query(
    Query {
        span: Some(
            0..28,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..28,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    AliasedExpr {
                        expr: Literal {
                            span: Some(
                                7..28,
                            ),
                            lit: String(
                                "stringwith'quote'",
                            ),
                        },
                        alias: None,
                    },
                ],
                from: [],
                selection: None,
                group_by: None,
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
select 'stringwith"doublequote'
---------- Output ---------
SELECT 'stringwith"doublequote'
---------- AST ------------
Query(
    Query {
        span: Some(
            0..31,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..31,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    AliasedExpr {
                        expr: Literal {
                            span: Some(
                                7..31,
                            ),
                            lit: String(
                                "stringwith\"doublequote",
                            ),
                        },
                        alias: None,
                    },
                ],
                from: [],
                selection: None,
                group_by: None,
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
select '🦈'
---------- Output ---------
SELECT '🦈'
---------- AST ------------
Query(
    Query {
        span: Some(
            0..13,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..13,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    AliasedExpr {
                        expr: Literal {
                            span: Some(
                                7..13,
                            ),
                            lit: String(
                                "🦈",
                            ),
                        },
                        alias: None,
                    },
                ],
                from: [],
                selection: None,
                group_by: None,
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
insert into t (c1, c2) values (1, 2), (3, 4);
---------- Output ---------
INSERT INTO t (c1, c2) VALUES (1, 2), (3, 4);
---------- AST ------------
Insert(
    InsertStmt {
        hints: None,
        catalog: None,
        database: None,
        table: Identifier {
            span: Some(
                12..13,
            ),
            name: "t",
            quote: None,
        },
        columns: [
            Identifier {
                span: Some(
                    15..17,
                ),
                name: "c1",
                quote: None,
            },
            Identifier {
                span: Some(
                    19..21,
                ),
                name: "c2",
                quote: None,
            },
        ],
        source: Values {
            rest_str: "(1, 2), (3, 4);",
            start: 30,
        },
        overwrite: false,
    },
)


---------- Input ----------
insert into t (c1, c2) values (1, 2);   
---------- Output ---------
INSERT INTO t (c1, c2) VALUES (1, 2);   
---------- AST ------------
Insert(
    InsertStmt {
        hints: None,
        catalog: None,
        database: None,
        table: Identifier {
            span: Some(
                12..13,
            ),
            name: "t",
            quote: None,
        },
        columns: [
            Identifier {
                span: Some(
                    15..17,
                ),
                name: "c1",
                quote: None,
            },
            Identifier {
                span: Some(
                    19..21,
                ),
                name: "c2",
                quote: None,
            },
        ],
        source: Values {
            rest_str: "(1, 2);   ",
            start: 30,
        },
        overwrite: false,
    },
)


---------- Input ----------
insert into table t format json;
---------- Output ---------
INSERT INTO t FORMAT json ;
---------- AST ------------
Insert(
    InsertStmt {
        hints: None,
        catalog: None,
        database: None,
        table: Identifier {
            span: Some(
                18..19,
            ),
            name: "t",
            quote: None,
        },
        columns: [],
        source: Streaming {
            format: "json",
            rest_str: ";",
            start: 31,
        },
        overwrite: false,
    },
)


---------- Input ----------
insert into table t select * from t2;
---------- Output ---------
INSERT INTO t SELECT * FROM t2
---------- AST ------------
Insert(
    InsertStmt {
        hints: None,
        catalog: None,
        database: None,
        table: Identifier {
            span: Some(
                18..19,
            ),
            name: "t",
            quote: None,
        },
        columns: [],
        source: Select {
            query: Query {
                span: Some(
                    20..36,
                ),
                with: None,
                body: Select(
                    SelectStmt {
                        span: Some(
                            20..36,
                        ),
                        hints: None,
                        distinct: false,
                        select_list: [
                            StarColumns {
                                qualified: [
                                    Star(
                                        Some(
                                            27..28,
                                        ),
                                    ),
                                ],
                                column_filter: None,
                            },
                        ],
                        from: [
                            Table {
                                span: Some(
                                    34..36,
                                ),
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    span: Some(
                                        34..36,
                                    ),
                                    name: "t2",
                                    quote: None,
                                },
                                alias: None,
                                travel_point: None,
                                since_point: None,
                                pivot: None,
                                unpivot: None,
                            },
                        ],
                        selection: None,
                        group_by: None,
                        having: None,
                        window_list: None,
                        qualify: None,
                    },
                ),
                order_by: [],
                limit: [],
                offset: None,
                ignore_result: false,
            },
        },
        overwrite: false,
    },
)


---------- Input ----------
select parse_json('{"k1": [0, 1, 2]}').k1[0];
---------- Output ---------
SELECT parse_json('{"k1": [0, 1, 2]}'):k1[0]
---------- AST ------------
Query(
    Query {
        span: Some(
            0..44,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..44,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    AliasedExpr {
                        expr: MapAccess {
                            span: Some(
                                41..44,
                            ),
                            expr: MapAccess {
                                span: Some(
                                    38..41,
                                ),
                                expr: FunctionCall {
                                    span: Some(
                                        7..38,
                                    ),
                                    func: FunctionCall {
                                        distinct: false,
                                        name: Identifier {
                                            span: Some(
                                                7..17,
                                            ),
                                            name: "parse_json",
                                            quote: None,
                                        },
                                        args: [
                                            Literal {
                                                span: Some(
                                                    18..37,
                                                ),
                                                lit: String(
                                                    "{\"k1\": [0, 1, 2]}",
                                                ),
                                            },
                                        ],
                                        params: [],
                                        window: None,
                                        lambda: None,
                                    },
                                },
                                accessor: Colon {
                                    key: Identifier {
                                        span: Some(
                                            39..41,
                                        ),
                                        name: "k1",
                                        quote: None,
                                    },
                                },
                            },
                            accessor: Bracket {
                                key: Literal {
                                    span: Some(
                                        42..43,
                                    ),
                                    lit: UInt64(
                                        0,
                                    ),
                                },
                            },
                        },
                        alias: None,
                    },
                ],
                from: [],
                selection: None,
                group_by: None,
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
CREATE STAGE ~
---------- Output ---------
CREATE STAGE ~
---------- AST ------------
CreateStage(
    CreateStageStmt {
        create_option: None,
        stage_name: "~",
        location: None,
        file_format_options: {},
        on_error: "",
        size_limit: 0,
        validation_mode: "",
        comments: "",
    },
)


---------- Input ----------
CREATE STAGE IF NOT EXISTS test_stage 's3://load/files/' credentials=(aws_key_id='1a2b3c', aws_secret_key='4x5y6z') file_format=(type = CSV, compression = GZIP record_delimiter=',')
---------- Output ---------
CREATE STAGE IF NOT EXISTS test_stage 's3://load/files/' CONNECTION = ( aws_key_id = '******b3c', aws_secret_key = '******y6z' ) FILE_FORMAT = (compression = 'GZIP', record_delimiter = ',', type = 'CSV' )
---------- AST ------------
CreateStage(
    CreateStageStmt {
        create_option: CreateIfNotExists,
        stage_name: "test_stage",
        location: Some(
            UriLocation {
                protocol: "s3",
                name: "load",
                path: "/files/",
                part_prefix: "",
                connection: Connection {
                    visited_keys: {},
                    conns: {
                        "aws_key_id": "1a2b3c",
                        "aws_secret_key": "4x5y6z",
                    },
                },
            },
        ),
        file_format_options: {
            "compression": "GZIP",
            "record_delimiter": ",",
            "type": "CSV",
        },
        on_error: "",
        size_limit: 0,
        validation_mode: "",
        comments: "",
    },
)


---------- Input ----------
CREATE STAGE IF NOT EXISTS test_stage url='s3://load/files/' credentials=(aws_key_id='1a2b3c', aws_secret_key='4x5y6z') file_format=(type = CSV, compression = GZIP record_delimiter=',')
---------- Output ---------
CREATE STAGE IF NOT EXISTS test_stage 's3://load/files/' CONNECTION = ( aws_key_id = '******b3c', aws_secret_key = '******y6z' ) FILE_FORMAT = (compression = 'GZIP', record_delimiter = ',', type = 'CSV' )
---------- AST ------------
CreateStage(
    CreateStageStmt {
        create_option: CreateIfNotExists,
        stage_name: "test_stage",
        location: Some(
            UriLocation {
                protocol: "s3",
                name: "load",
                path: "/files/",
                part_prefix: "",
                connection: Connection {
                    visited_keys: {},
                    conns: {
                        "aws_key_id": "1a2b3c",
                        "aws_secret_key": "4x5y6z",
                    },
                },
            },
        ),
        file_format_options: {
            "compression": "GZIP",
            "record_delimiter": ",",
            "type": "CSV",
        },
        on_error: "",
        size_limit: 0,
        validation_mode: "",
        comments: "",
    },
)


---------- Input ----------
CREATE STAGE IF NOT EXISTS test_stage url='azblob://load/files/' connection=(account_name='1a2b3c' account_key='4x5y6z') file_format=(type = CSV compression = GZIP record_delimiter=',')
---------- Output ---------
CREATE STAGE IF NOT EXISTS test_stage 'azblob://load/files/' CONNECTION = ( account_key = '******y6z', account_name = '******b3c' ) FILE_FORMAT = (compression = 'GZIP', record_delimiter = ',', type = 'CSV' )
---------- AST ------------
CreateStage(
    CreateStageStmt {
        create_option: CreateIfNotExists,
        stage_name: "test_stage",
        location: Some(
            UriLocation {
                protocol: "azblob",
                name: "load",
                path: "/files/",
                part_prefix: "",
                connection: Connection {
                    visited_keys: {},
                    conns: {
                        "account_key": "4x5y6z",
                        "account_name": "1a2b3c",
                    },
                },
            },
        ),
        file_format_options: {
            "compression": "GZIP",
            "record_delimiter": ",",
            "type": "CSV",
        },
        on_error: "",
        size_limit: 0,
        validation_mode: "",
        comments: "",
    },
)


---------- Input ----------
CREATE OR REPLACE STAGE test_stage url='azblob://load/files/' connection=(account_name='1a2b3c' account_key='4x5y6z') file_format=(type = CSV compression = GZIP record_delimiter=',')
---------- Output ---------
CREATE OR REPLACE STAGE test_stage 'azblob://load/files/' CONNECTION = ( account_key = '******y6z', account_name = '******b3c' ) FILE_FORMAT = (compression = 'GZIP', record_delimiter = ',', type = 'CSV' )
---------- AST ------------
CreateStage(
    CreateStageStmt {
        create_option: CreateOrReplace,
        stage_name: "test_stage",
        location: Some(
            UriLocation {
                protocol: "azblob",
                name: "load",
                path: "/files/",
                part_prefix: "",
                connection: Connection {
                    visited_keys: {},
                    conns: {
                        "account_key": "4x5y6z",
                        "account_name": "1a2b3c",
                    },
                },
            },
        ),
        file_format_options: {
            "compression": "GZIP",
            "record_delimiter": ",",
            "type": "CSV",
        },
        on_error: "",
        size_limit: 0,
        validation_mode: "",
        comments: "",
    },
)


---------- Input ----------
DROP STAGE abc
---------- Output ---------
DROP STAGES abc
---------- AST ------------
DropStage {
    if_exists: false,
    stage_name: "abc",
}


---------- Input ----------
DROP STAGE ~
---------- Output ---------
DROP STAGES ~
---------- AST ------------
DropStage {
    if_exists: false,
    stage_name: "~",
}


---------- Input ----------
list @stage_a;
---------- Output ---------
LIST @stage_a
---------- AST ------------
ListStage {
    location: "stage_a",
    pattern: None,
}


---------- Input ----------
list @~;
---------- Output ---------
LIST @~
---------- AST ------------
ListStage {
    location: "~",
    pattern: None,
}


---------- Input ----------
create user 'test-e' identified by 'password';
---------- Output ---------
CREATE USER 'test-e'@'%' IDENTIFIED BY 'password'
---------- AST ------------
CreateUser(
    CreateUserStmt {
        create_option: None,
        user: UserIdentity {
            username: "test-e",
            hostname: "%",
        },
        auth_option: AuthOption {
            auth_type: None,
            password: Some(
                "password",
            ),
        },
        user_options: [],
    },
)


---------- Input ----------
drop user if exists 'test-j';
---------- Output ---------
DROP USER IF EXISTS 'test-j'@'%'
---------- AST ------------
DropUser {
    if_exists: true,
    user: UserIdentity {
        username: "test-j",
        hostname: "%",
    },
}


---------- Input ----------
alter user 'test-e' identified by 'new-password';
---------- Output ---------
ALTER USER 'test-e'@'%' IDENTIFIED BY 'new-password'
---------- AST ------------
AlterUser(
    AlterUserStmt {
        user: Some(
            UserIdentity {
                username: "test-e",
                hostname: "%",
            },
        ),
        auth_option: Some(
            AuthOption {
                auth_type: None,
                password: Some(
                    "new-password",
                ),
            },
        ),
        user_options: [],
    },
)


---------- Input ----------
create role test
---------- Output ---------
CREATE ROLE 'test'
---------- AST ------------
CreateRole {
    if_not_exists: false,
    role_name: "test",
}


---------- Input ----------
create role 'test'
---------- Output ---------
CREATE ROLE 'test'
---------- AST ------------
CreateRole {
    if_not_exists: false,
    role_name: "test",
}


---------- Input ----------
drop role if exists test
---------- Output ---------
DROP ROLE IF EXISTS 'test'
---------- AST ------------
DropRole {
    if_exists: true,
    role_name: "test",
}


---------- Input ----------
drop role if exists 'test'
---------- Output ---------
DROP ROLE IF EXISTS 'test'
---------- AST ------------
DropRole {
    if_exists: true,
    role_name: "test",
}


---------- Input ----------
OPTIMIZE TABLE t COMPACT SEGMENT LIMIT 10;
---------- Output ---------
OPTIMIZE TABLE t COMPACT SEGMENT LIMIT 10
---------- AST ------------
OptimizeTable(
    OptimizeTableStmt {
        catalog: None,
        database: None,
        table: Identifier {
            span: Some(
                15..16,
            ),
            name: "t",
            quote: None,
        },
        action: Compact {
            target: Segment,
        },
        limit: Some(
            10,
        ),
    },
)


---------- Input ----------
OPTIMIZE TABLE t COMPACT LIMIT 10;
---------- Output ---------
OPTIMIZE TABLE t COMPACT BLOCK LIMIT 10
---------- AST ------------
OptimizeTable(
    OptimizeTableStmt {
        catalog: None,
        database: None,
        table: Identifier {
            span: Some(
                15..16,
            ),
            name: "t",
            quote: None,
        },
        action: Compact {
            target: Block,
        },
        limit: Some(
            10,
        ),
    },
)


---------- Input ----------
OPTIMIZE TABLE t PURGE BEFORE (SNAPSHOT => '9828b23f74664ff3806f44bbc1925ea5') LIMIT 10;
---------- Output ---------
OPTIMIZE TABLE t PURGE BEFORE  (SNAPSHOT => 9828b23f74664ff3806f44bbc1925ea5) LIMIT 10
---------- AST ------------
OptimizeTable(
    OptimizeTableStmt {
        catalog: None,
        database: None,
        table: Identifier {
            span: Some(
                15..16,
            ),
            name: "t",
            quote: None,
        },
        action: Purge {
            before: Some(
                Snapshot(
                    "9828b23f74664ff3806f44bbc1925ea5",
                ),
            ),
        },
        limit: Some(
            10,
        ),
    },
)


---------- Input ----------
OPTIMIZE TABLE t PURGE BEFORE (TIMESTAMP => '2023-06-26 09:49:02.038483'::TIMESTAMP) LIMIT 10;
---------- Output ---------
OPTIMIZE TABLE t PURGE BEFORE  (TIMESTAMP => '2023-06-26 09:49:02.038483'::TIMESTAMP) LIMIT 10
---------- AST ------------
OptimizeTable(
    OptimizeTableStmt {
        catalog: None,
        database: None,
        table: Identifier {
            span: Some(
                15..16,
            ),
            name: "t",
            quote: None,
        },
        action: Purge {
            before: Some(
                Timestamp(
                    Cast {
                        span: Some(
                            72..83,
                        ),
                        expr: Literal {
                            span: Some(
                                44..72,
                            ),
                            lit: String(
                                "2023-06-26 09:49:02.038483",
                            ),
                        },
                        target_type: Timestamp,
                        pg_style: true,
                    },
                ),
            ),
        },
        limit: Some(
            10,
        ),
    },
)


---------- Input ----------
ALTER TABLE t CLUSTER BY(c1);
---------- Output ---------
ALTER TABLE t CLUSTER BY c1
---------- AST ------------
AlterTable(
    AlterTableStmt {
        if_exists: false,
        table_reference: Table {
            span: Some(
                12..13,
            ),
            catalog: None,
            database: None,
            table: Identifier {
                span: Some(
                    12..13,
                ),
                name: "t",
                quote: None,
            },
            alias: None,
            travel_point: None,
            since_point: None,
            pivot: None,
            unpivot: None,
        },
        action: AlterTableClusterKey {
            cluster_by: [
                ColumnRef {
                    span: Some(
                        25..27,
                    ),
                    column: ColumnRef {
                        database: None,
                        table: None,
                        column: Name(
                            Identifier {
                                span: Some(
                                    25..27,
                                ),
                                name: "c1",
                                quote: None,
                            },
                        ),
                    },
                },
            ],
        },
    },
)


---------- Input ----------
ALTER TABLE t DROP CLUSTER KEY;
---------- Output ---------
ALTER TABLE t DROP CLUSTER KEY
---------- AST ------------
AlterTable(
    AlterTableStmt {
        if_exists: false,
        table_reference: Table {
            span: Some(
                12..13,
            ),
            catalog: None,
            database: None,
            table: Identifier {
                span: Some(
                    12..13,
                ),
                name: "t",
                quote: None,
            },
            alias: None,
            travel_point: None,
            since_point: None,
            pivot: None,
            unpivot: None,
        },
        action: DropTableClusterKey,
    },
)


---------- Input ----------
ALTER TABLE t RECLUSTER FINAL WHERE c1 > 0 LIMIT 10;
---------- Output ---------
ALTER TABLE t RECLUSTER FINAL WHERE (c1 > 0) LIMIT 10
---------- AST ------------
AlterTable(
    AlterTableStmt {
        if_exists: false,
        table_reference: Table {
            span: Some(
                12..13,
            ),
            catalog: None,
            database: None,
            table: Identifier {
                span: Some(
                    12..13,
                ),
                name: "t",
                quote: None,
            },
            alias: None,
            travel_point: None,
            since_point: None,
            pivot: None,
            unpivot: None,
        },
        action: ReclusterTable {
            is_final: true,
            selection: Some(
                BinaryOp {
                    span: Some(
                        39..40,
                    ),
                    op: Gt,
                    left: ColumnRef {
                        span: Some(
                            36..38,
                        ),
                        column: ColumnRef {
                            database: None,
                            table: None,
                            column: Name(
                                Identifier {
                                    span: Some(
                                        36..38,
                                    ),
                                    name: "c1",
                                    quote: None,
                                },
                            ),
                        },
                    },
                    right: Literal {
                        span: Some(
                            41..42,
                        ),
                        lit: UInt64(
                            0,
                        ),
                    },
                },
            ),
            limit: Some(
                10,
            ),
        },
    },
)


---------- Input ----------
ALTER TABLE t ADD c int null;
---------- Output ---------
ALTER TABLE t ADD COLUMN c Int32 NULL
---------- AST ------------
AlterTable(
    AlterTableStmt {
        if_exists: false,
        table_reference: Table {
            span: Some(
                12..13,
            ),
            catalog: None,
            database: None,
            table: Identifier {
                span: Some(
                    12..13,
                ),
                name: "t",
                quote: None,
            },
            alias: None,
            travel_point: None,
            since_point: None,
            pivot: None,
            unpivot: None,
        },
        action: AddColumn {
            column: ColumnDefinition {
                name: Identifier {
                    span: Some(
                        18..19,
                    ),
                    name: "c",
                    quote: None,
                },
                data_type: Nullable(
                    Int32,
                ),
                expr: None,
                comment: None,
            },
            option: End,
        },
    },
)


---------- Input ----------
ALTER TABLE t ADD COLUMN c int null;
---------- Output ---------
ALTER TABLE t ADD COLUMN c Int32 NULL
---------- AST ------------
AlterTable(
    AlterTableStmt {
        if_exists: false,
        table_reference: Table {
            span: Some(
                12..13,
            ),
            catalog: None,
            database: None,
            table: Identifier {
                span: Some(
                    12..13,
                ),
                name: "t",
                quote: None,
            },
            alias: None,
            travel_point: None,
            since_point: None,
            pivot: None,
            unpivot: None,
        },
        action: AddColumn {
            column: ColumnDefinition {
                name: Identifier {
                    span: Some(
                        25..26,
                    ),
                    name: "c",
                    quote: None,
                },
                data_type: Nullable(
                    Int32,
                ),
                expr: None,
                comment: None,
            },
            option: End,
        },
    },
)


---------- Input ----------
ALTER TABLE t ADD COLUMN a float default 1.1 COMMENT 'hello' FIRST;
---------- Output ---------
ALTER TABLE t ADD COLUMN a Float32 DEFAULT 1.1 COMMENT 'hello' FIRST
---------- AST ------------
AlterTable(
    AlterTableStmt {
        if_exists: false,
        table_reference: Table {
            span: Some(
                12..13,
            ),
            catalog: None,
            database: None,
            table: Identifier {
                span: Some(
                    12..13,
                ),
                name: "t",
                quote: None,
            },
            alias: None,
            travel_point: None,
            since_point: None,
            pivot: None,
            unpivot: None,
        },
        action: AddColumn {
            column: ColumnDefinition {
                name: Identifier {
                    span: Some(
                        25..26,
                    ),
                    name: "a",
                    quote: None,
                },
                data_type: Float32,
                expr: Some(
                    Default(
                        Literal {
                            span: Some(
                                41..44,
                            ),
                            lit: Decimal256 {
                                value: 11,
                                precision: 76,
                                scale: 1,
                            },
                        },
                    ),
                ),
                comment: Some(
                    "hello",
                ),
            },
            option: First,
        },
    },
)


---------- Input ----------
ALTER TABLE t ADD COLUMN b string default 'b' AFTER a;
---------- Output ---------
ALTER TABLE t ADD COLUMN b STRING DEFAULT 'b' AFTER a
---------- AST ------------
AlterTable(
    AlterTableStmt {
        if_exists: false,
        table_reference: Table {
            span: Some(
                12..13,
            ),
            catalog: None,
            database: None,
            table: Identifier {
                span: Some(
                    12..13,
                ),
                name: "t",
                quote: None,
            },
            alias: None,
            travel_point: None,
            since_point: None,
            pivot: None,
            unpivot: None,
        },
        action: AddColumn {
            column: ColumnDefinition {
                name: Identifier {
                    span: Some(
                        25..26,
                    ),
                    name: "b",
                    quote: None,
                },
                data_type: String,
                expr: Some(
                    Default(
                        Literal {
                            span: Some(
                                42..45,
                            ),
                            lit: String(
                                "b",
                            ),
                        },
                    ),
                ),
                comment: None,
            },
            option: After(
                Identifier {
                    span: Some(
                        52..53,
                    ),
                    name: "a",
                    quote: None,
                },
            ),
        },
    },
)


---------- Input ----------
ALTER TABLE t RENAME COLUMN a TO b;
---------- Output ---------
ALTER TABLE t RENAME COLUMN a TO b
---------- AST ------------
AlterTable(
    AlterTableStmt {
        if_exists: false,
        table_reference: Table {
            span: Some(
                12..13,
            ),
            catalog: None,
            database: None,
            table: Identifier {
                span: Some(
                    12..13,
                ),
                name: "t",
                quote: None,
            },
            alias: None,
            travel_point: None,
            since_point: None,
            pivot: None,
            unpivot: None,
        },
        action: RenameColumn {
            old_column: Identifier {
                span: Some(
                    28..29,
                ),
                name: "a",
                quote: None,
            },
            new_column: Identifier {
                span: Some(
                    33..34,
                ),
                name: "b",
                quote: None,
            },
        },
    },
)


---------- Input ----------
ALTER TABLE t DROP COLUMN b;
---------- Output ---------
ALTER TABLE t DROP COLUMN b
---------- AST ------------
AlterTable(
    AlterTableStmt {
        if_exists: false,
        table_reference: Table {
            span: Some(
                12..13,
            ),
            catalog: None,
            database: None,
            table: Identifier {
                span: Some(
                    12..13,
                ),
                name: "t",
                quote: None,
            },
            alias: None,
            travel_point: None,
            since_point: None,
            pivot: None,
            unpivot: None,
        },
        action: DropColumn {
            column: Identifier {
                span: Some(
                    26..27,
                ),
                name: "b",
                quote: None,
            },
        },
    },
)


---------- Input ----------
ALTER TABLE t DROP b;
---------- Output ---------
ALTER TABLE t DROP COLUMN b
---------- AST ------------
AlterTable(
    AlterTableStmt {
        if_exists: false,
        table_reference: Table {
            span: Some(
                12..13,
            ),
            catalog: None,
            database: None,
            table: Identifier {
                span: Some(
                    12..13,
                ),
                name: "t",
                quote: None,
            },
            alias: None,
            travel_point: None,
            since_point: None,
            pivot: None,
            unpivot: None,
        },
        action: DropColumn {
            column: Identifier {
                span: Some(
                    19..20,
                ),
                name: "b",
                quote: None,
            },
        },
    },
)


---------- Input ----------
ALTER TABLE t MODIFY COLUMN b SET MASKING POLICY mask;
---------- Output ---------
ALTER TABLE t MODIFY COLUMN b SET MASKING POLICY mask
---------- AST ------------
AlterTable(
    AlterTableStmt {
        if_exists: false,
        table_reference: Table {
            span: Some(
                12..13,
            ),
            catalog: None,
            database: None,
            table: Identifier {
                span: Some(
                    12..13,
                ),
                name: "t",
                quote: None,
            },
            alias: None,
            travel_point: None,
            since_point: None,
            pivot: None,
            unpivot: None,
        },
        action: ModifyColumn {
            action: SetMaskingPolicy(
                Identifier {
                    span: Some(
                        28..29,
                    ),
                    name: "b",
                    quote: None,
                },
                "mask",
            ),
        },
    },
)


---------- Input ----------
ALTER TABLE t MODIFY COLUMN b UNSET MASKING POLICY;
---------- Output ---------
ALTER TABLE t MODIFY COLUMN b UNSET MASKING POLICY
---------- AST ------------
AlterTable(
    AlterTableStmt {
        if_exists: false,
        table_reference: Table {
            span: Some(
                12..13,
            ),
            catalog: None,
            database: None,
            table: Identifier {
                span: Some(
                    12..13,
                ),
                name: "t",
                quote: None,
            },
            alias: None,
            travel_point: None,
            since_point: None,
            pivot: None,
            unpivot: None,
        },
        action: ModifyColumn {
            action: UnsetMaskingPolicy(
                Identifier {
                    span: Some(
                        28..29,
                    ),
                    name: "b",
                    quote: None,
                },
            ),
        },
    },
)


---------- Input ----------
ALTER TABLE t MODIFY COLUMN a int DEFAULT 1, COLUMN b float;
---------- Output ---------
ALTER TABLE t MODIFY COLUMN a Int32 DEFAULT 1, COLUMN b Float32
---------- AST ------------
AlterTable(
    AlterTableStmt {
        if_exists: false,
        table_reference: Table {
            span: Some(
                12..13,
            ),
            catalog: None,
            database: None,
            table: Identifier {
                span: Some(
                    12..13,
                ),
                name: "t",
                quote: None,
            },
            alias: None,
            travel_point: None,
            since_point: None,
            pivot: None,
            unpivot: None,
        },
        action: ModifyColumn {
            action: SetDataType(
                [
                    ColumnDefinition {
                        name: Identifier {
                            span: Some(
                                28..29,
                            ),
                            name: "a",
                            quote: None,
                        },
                        data_type: Int32,
                        expr: Some(
                            Default(
                                Literal {
                                    span: Some(
                                        42..43,
                                    ),
                                    lit: UInt64(
                                        1,
                                    ),
                                },
                            ),
                        ),
                        comment: None,
                    },
                    ColumnDefinition {
                        name: Identifier {
                            span: Some(
                                52..53,
                            ),
                            name: "b",
                            quote: None,
                        },
                        data_type: Float32,
                        expr: None,
                        comment: None,
                    },
                ],
            ),
        },
    },
)


---------- Input ----------
ALTER TABLE t MODIFY COLUMN a int NULL DEFAULT 1, COLUMN b float NOT NULL COMMENT 'column b';
---------- Output ---------
ALTER TABLE t MODIFY COLUMN a Int32 NULL DEFAULT 1, COLUMN b Float32 NOT NULL COMMENT column b
---------- AST ------------
AlterTable(
    AlterTableStmt {
        if_exists: false,
        table_reference: Table {
            span: Some(
                12..13,
            ),
            catalog: None,
            database: None,
            table: Identifier {
                span: Some(
                    12..13,
                ),
                name: "t",
                quote: None,
            },
            alias: None,
            travel_point: None,
            since_point: None,
            pivot: None,
            unpivot: None,
        },
        action: ModifyColumn {
            action: SetDataType(
                [
                    ColumnDefinition {
                        name: Identifier {
                            span: Some(
                                28..29,
                            ),
                            name: "a",
                            quote: None,
                        },
                        data_type: Nullable(
                            Int32,
                        ),
                        expr: Some(
                            Default(
                                Literal {
                                    span: Some(
                                        47..48,
                                    ),
                                    lit: UInt64(
                                        1,
                                    ),
                                },
                            ),
                        ),
                        comment: None,
                    },
                    ColumnDefinition {
                        name: Identifier {
                            span: Some(
                                57..58,
                            ),
                            name: "b",
                            quote: None,
                        },
                        data_type: NotNull(
                            Float32,
                        ),
                        expr: None,
                        comment: Some(
                            "column b",
                        ),
                    },
                ],
            ),
        },
    },
)


---------- Input ----------
ALTER TABLE t MODIFY COLUMN a int;
---------- Output ---------
ALTER TABLE t MODIFY COLUMN a Int32
---------- AST ------------
AlterTable(
    AlterTableStmt {
        if_exists: false,
        table_reference: Table {
            span: Some(
                12..13,
            ),
            catalog: None,
            database: None,
            table: Identifier {
                span: Some(
                    12..13,
                ),
                name: "t",
                quote: None,
            },
            alias: None,
            travel_point: None,
            since_point: None,
            pivot: None,
            unpivot: None,
        },
        action: ModifyColumn {
            action: SetDataType(
                [
                    ColumnDefinition {
                        name: Identifier {
                            span: Some(
                                28..29,
                            ),
                            name: "a",
                            quote: None,
                        },
                        data_type: Int32,
                        expr: None,
                        comment: None,
                    },
                ],
            ),
        },
    },
)


---------- Input ----------
ALTER TABLE t MODIFY a int;
---------- Output ---------
ALTER TABLE t MODIFY COLUMN a Int32
---------- AST ------------
AlterTable(
    AlterTableStmt {
        if_exists: false,
        table_reference: Table {
            span: Some(
                12..13,
            ),
            catalog: None,
            database: None,
            table: Identifier {
                span: Some(
                    12..13,
                ),
                name: "t",
                quote: None,
            },
            alias: None,
            travel_point: None,
            since_point: None,
            pivot: None,
            unpivot: None,
        },
        action: ModifyColumn {
            action: SetDataType(
                [
                    ColumnDefinition {
                        name: Identifier {
                            span: Some(
                                21..22,
                            ),
                            name: "a",
                            quote: None,
                        },
                        data_type: Int32,
                        expr: None,
                        comment: None,
                    },
                ],
            ),
        },
    },
)


---------- Input ----------
ALTER TABLE t MODIFY COLUMN a DROP STORED;
---------- Output ---------
ALTER TABLE t MODIFY COLUMN a DROP STORED
---------- AST ------------
AlterTable(
    AlterTableStmt {
        if_exists: false,
        table_reference: Table {
            span: Some(
                12..13,
            ),
            catalog: None,
            database: None,
            table: Identifier {
                span: Some(
                    12..13,
                ),
                name: "t",
                quote: None,
            },
            alias: None,
            travel_point: None,
            since_point: None,
            pivot: None,
            unpivot: None,
        },
        action: ModifyColumn {
            action: ConvertStoredComputedColumn(
                Identifier {
                    span: Some(
                        28..29,
                    ),
                    name: "a",
                    quote: None,
                },
            ),
        },
    },
)


---------- Input ----------
ALTER TABLE t SET OPTIONS(SNAPSHOT_LOCATION='1/7/_ss/101fd790dbbe4238a31a8f2e2f856179_v4.mpk',block_per_segment = 500);
---------- Output ---------
ALTER TABLE t SET OPTIONS (block_per_segment = '500', snapshot_location = '1/7/_ss/101fd790dbbe4238a31a8f2e2f856179_v4.mpk')
---------- AST ------------
AlterTable(
    AlterTableStmt {
        if_exists: false,
        table_reference: Table {
            span: Some(
                12..13,
            ),
            catalog: None,
            database: None,
            table: Identifier {
                span: Some(
                    12..13,
                ),
                name: "t",
                quote: None,
            },
            alias: None,
            travel_point: None,
            since_point: None,
            pivot: None,
            unpivot: None,
        },
        action: SetOptions {
            set_options: {
                "block_per_segment": "500",
                "snapshot_location": "1/7/_ss/101fd790dbbe4238a31a8f2e2f856179_v4.mpk",
            },
        },
    },
)


---------- Input ----------
ALTER DATABASE IF EXISTS ctl.c RENAME TO a;
---------- Output ---------
ALTER DATABASE IF EXISTS ctl.c RENAME TO a
---------- AST ------------
AlterDatabase(
    AlterDatabaseStmt {
        if_exists: true,
        catalog: Some(
            Identifier {
                span: Some(
                    25..28,
                ),
                name: "ctl",
                quote: None,
            },
        ),
        database: Identifier {
            span: Some(
                29..30,
            ),
            name: "c",
            quote: None,
        },
        action: RenameDatabase {
            new_db: Identifier {
                span: Some(
                    41..42,
                ),
                name: "a",
                quote: None,
            },
        },
    },
)


---------- Input ----------
ALTER DATABASE c RENAME TO a;
---------- Output ---------
ALTER DATABASE c RENAME TO a
---------- AST ------------
AlterDatabase(
    AlterDatabaseStmt {
        if_exists: false,
        catalog: None,
        database: Identifier {
            span: Some(
                15..16,
            ),
            name: "c",
            quote: None,
        },
        action: RenameDatabase {
            new_db: Identifier {
                span: Some(
                    27..28,
                ),
                name: "a",
                quote: None,
            },
        },
    },
)


---------- Input ----------
ALTER DATABASE ctl.c RENAME TO a;
---------- Output ---------
ALTER DATABASE ctl.c RENAME TO a
---------- AST ------------
AlterDatabase(
    AlterDatabaseStmt {
        if_exists: false,
        catalog: Some(
            Identifier {
                span: Some(
                    15..18,
                ),
                name: "ctl",
                quote: None,
            },
        ),
        database: Identifier {
            span: Some(
                19..20,
            ),
            name: "c",
            quote: None,
        },
        action: RenameDatabase {
            new_db: Identifier {
                span: Some(
                    31..32,
                ),
                name: "a",
                quote: None,
            },
        },
    },
)


---------- Input ----------
VACUUM TABLE t;
---------- Output ---------
VACUUM TABLE t 
---------- AST ------------
VacuumTable(
    VacuumTableStmt {
        catalog: None,
        database: None,
        table: Identifier {
            span: Some(
                13..14,
            ),
            name: "t",
            quote: None,
        },
        option: VacuumTableOption {
            dry_run: false,
        },
    },
)


---------- Input ----------
VACUUM TABLE t DRY RUN;
---------- Output ---------
VACUUM TABLE t DRY RUN
---------- AST ------------
VacuumTable(
    VacuumTableStmt {
        catalog: None,
        database: None,
        table: Identifier {
            span: Some(
                13..14,
            ),
            name: "t",
            quote: None,
        },
        option: VacuumTableOption {
            dry_run: true,
        },
    },
)


---------- Input ----------
VACUUM DROP TABLE;
---------- Output ---------
VACUUM DROP TABLE 
---------- AST ------------
VacuumDropTable(
    VacuumDropTableStmt {
        catalog: None,
        database: None,
        option: VacuumDropTableOption {
            dry_run: false,
            limit: None,
        },
    },
)


---------- Input ----------
VACUUM DROP TABLE DRY RUN;
---------- Output ---------
VACUUM DROP TABLE DRY RUN
---------- AST ------------
VacuumDropTable(
    VacuumDropTableStmt {
        catalog: None,
        database: None,
        option: VacuumDropTableOption {
            dry_run: true,
            limit: None,
        },
    },
)


---------- Input ----------
VACUUM DROP TABLE FROM db;
---------- Output ---------
VACUUM DROP TABLE FROM db 
---------- AST ------------
VacuumDropTable(
    VacuumDropTableStmt {
        catalog: None,
        database: Some(
            Identifier {
                span: Some(
                    23..25,
                ),
                name: "db",
                quote: None,
            },
        ),
        option: VacuumDropTableOption {
            dry_run: false,
            limit: None,
        },
    },
)


---------- Input ----------
VACUUM DROP TABLE FROM db LIMIT 10;
---------- Output ---------
VACUUM DROP TABLE FROM db  LIMIT 10
---------- AST ------------
VacuumDropTable(
    VacuumDropTableStmt {
        catalog: None,
        database: Some(
            Identifier {
                span: Some(
                    23..25,
                ),
                name: "db",
                quote: None,
            },
        ),
        option: VacuumDropTableOption {
            dry_run: false,
            limit: Some(
                10,
            ),
        },
    },
)


---------- Input ----------
CREATE TABLE t (a INT COMMENT 'col comment') COMMENT='table comment';
---------- Output ---------
CREATE TABLE t (a Int32 COMMENT 'col comment')comment = 'table comment'
---------- AST ------------
CreateTable(
    CreateTableStmt {
        create_option: None,
        catalog: None,
        database: None,
        table: Identifier {
            span: Some(
                13..14,
            ),
            name: "t",
            quote: None,
        },
        source: Some(
            Columns(
                [
                    ColumnDefinition {
                        name: Identifier {
                            span: Some(
                                16..17,
                            ),
                            name: "a",
                            quote: None,
                        },
                        data_type: Int32,
                        expr: None,
                        comment: Some(
                            "col comment",
                        ),
                    },
                ],
            ),
        ),
        engine: None,
        uri_location: None,
        cluster_by: [],
        table_options: {
            "comment": "table comment",
        },
        as_query: None,
        transient: false,
    },
)


---------- Input ----------
GRANT CREATE, CREATE USER ON * TO 'test-grant';
---------- Output ---------
GRANT CREATE, CREATE USER ON * TO USER 'test-grant'@'%'
---------- AST ------------
Grant(
    GrantStmt {
        source: Privs {
            privileges: [
                Create,
                CreateUser,
            ],
            level: Database(
                None,
            ),
        },
        principal: User(
            UserIdentity {
                username: "test-grant",
                hostname: "%",
            },
        ),
    },
)


---------- Input ----------
GRANT SELECT, CREATE ON * TO 'test-grant';
---------- Output ---------
GRANT SELECT, CREATE ON * TO USER 'test-grant'@'%'
---------- AST ------------
Grant(
    GrantStmt {
        source: Privs {
            privileges: [
                Select,
                Create,
            ],
            level: Database(
                None,
            ),
        },
        principal: User(
            UserIdentity {
                username: "test-grant",
                hostname: "%",
            },
        ),
    },
)


---------- Input ----------
GRANT SELECT, CREATE ON *.* TO 'test-grant';
---------- Output ---------
GRANT SELECT, CREATE ON *.* TO USER 'test-grant'@'%'
---------- AST ------------
Grant(
    GrantStmt {
        source: Privs {
            privileges: [
                Select,
                Create,
            ],
            level: Global,
        },
        principal: User(
            UserIdentity {
                username: "test-grant",
                hostname: "%",
            },
        ),
    },
)


---------- Input ----------
GRANT SELECT, CREATE ON * TO USER 'test-grant';
---------- Output ---------
GRANT SELECT, CREATE ON * TO USER 'test-grant'@'%'
---------- AST ------------
Grant(
    GrantStmt {
        source: Privs {
            privileges: [
                Select,
                Create,
            ],
            level: Database(
                None,
            ),
        },
        principal: User(
            UserIdentity {
                username: "test-grant",
                hostname: "%",
            },
        ),
    },
)


---------- Input ----------
GRANT SELECT, CREATE ON * TO ROLE role1;
---------- Output ---------
GRANT SELECT, CREATE ON * TO ROLE role1
---------- AST ------------
Grant(
    GrantStmt {
        source: Privs {
            privileges: [
                Select,
                Create,
            ],
            level: Database(
                None,
            ),
        },
        principal: Role(
            "role1",
        ),
    },
)


---------- Input ----------
GRANT ALL ON *.* TO 'test-grant';
---------- Output ---------
GRANT ALL PRIVILEGES ON *.* TO USER 'test-grant'@'%'
---------- AST ------------
Grant(
    GrantStmt {
        source: ALL {
            level: Global,
        },
        principal: User(
            UserIdentity {
                username: "test-grant",
                hostname: "%",
            },
        ),
    },
)


---------- Input ----------
GRANT ALL ON *.* TO ROLE role2;
---------- Output ---------
GRANT ALL PRIVILEGES ON *.* TO ROLE role2
---------- AST ------------
Grant(
    GrantStmt {
        source: ALL {
            level: Global,
        },
        principal: Role(
            "role2",
        ),
    },
)


---------- Input ----------
GRANT ALL PRIVILEGES ON * TO 'test-grant';
---------- Output ---------
GRANT ALL PRIVILEGES ON * TO USER 'test-grant'@'%'
---------- AST ------------
Grant(
    GrantStmt {
        source: ALL {
            level: Database(
                None,
            ),
        },
        principal: User(
            UserIdentity {
                username: "test-grant",
                hostname: "%",
            },
        ),
    },
)


---------- Input ----------
GRANT ALL PRIVILEGES ON * TO ROLE role3;
---------- Output ---------
GRANT ALL PRIVILEGES ON * TO ROLE role3
---------- AST ------------
Grant(
    GrantStmt {
        source: ALL {
            level: Database(
                None,
            ),
        },
        principal: Role(
            "role3",
        ),
    },
)


---------- Input ----------
GRANT ROLE test TO 'test-user';
---------- Output ---------
GRANT ROLE test TO USER 'test-user'@'%'
---------- AST ------------
Grant(
    GrantStmt {
        source: Role {
            role: "test",
        },
        principal: User(
            UserIdentity {
                username: "test-user",
                hostname: "%",
            },
        ),
    },
)


---------- Input ----------
GRANT ROLE test TO USER 'test-user';
---------- Output ---------
GRANT ROLE test TO USER 'test-user'@'%'
---------- AST ------------
Grant(
    GrantStmt {
        source: Role {
            role: "test",
        },
        principal: User(
            UserIdentity {
                username: "test-user",
                hostname: "%",
            },
        ),
    },
)


---------- Input ----------
GRANT ROLE test TO ROLE `test-user`;
---------- Output ---------
GRANT ROLE test TO ROLE test-user
---------- AST ------------
Grant(
    GrantStmt {
        source: Role {
            role: "test",
        },
        principal: Role(
            "test-user",
        ),
    },
)


---------- Input ----------
GRANT SELECT ON db01.* TO 'test-grant';
---------- Output ---------
GRANT SELECT ON db01.* TO USER 'test-grant'@'%'
---------- AST ------------
Grant(
    GrantStmt {
        source: Privs {
            privileges: [
                Select,
            ],
            level: Database(
                Some(
                    "db01",
                ),
            ),
        },
        principal: User(
            UserIdentity {
                username: "test-grant",
                hostname: "%",
            },
        ),
    },
)


---------- Input ----------
GRANT SELECT ON db01.* TO USER 'test-grant';
---------- Output ---------
GRANT SELECT ON db01.* TO USER 'test-grant'@'%'
---------- AST ------------
Grant(
    GrantStmt {
        source: Privs {
            privileges: [
                Select,
            ],
            level: Database(
                Some(
                    "db01",
                ),
            ),
        },
        principal: User(
            UserIdentity {
                username: "test-grant",
                hostname: "%",
            },
        ),
    },
)


---------- Input ----------
GRANT SELECT ON db01.* TO ROLE role1
---------- Output ---------
GRANT SELECT ON db01.* TO ROLE role1
---------- AST ------------
Grant(
    GrantStmt {
        source: Privs {
            privileges: [
                Select,
            ],
            level: Database(
                Some(
                    "db01",
                ),
            ),
        },
        principal: Role(
            "role1",
        ),
    },
)


---------- Input ----------
GRANT SELECT ON db01.tb1 TO 'test-grant';
---------- Output ---------
GRANT SELECT ON db01.tb1 TO USER 'test-grant'@'%'
---------- AST ------------
Grant(
    GrantStmt {
        source: Privs {
            privileges: [
                Select,
            ],
            level: Table(
                Some(
                    "db01",
                ),
                "tb1",
            ),
        },
        principal: User(
            UserIdentity {
                username: "test-grant",
                hostname: "%",
            },
        ),
    },
)


---------- Input ----------
GRANT SELECT ON db01.tb1 TO USER 'test-grant';
---------- Output ---------
GRANT SELECT ON db01.tb1 TO USER 'test-grant'@'%'
---------- AST ------------
Grant(
    GrantStmt {
        source: Privs {
            privileges: [
                Select,
            ],
            level: Table(
                Some(
                    "db01",
                ),
                "tb1",
            ),
        },
        principal: User(
            UserIdentity {
                username: "test-grant",
                hostname: "%",
            },
        ),
    },
)


---------- Input ----------
GRANT SELECT ON db01.tb1 TO ROLE role1;
---------- Output ---------
GRANT SELECT ON db01.tb1 TO ROLE role1
---------- AST ------------
Grant(
    GrantStmt {
        source: Privs {
            privileges: [
                Select,
            ],
            level: Table(
                Some(
                    "db01",
                ),
                "tb1",
            ),
        },
        principal: Role(
            "role1",
        ),
    },
)


---------- Input ----------
GRANT SELECT ON tb1 TO ROLE role1;
---------- Output ---------
GRANT SELECT ON tb1 TO ROLE role1
---------- AST ------------
Grant(
    GrantStmt {
        source: Privs {
            privileges: [
                Select,
            ],
            level: Table(
                None,
                "tb1",
            ),
        },
        principal: Role(
            "role1",
        ),
    },
)


---------- Input ----------
GRANT ALL ON tb1 TO 'u1';
---------- Output ---------
GRANT ALL PRIVILEGES ON tb1 TO USER 'u1'@'%'
---------- AST ------------
Grant(
    GrantStmt {
        source: ALL {
            level: Table(
                None,
                "tb1",
            ),
        },
        principal: User(
            UserIdentity {
                username: "u1",
                hostname: "%",
            },
        ),
    },
)


---------- Input ----------
SHOW GRANTS;
---------- Output ---------
SHOW GRANTS
---------- AST ------------
ShowGrants {
    principal: None,
}


---------- Input ----------
SHOW GRANTS FOR 'test-grant';
---------- Output ---------
SHOW GRANTS FOR USER 'test-grant'@'%'
---------- AST ------------
ShowGrants {
    principal: Some(
        User(
            UserIdentity {
                username: "test-grant",
                hostname: "%",
            },
        ),
    ),
}


---------- Input ----------
SHOW GRANTS FOR USER 'test-grant';
---------- Output ---------
SHOW GRANTS FOR USER 'test-grant'@'%'
---------- AST ------------
ShowGrants {
    principal: Some(
        User(
            UserIdentity {
                username: "test-grant",
                hostname: "%",
            },
        ),
    ),
}


---------- Input ----------
SHOW GRANTS FOR ROLE role1;
---------- Output ---------
SHOW GRANTS FOR ROLE role1
---------- AST ------------
ShowGrants {
    principal: Some(
        Role(
            "role1",
        ),
    ),
}


---------- Input ----------
SHOW GRANTS FOR ROLE 'role1';
---------- Output ---------
SHOW GRANTS FOR ROLE role1
---------- AST ------------
ShowGrants {
    principal: Some(
        Role(
            "role1",
        ),
    ),
}


---------- Input ----------
REVOKE SELECT, CREATE ON * FROM 'test-grant';
---------- Output ---------
REVOKE SELECT, CREATE ON * FROM USER 'test-grant'@'%'
---------- AST ------------
Revoke(
    RevokeStmt {
        source: Privs {
            privileges: [
                Select,
                Create,
            ],
            level: Database(
                None,
            ),
        },
        principal: User(
            UserIdentity {
                username: "test-grant",
                hostname: "%",
            },
        ),
    },
)


---------- Input ----------
REVOKE SELECT ON tb1 FROM ROLE role1;
---------- Output ---------
REVOKE SELECT ON tb1 FROM ROLE role1
---------- AST ------------
Revoke(
    RevokeStmt {
        source: Privs {
            privileges: [
                Select,
            ],
            level: Table(
                None,
                "tb1",
            ),
        },
        principal: Role(
            "role1",
        ),
    },
)


---------- Input ----------
REVOKE SELECT ON tb1 FROM ROLE 'role1';
---------- Output ---------
REVOKE SELECT ON tb1 FROM ROLE role1
---------- AST ------------
Revoke(
    RevokeStmt {
        source: Privs {
            privileges: [
                Select,
            ],
            level: Table(
                None,
                "tb1",
            ),
        },
        principal: Role(
            "role1",
        ),
    },
)


---------- Input ----------
drop role 'role1';
---------- Output ---------
DROP ROLE 'role1'
---------- AST ------------
DropRole {
    if_exists: false,
    role_name: "role1",
}


---------- Input ----------
GRANT ROLE test TO ROLE 'test-user';
---------- Output ---------
GRANT ROLE test TO ROLE test-user
---------- AST ------------
Grant(
    GrantStmt {
        source: Role {
            role: "test",
        },
        principal: Role(
            "test-user",
        ),
    },
)


---------- Input ----------
GRANT ROLE test TO ROLE `test-user`;
---------- Output ---------
GRANT ROLE test TO ROLE test-user
---------- AST ------------
Grant(
    GrantStmt {
        source: Role {
            role: "test",
        },
        principal: Role(
            "test-user",
        ),
    },
)


---------- Input ----------
SET ROLE `test-user`;
---------- Output ---------
SET ROLE test-user
---------- AST ------------
SetRole {
    is_default: false,
    role_name: "test-user",
}


---------- Input ----------
SET ROLE 'test-user';
---------- Output ---------
SET ROLE test-user
---------- AST ------------
SetRole {
    is_default: false,
    role_name: "test-user",
}


---------- Input ----------
SET ROLE ROLE1;
---------- Output ---------
SET ROLE ROLE1
---------- AST ------------
SetRole {
    is_default: false,
    role_name: "ROLE1",
}


---------- Input ----------
REVOKE ALL ON tb1 FROM 'u1';
---------- Output ---------
REVOKE ALL PRIVILEGES ON tb1 FROM USER 'u1'@'%'
---------- AST ------------
Revoke(
    RevokeStmt {
        source: ALL {
            level: Table(
                None,
                "tb1",
            ),
        },
        principal: User(
            UserIdentity {
                username: "u1",
                hostname: "%",
            },
        ),
    },
)


---------- Input ----------
COPY INTO mytable
                FROM '@~/mybucket/my data.csv'
                size_limit=10;
---------- Output ---------
COPY INTO mytable FROM @~/mybucket/my data.csv SIZE_LIMIT = 10 PURGE = false FORCE = false DISABLE_VARIANT_CHECK = false ON_ERROR = abort
---------- AST ------------
CopyIntoTable(
    CopyIntoTableStmt {
        src: Location(
            Stage(
                "~/mybucket/my data.csv",
            ),
        ),
        dst: TableRef {
            catalog: None,
            database: None,
            table: Identifier {
                span: Some(
                    10..17,
                ),
                name: "mytable",
                quote: None,
            },
        },
        dst_columns: None,
        hints: None,
        file_format: {},
        files: None,
        pattern: None,
        force: false,
        validation_mode: "",
        size_limit: 10,
        max_files: 0,
        split_size: 0,
        purge: false,
        disable_variant_check: false,
        return_failed_only: false,
        on_error: "abort",
    },
)


---------- Input ----------
COPY INTO mytable
                FROM @~/mybucket/data.csv
                FILE_FORMAT = (
                    type = CSV
                    field_delimiter = ','
                    record_delimiter = '\n'
                    skip_header = 1
                )
                size_limit=10;
---------- Output ---------
COPY INTO mytable FROM @~/mybucket/data.csv FILE_FORMAT = (field_delimiter = ',', record_delimiter = '
', skip_header = '1', type = 'CSV') SIZE_LIMIT = 10 PURGE = false FORCE = false DISABLE_VARIANT_CHECK = false ON_ERROR = abort
---------- AST ------------
CopyIntoTable(
    CopyIntoTableStmt {
        src: Location(
            Stage(
                "~/mybucket/data.csv",
            ),
        ),
        dst: TableRef {
            catalog: None,
            database: None,
            table: Identifier {
                span: Some(
                    10..17,
                ),
                name: "mytable",
                quote: None,
            },
        },
        dst_columns: None,
        hints: None,
        file_format: {
            "field_delimiter": ",",
            "record_delimiter": "\n",
            "skip_header": "1",
            "type": "CSV",
        },
        files: None,
        pattern: None,
        force: false,
        validation_mode: "",
        size_limit: 10,
        max_files: 0,
        split_size: 0,
        purge: false,
        disable_variant_check: false,
        return_failed_only: false,
        on_error: "abort",
    },
)


---------- Input ----------
COPY INTO mytable
                FROM 's3://mybucket/data.csv'
                FILE_FORMAT = (
                    type = CSV
                    field_delimiter = ','
                    record_delimiter = '\n'
                    skip_header = 1
                )
                size_limit=10
                max_files=10;
---------- Output ---------
COPY INTO mytable FROM 's3://mybucket/data.csv' FILE_FORMAT = (field_delimiter = ',', record_delimiter = '
', skip_header = '1', type = 'CSV') SIZE_LIMIT = 10 MAX_FILES = 10 PURGE = false FORCE = false DISABLE_VARIANT_CHECK = false ON_ERROR = abort
---------- AST ------------
CopyIntoTable(
    CopyIntoTableStmt {
        src: Location(
            Uri(
                UriLocation {
                    protocol: "s3",
                    name: "mybucket",
                    path: "/data.csv",
                    part_prefix: "",
                    connection: Connection {
                        visited_keys: {},
                        conns: {},
                    },
                },
            ),
        ),
        dst: TableRef {
            catalog: None,
            database: None,
            table: Identifier {
                span: Some(
                    10..17,
                ),
                name: "mytable",
                quote: None,
            },
        },
        dst_columns: None,
        hints: None,
        file_format: {
            "field_delimiter": ",",
            "record_delimiter": "\n",
            "skip_header": "1",
            "type": "CSV",
        },
        files: None,
        pattern: None,
        force: false,
        validation_mode: "",
        size_limit: 10,
        max_files: 10,
        split_size: 0,
        purge: false,
        disable_variant_check: false,
        return_failed_only: false,
        on_error: "abort",
    },
)


---------- Input ----------
COPY INTO mytable
                FROM 's3://mybucket/data.csv'
                FILE_FORMAT = (
                    type = CSV
                    field_delimiter = ','
                    record_delimiter = '\n'
                    skip_header = 1
                )
                size_limit=10
                max_files=3000;
---------- Output ---------
COPY INTO mytable FROM 's3://mybucket/data.csv' FILE_FORMAT = (field_delimiter = ',', record_delimiter = '
', skip_header = '1', type = 'CSV') SIZE_LIMIT = 10 MAX_FILES = 3000 PURGE = false FORCE = false DISABLE_VARIANT_CHECK = false ON_ERROR = abort
---------- AST ------------
CopyIntoTable(
    CopyIntoTableStmt {
        src: Location(
            Uri(
                UriLocation {
                    protocol: "s3",
                    name: "mybucket",
                    path: "/data.csv",
                    part_prefix: "",
                    connection: Connection {
                        visited_keys: {},
                        conns: {},
                    },
                },
            ),
        ),
        dst: TableRef {
            catalog: None,
            database: None,
            table: Identifier {
                span: Some(
                    10..17,
                ),
                name: "mytable",
                quote: None,
            },
        },
        dst_columns: None,
        hints: None,
        file_format: {
            "field_delimiter": ",",
            "record_delimiter": "\n",
            "skip_header": "1",
            "type": "CSV",
        },
        files: None,
        pattern: None,
        force: false,
        validation_mode: "",
        size_limit: 10,
        max_files: 3000,
        split_size: 0,
        purge: false,
        disable_variant_check: false,
        return_failed_only: false,
        on_error: "abort",
    },
)


---------- Input ----------
COPY INTO mytable
                FROM 's3://mybucket/data.csv'
                CONNECTION = (
                    ENDPOINT_URL = 'http://127.0.0.1:9900'
                )
                FILE_FORMAT = (
                    type = CSV
                    field_delimiter = ','
                    record_delimiter = '\n'
                    skip_header = 1
                )
                size_limit=10;
---------- Output ---------
COPY INTO mytable FROM 's3://mybucket/data.csv' CONNECTION = ( endpoint_url = '******900' ) FILE_FORMAT = (field_delimiter = ',', record_delimiter = '
', skip_header = '1', type = 'CSV') SIZE_LIMIT = 10 PURGE = false FORCE = false DISABLE_VARIANT_CHECK = false ON_ERROR = abort
---------- AST ------------
CopyIntoTable(
    CopyIntoTableStmt {
        src: Location(
            Uri(
                UriLocation {
                    protocol: "s3",
                    name: "mybucket",
                    path: "/data.csv",
                    part_prefix: "",
                    connection: Connection {
                        visited_keys: {},
                        conns: {
                            "endpoint_url": "http://127.0.0.1:9900",
                        },
                    },
                },
            ),
        ),
        dst: TableRef {
            catalog: None,
            database: None,
            table: Identifier {
                span: Some(
                    10..17,
                ),
                name: "mytable",
                quote: None,
            },
        },
        dst_columns: None,
        hints: None,
        file_format: {
            "field_delimiter": ",",
            "record_delimiter": "\n",
            "skip_header": "1",
            "type": "CSV",
        },
        files: None,
        pattern: None,
        force: false,
        validation_mode: "",
        size_limit: 10,
        max_files: 0,
        split_size: 0,
        purge: false,
        disable_variant_check: false,
        return_failed_only: false,
        on_error: "abort",
    },
)


---------- Input ----------
COPY INTO mytable
                FROM 's3://mybucket/data.csv'
                CONNECTION = (
                    ENDPOINT_URL = 'http://127.0.0.1:9900'
                )
                size_limit=10
                FILE_FORMAT = (
                    type = CSV
                    field_delimiter = ','
                    record_delimiter = '\n'
                    skip_header = 1
                );
---------- Output ---------
COPY INTO mytable FROM 's3://mybucket/data.csv' CONNECTION = ( endpoint_url = '******900' ) FILE_FORMAT = (field_delimiter = ',', record_delimiter = '
', skip_header = '1', type = 'CSV') SIZE_LIMIT = 10 PURGE = false FORCE = false DISABLE_VARIANT_CHECK = false ON_ERROR = abort
---------- AST ------------
CopyIntoTable(
    CopyIntoTableStmt {
        src: Location(
            Uri(
                UriLocation {
                    protocol: "s3",
                    name: "mybucket",
                    path: "/data.csv",
                    part_prefix: "",
                    connection: Connection {
                        visited_keys: {},
                        conns: {
                            "endpoint_url": "http://127.0.0.1:9900",
                        },
                    },
                },
            ),
        ),
        dst: TableRef {
            catalog: None,
            database: None,
            table: Identifier {
                span: Some(
                    10..17,
                ),
                name: "mytable",
                quote: None,
            },
        },
        dst_columns: None,
        hints: None,
        file_format: {
            "field_delimiter": ",",
            "record_delimiter": "\n",
            "skip_header": "1",
            "type": "CSV",
        },
        files: None,
        pattern: None,
        force: false,
        validation_mode: "",
        size_limit: 10,
        max_files: 0,
        split_size: 0,
        purge: false,
        disable_variant_check: false,
        return_failed_only: false,
        on_error: "abort",
    },
)


---------- Input ----------
COPY INTO mytable
                FROM 'https://127.0.0.1:9900';
---------- Output ---------
COPY INTO mytable FROM 'https://127.0.0.1:9900/' PURGE = false FORCE = false DISABLE_VARIANT_CHECK = false ON_ERROR = abort
---------- AST ------------
CopyIntoTable(
    CopyIntoTableStmt {
        src: Location(
            Uri(
                UriLocation {
                    protocol: "https",
                    name: "127.0.0.1:9900",
                    path: "/",
                    part_prefix: "",
                    connection: Connection {
                        visited_keys: {},
                        conns: {},
                    },
                },
            ),
        ),
        dst: TableRef {
            catalog: None,
            database: None,
            table: Identifier {
                span: Some(
                    10..17,
                ),
                name: "mytable",
                quote: None,
            },
        },
        dst_columns: None,
        hints: None,
        file_format: {},
        files: None,
        pattern: None,
        force: false,
        validation_mode: "",
        size_limit: 0,
        max_files: 0,
        split_size: 0,
        purge: false,
        disable_variant_check: false,
        return_failed_only: false,
        on_error: "abort",
    },
)


---------- Input ----------
COPY INTO mytable
                FROM 'https://127.0.0.1:';
---------- Output ---------
COPY INTO mytable FROM 'https://127.0.0.1/' PURGE = false FORCE = false DISABLE_VARIANT_CHECK = false ON_ERROR = abort
---------- AST ------------
CopyIntoTable(
    CopyIntoTableStmt {
        src: Location(
            Uri(
                UriLocation {
                    protocol: "https",
                    name: "127.0.0.1",
                    path: "/",
                    part_prefix: "",
                    connection: Connection {
                        visited_keys: {},
                        conns: {},
                    },
                },
            ),
        ),
        dst: TableRef {
            catalog: None,
            database: None,
            table: Identifier {
                span: Some(
                    10..17,
                ),
                name: "mytable",
                quote: None,
            },
        },
        dst_columns: None,
        hints: None,
        file_format: {},
        files: None,
        pattern: None,
        force: false,
        validation_mode: "",
        size_limit: 0,
        max_files: 0,
        split_size: 0,
        purge: false,
        disable_variant_check: false,
        return_failed_only: false,
        on_error: "abort",
    },
)


---------- Input ----------
COPY INTO mytable
                FROM @my_stage
                FILE_FORMAT = (
                    type = CSV,
                    field_delimiter = ',',
                    record_delimiter = '\n',
                    skip_header = 1,
                    error_on_column_count_mismatch = FALSE
                )
                size_limit=10;
---------- Output ---------
COPY INTO mytable FROM @my_stage FILE_FORMAT = (error_on_column_count_mismatch = 'false', field_delimiter = ',', record_delimiter = '
', skip_header = '1', type = 'CSV') SIZE_LIMIT = 10 PURGE = false FORCE = false DISABLE_VARIANT_CHECK = false ON_ERROR = abort
---------- AST ------------
CopyIntoTable(
    CopyIntoTableStmt {
        src: Location(
            Stage(
                "my_stage",
            ),
        ),
        dst: TableRef {
            catalog: None,
            database: None,
            table: Identifier {
                span: Some(
                    10..17,
                ),
                name: "mytable",
                quote: None,
            },
        },
        dst_columns: None,
        hints: None,
        file_format: {
            "error_on_column_count_mismatch": "false",
            "field_delimiter": ",",
            "record_delimiter": "\n",
            "skip_header": "1",
            "type": "CSV",
        },
        files: None,
        pattern: None,
        force: false,
        validation_mode: "",
        size_limit: 10,
        max_files: 0,
        split_size: 0,
        purge: false,
        disable_variant_check: false,
        return_failed_only: false,
        on_error: "abort",
    },
)


---------- Input ----------
COPY INTO 's3://mybucket/data.csv'
                FROM mytable
                FILE_FORMAT = (
                    type = CSV
                    field_delimiter = ','
                    record_delimiter = '\n'
                    skip_header = 1
                )
---------- Output ---------
COPY INTO 's3://mybucket/data.csv' FROM mytable FILE_FORMAT = (field_delimiter = ',', record_delimiter = '
', skip_header = '1', type = 'CSV') SINGLE = false MAX_FILE_SIZE = 0 DETAILED_OUTPUT = false
---------- AST ------------
CopyIntoLocation(
    CopyIntoLocationStmt {
        hints: None,
        src: Table(
            TableRef {
                catalog: None,
                database: None,
                table: Identifier {
                    span: Some(
                        56..63,
                    ),
                    name: "mytable",
                    quote: None,
                },
            },
        ),
        dst: Uri(
            UriLocation {
                protocol: "s3",
                name: "mybucket",
                path: "/data.csv",
                part_prefix: "",
                connection: Connection {
                    visited_keys: {},
                    conns: {},
                },
            },
        ),
        file_format: {
            "field_delimiter": ",",
            "record_delimiter": "\n",
            "skip_header": "1",
            "type": "CSV",
        },
        single: false,
        max_file_size: 0,
        detailed_output: false,
    },
)


---------- Input ----------
COPY INTO '@my_stage/my data'
                FROM mytable;
---------- Output ---------
COPY INTO @my_stage/my data FROM mytable SINGLE = false MAX_FILE_SIZE = 0 DETAILED_OUTPUT = false
---------- AST ------------
CopyIntoLocation(
    CopyIntoLocationStmt {
        hints: None,
        src: Table(
            TableRef {
                catalog: None,
                database: None,
                table: Identifier {
                    span: Some(
                        51..58,
                    ),
                    name: "mytable",
                    quote: None,
                },
            },
        ),
        dst: Stage(
            "my_stage/my data",
        ),
        file_format: {},
        single: false,
        max_file_size: 0,
        detailed_output: false,
    },
)


---------- Input ----------
COPY INTO @my_stage
                FROM mytable
                FILE_FORMAT = (
                    type = CSV
                    field_delimiter = ','
                    record_delimiter = '\n'
                    skip_header = 1
                );
---------- Output ---------
COPY INTO @my_stage FROM mytable FILE_FORMAT = (field_delimiter = ',', record_delimiter = '
', skip_header = '1', type = 'CSV') SINGLE = false MAX_FILE_SIZE = 0 DETAILED_OUTPUT = false
---------- AST ------------
CopyIntoLocation(
    CopyIntoLocationStmt {
        hints: None,
        src: Table(
            TableRef {
                catalog: None,
                database: None,
                table: Identifier {
                    span: Some(
                        41..48,
                    ),
                    name: "mytable",
                    quote: None,
                },
            },
        ),
        dst: Stage(
            "my_stage",
        ),
        file_format: {
            "field_delimiter": ",",
            "record_delimiter": "\n",
            "skip_header": "1",
            "type": "CSV",
        },
        single: false,
        max_file_size: 0,
        detailed_output: false,
    },
)


---------- Input ----------
COPY INTO mytable
                FROM 's3://mybucket/data.csv'
                CREDENTIALS = (
                    AWS_KEY_ID = 'access_key'
                    AWS_SECRET_KEY = 'secret_key'
                )
                FILE_FORMAT = (
                    type = CSV
                    field_delimiter = ','
                    record_delimiter = '\n'
                    skip_header = 1
                )
                size_limit=10;
---------- Output ---------
COPY INTO mytable FROM 's3://mybucket/data.csv' CONNECTION = ( aws_key_id = '******key', aws_secret_key = '******key' ) FILE_FORMAT = (field_delimiter = ',', record_delimiter = '
', skip_header = '1', type = 'CSV') SIZE_LIMIT = 10 PURGE = false FORCE = false DISABLE_VARIANT_CHECK = false ON_ERROR = abort
---------- AST ------------
CopyIntoTable(
    CopyIntoTableStmt {
        src: Location(
            Uri(
                UriLocation {
                    protocol: "s3",
                    name: "mybucket",
                    path: "/data.csv",
                    part_prefix: "",
                    connection: Connection {
                        visited_keys: {},
                        conns: {
                            "aws_key_id": "access_key",
                            "aws_secret_key": "secret_key",
                        },
                    },
                },
            ),
        ),
        dst: TableRef {
            catalog: None,
            database: None,
            table: Identifier {
                span: Some(
                    10..17,
                ),
                name: "mytable",
                quote: None,
            },
        },
        dst_columns: None,
        hints: None,
        file_format: {
            "field_delimiter": ",",
            "record_delimiter": "\n",
            "skip_header": "1",
            "type": "CSV",
        },
        files: None,
        pattern: None,
        force: false,
        validation_mode: "",
        size_limit: 10,
        max_files: 0,
        split_size: 0,
        purge: false,
        disable_variant_check: false,
        return_failed_only: false,
        on_error: "abort",
    },
)


---------- Input ----------
COPY INTO mytable
                FROM @external_stage/path/to/file.csv
                FILE_FORMAT = (
                    type = CSV
                    field_delimiter = ','
                    record_delimiter = '\n'
                    skip_header = 1
                )
                size_limit=10;
---------- Output ---------
COPY INTO mytable FROM @external_stage/path/to/file.csv FILE_FORMAT = (field_delimiter = ',', record_delimiter = '
', skip_header = '1', type = 'CSV') SIZE_LIMIT = 10 PURGE = false FORCE = false DISABLE_VARIANT_CHECK = false ON_ERROR = abort
---------- AST ------------
CopyIntoTable(
    CopyIntoTableStmt {
        src: Location(
            Stage(
                "external_stage/path/to/file.csv",
            ),
        ),
        dst: TableRef {
            catalog: None,
            database: None,
            table: Identifier {
                span: Some(
                    10..17,
                ),
                name: "mytable",
                quote: None,
            },
        },
        dst_columns: None,
        hints: None,
        file_format: {
            "field_delimiter": ",",
            "record_delimiter": "\n",
            "skip_header": "1",
            "type": "CSV",
        },
        files: None,
        pattern: None,
        force: false,
        validation_mode: "",
        size_limit: 10,
        max_files: 0,
        split_size: 0,
        purge: false,
        disable_variant_check: false,
        return_failed_only: false,
        on_error: "abort",
    },
)


---------- Input ----------
COPY INTO mytable
                FROM @external_stage/path/to/dir/
                FILE_FORMAT = (
                    type = CSV
                    field_delimiter = ','
                    record_delimiter = '\n'
                    skip_header = 1
                )
                size_limit=10;
---------- Output ---------
COPY INTO mytable FROM @external_stage/path/to/dir/ FILE_FORMAT = (field_delimiter = ',', record_delimiter = '
', skip_header = '1', type = 'CSV') SIZE_LIMIT = 10 PURGE = false FORCE = false DISABLE_VARIANT_CHECK = false ON_ERROR = abort
---------- AST ------------
CopyIntoTable(
    CopyIntoTableStmt {
        src: Location(
            Stage(
                "external_stage/path/to/dir/",
            ),
        ),
        dst: TableRef {
            catalog: None,
            database: None,
            table: Identifier {
                span: Some(
                    10..17,
                ),
                name: "mytable",
                quote: None,
            },
        },
        dst_columns: None,
        hints: None,
        file_format: {
            "field_delimiter": ",",
            "record_delimiter": "\n",
            "skip_header": "1",
            "type": "CSV",
        },
        files: None,
        pattern: None,
        force: false,
        validation_mode: "",
        size_limit: 10,
        max_files: 0,
        split_size: 0,
        purge: false,
        disable_variant_check: false,
        return_failed_only: false,
        on_error: "abort",
    },
)


---------- Input ----------
COPY INTO mytable
                FROM @external_stage/path/to/file.csv
                FILE_FORMAT = (
                    type = CSV
                    field_delimiter = ','
                    record_delimiter = '\n'
                    skip_header = 1
                )
                force=true;
---------- Output ---------
COPY INTO mytable FROM @external_stage/path/to/file.csv FILE_FORMAT = (field_delimiter = ',', record_delimiter = '
', skip_header = '1', type = 'CSV') PURGE = false FORCE = true DISABLE_VARIANT_CHECK = false ON_ERROR = abort
---------- AST ------------
CopyIntoTable(
    CopyIntoTableStmt {
        src: Location(
            Stage(
                "external_stage/path/to/file.csv",
            ),
        ),
        dst: TableRef {
            catalog: None,
            database: None,
            table: Identifier {
                span: Some(
                    10..17,
                ),
                name: "mytable",
                quote: None,
            },
        },
        dst_columns: None,
        hints: None,
        file_format: {
            "field_delimiter": ",",
            "record_delimiter": "\n",
            "skip_header": "1",
            "type": "CSV",
        },
        files: None,
        pattern: None,
        force: true,
        validation_mode: "",
        size_limit: 0,
        max_files: 0,
        split_size: 0,
        purge: false,
        disable_variant_check: false,
        return_failed_only: false,
        on_error: "abort",
    },
)


---------- Input ----------
COPY INTO mytable
                FROM 'fs:///path/to/data.csv'
                FILE_FORMAT = (
                    type = CSV
                    field_delimiter = ','
                    record_delimiter = '\n'
                    skip_header = 1
                )
                size_limit=10
                disable_variant_check=true;
---------- Output ---------
COPY INTO mytable FROM 'fs:///path/to/data.csv' FILE_FORMAT = (field_delimiter = ',', record_delimiter = '
', skip_header = '1', type = 'CSV') SIZE_LIMIT = 10 PURGE = false FORCE = false DISABLE_VARIANT_CHECK = true ON_ERROR = abort
---------- AST ------------
CopyIntoTable(
    CopyIntoTableStmt {
        src: Location(
            Uri(
                UriLocation {
                    protocol: "fs",
                    name: "",
                    path: "/path/to/data.csv",
                    part_prefix: "",
                    connection: Connection {
                        visited_keys: {},
                        conns: {},
                    },
                },
            ),
        ),
        dst: TableRef {
            catalog: None,
            database: None,
            table: Identifier {
                span: Some(
                    10..17,
                ),
                name: "mytable",
                quote: None,
            },
        },
        dst_columns: None,
        hints: None,
        file_format: {
            "field_delimiter": ",",
            "record_delimiter": "\n",
            "skip_header": "1",
            "type": "CSV",
        },
        files: None,
        pattern: None,
        force: false,
        validation_mode: "",
        size_limit: 10,
        max_files: 0,
        split_size: 0,
        purge: false,
        disable_variant_check: true,
        return_failed_only: false,
        on_error: "abort",
    },
)


---------- Input ----------
COPY INTO books FROM 's3://databend/books.csv'
                CONNECTION = (
                    ENDPOINT_URL = 'http://localhost:9000/',
                    ACCESS_KEY_ID = 'ROOTUSER',
                    SECRET_ACCESS_KEY = 'CHANGEME123',
                    region = 'us-west-2'
                )
                FILE_FORMAT = (type = CSV);
---------- Output ---------
COPY INTO books FROM 's3://databend/books.csv' CONNECTION = ( access_key_id = '******SER', endpoint_url = '******00/', region = '******t-2', secret_access_key = '******123' ) FILE_FORMAT = (type = 'CSV') PURGE = false FORCE = false DISABLE_VARIANT_CHECK = false ON_ERROR = abort
---------- AST ------------
CopyIntoTable(
    CopyIntoTableStmt {
        src: Location(
            Uri(
                UriLocation {
                    protocol: "s3",
                    name: "databend",
                    path: "/books.csv",
                    part_prefix: "",
                    connection: Connection {
                        visited_keys: {},
                        conns: {
                            "access_key_id": "ROOTUSER",
                            "endpoint_url": "http://localhost:9000/",
                            "region": "us-west-2",
                            "secret_access_key": "CHANGEME123",
                        },
                    },
                },
            ),
        ),
        dst: TableRef {
            catalog: None,
            database: None,
            table: Identifier {
                span: Some(
                    10..15,
                ),
                name: "books",
                quote: None,
            },
        },
        dst_columns: None,
        hints: None,
        file_format: {
            "type": "CSV",
        },
        files: None,
        pattern: None,
        force: false,
        validation_mode: "",
        size_limit: 0,
        max_files: 0,
        split_size: 0,
        purge: false,
        disable_variant_check: false,
        return_failed_only: false,
        on_error: "abort",
    },
)


---------- Input ----------
CALL system$test(a)
---------- Output ---------
CALL system$test(a)
---------- AST ------------
Call(
    CallStmt {
        name: "system$test",
        args: [
            "a",
        ],
    },
)


---------- Input ----------
CALL system$test('a')
---------- Output ---------
CALL system$test(a)
---------- AST ------------
Call(
    CallStmt {
        name: "system$test",
        args: [
            "a",
        ],
    },
)


---------- Input ----------
show settings like 'enable%' limit 1
---------- Output ---------
SHOW SETTINGS LIKE 'enable%' LIMIT 1
---------- AST ------------
ShowSettings {
    show_options: Some(
        ShowOptions {
            show_limit: Some(
                Like {
                    pattern: "enable%",
                },
            ),
            limit: Some(
                1,
            ),
        },
    ),
}


---------- Input ----------
show settings where name='max_memory_usage' limit 1
---------- Output ---------
SHOW SETTINGS WHERE (name = 'max_memory_usage') LIMIT 1
---------- AST ------------
ShowSettings {
    show_options: Some(
        ShowOptions {
            show_limit: Some(
                Where {
                    selection: BinaryOp {
                        span: Some(
                            24..25,
                        ),
                        op: Eq,
                        left: ColumnRef {
                            span: Some(
                                20..24,
                            ),
                            column: ColumnRef {
                                database: None,
                                table: None,
                                column: Name(
                                    Identifier {
                                        span: Some(
                                            20..24,
                                        ),
                                        name: "name",
                                        quote: None,
                                    },
                                ),
                            },
                        },
                        right: Literal {
                            span: Some(
                                25..43,
                            ),
                            lit: String(
                                "max_memory_usage",
                            ),
                        },
                    },
                },
            ),
            limit: Some(
                1,
            ),
        },
    ),
}


---------- Input ----------
show functions like 'today%' limit 1
---------- Output ---------
SHOW FUNCTIONS LIKE 'today%' LIMIT 1
---------- AST ------------
ShowFunctions {
    show_options: Some(
        ShowOptions {
            show_limit: Some(
                Like {
                    pattern: "today%",
                },
            ),
            limit: Some(
                1,
            ),
        },
    ),
}


---------- Input ----------
show functions where name='to_day_of_year' limit 1
---------- Output ---------
SHOW FUNCTIONS WHERE (name = 'to_day_of_year') LIMIT 1
---------- AST ------------
ShowFunctions {
    show_options: Some(
        ShowOptions {
            show_limit: Some(
                Where {
                    selection: BinaryOp {
                        span: Some(
                            25..26,
                        ),
                        op: Eq,
                        left: ColumnRef {
                            span: Some(
                                21..25,
                            ),
                            column: ColumnRef {
                                database: None,
                                table: None,
                                column: Name(
                                    Identifier {
                                        span: Some(
                                            21..25,
                                        ),
                                        name: "name",
                                        quote: None,
                                    },
                                ),
                            },
                        },
                        right: Literal {
                            span: Some(
                                26..42,
                            ),
                            lit: String(
                                "to_day_of_year",
                            ),
                        },
                    },
                },
            ),
            limit: Some(
                1,
            ),
        },
    ),
}


---------- Input ----------
show engines like 'FU%' limit 1
---------- Output ---------
SHOW ENGINES LIKE 'FU%' LIMIT 1
---------- AST ------------
ShowEngines {
    show_options: Some(
        ShowOptions {
            show_limit: Some(
                Like {
                    pattern: "FU%",
                },
            ),
            limit: Some(
                1,
            ),
        },
    ),
}


---------- Input ----------
show engines where engine='MEMORY' limit 1
---------- Output ---------
SHOW ENGINES WHERE (engine = 'MEMORY') LIMIT 1
---------- AST ------------
ShowEngines {
    show_options: Some(
        ShowOptions {
            show_limit: Some(
                Where {
                    selection: BinaryOp {
                        span: Some(
                            25..26,
                        ),
                        op: Eq,
                        left: ColumnRef {
                            span: Some(
                                19..25,
                            ),
                            column: ColumnRef {
                                database: None,
                                table: None,
                                column: Name(
                                    Identifier {
                                        span: Some(
                                            19..25,
                                        ),
                                        name: "engine",
                                        quote: None,
                                    },
                                ),
                            },
                        },
                        right: Literal {
                            span: Some(
                                26..34,
                            ),
                            lit: String(
                                "MEMORY",
                            ),
                        },
                    },
                },
            ),
            limit: Some(
                1,
            ),
        },
    ),
}


---------- Input ----------
show metrics like '%parse%' limit 1
---------- Output ---------
SHOW METRICS LIKE '%parse%' LIMIT 1
---------- AST ------------
ShowMetrics {
    show_options: Some(
        ShowOptions {
            show_limit: Some(
                Like {
                    pattern: "%parse%",
                },
            ),
            limit: Some(
                1,
            ),
        },
    ),
}


---------- Input ----------
show metrics where metric='session_connect_numbers' limit 1
---------- Output ---------
SHOW METRICS WHERE (metric = 'session_connect_numbers') LIMIT 1
---------- AST ------------
ShowMetrics {
    show_options: Some(
        ShowOptions {
            show_limit: Some(
                Where {
                    selection: BinaryOp {
                        span: Some(
                            25..26,
                        ),
                        op: Eq,
                        left: ColumnRef {
                            span: Some(
                                19..25,
                            ),
                            column: ColumnRef {
                                database: None,
                                table: None,
                                column: Name(
                                    Identifier {
                                        span: Some(
                                            19..25,
                                        ),
                                        name: "metric",
                                        quote: None,
                                    },
                                ),
                            },
                        },
                        right: Literal {
                            span: Some(
                                26..51,
                            ),
                            lit: String(
                                "session_connect_numbers",
                            ),
                        },
                    },
                },
            ),
            limit: Some(
                1,
            ),
        },
    ),
}


---------- Input ----------
show table_functions like 'fuse%' limit 1
---------- Output ---------
SHOW TABLE_FUNCTIONS LIKE 'fuse%' LIMIT 1
---------- AST ------------
ShowTableFunctions {
    show_options: Some(
        ShowOptions {
            show_limit: Some(
                Like {
                    pattern: "fuse%",
                },
            ),
            limit: Some(
                1,
            ),
        },
    ),
}


---------- Input ----------
show table_functions where name='fuse_snapshot' limit 1
---------- Output ---------
SHOW TABLE_FUNCTIONS WHERE (name = 'fuse_snapshot') LIMIT 1
---------- AST ------------
ShowTableFunctions {
    show_options: Some(
        ShowOptions {
            show_limit: Some(
                Where {
                    selection: BinaryOp {
                        span: Some(
                            31..32,
                        ),
                        op: Eq,
                        left: ColumnRef {
                            span: Some(
                                27..31,
                            ),
                            column: ColumnRef {
                                database: None,
                                table: None,
                                column: Name(
                                    Identifier {
                                        span: Some(
                                            27..31,
                                        ),
                                        name: "name",
                                        quote: None,
                                    },
                                ),
                            },
                        },
                        right: Literal {
                            span: Some(
                                32..47,
                            ),
                            lit: String(
                                "fuse_snapshot",
                            ),
                        },
                    },
                },
            ),
            limit: Some(
                1,
            ),
        },
    ),
}


---------- Input ----------
show indexes like 'test%' limit 1
---------- Output ---------
SHOW INDEXES LIKE 'test%' LIMIT 1
---------- AST ------------
ShowIndexes {
    show_options: Some(
        ShowOptions {
            show_limit: Some(
                Like {
                    pattern: "test%",
                },
            ),
            limit: Some(
                1,
            ),
        },
    ),
}


---------- Input ----------
show indexes where name='test_idx' limit 1
---------- Output ---------
SHOW INDEXES WHERE (name = 'test_idx') LIMIT 1
---------- AST ------------
ShowIndexes {
    show_options: Some(
        ShowOptions {
            show_limit: Some(
                Where {
                    selection: BinaryOp {
                        span: Some(
                            23..24,
                        ),
                        op: Eq,
                        left: ColumnRef {
                            span: Some(
                                19..23,
                            ),
                            column: ColumnRef {
                                database: None,
                                table: None,
                                column: Name(
                                    Identifier {
                                        span: Some(
                                            19..23,
                                        ),
                                        name: "name",
                                        quote: None,
                                    },
                                ),
                            },
                        },
                        right: Literal {
                            span: Some(
                                24..34,
                            ),
                            lit: String(
                                "test_idx",
                            ),
                        },
                    },
                },
            ),
            limit: Some(
                1,
            ),
        },
    ),
}


---------- Input ----------
PRESIGN @my_stage
---------- Output ---------
PRESIGN DOWNLOAD my_stage EXPIRE = 3600
---------- AST ------------
Presign(
    PresignStmt {
        action: Download,
        location: StageLocation(
            "my_stage",
        ),
        expire: 3600s,
        content_type: None,
    },
)


---------- Input ----------
PRESIGN @my_stage/path/to/dir/
---------- Output ---------
PRESIGN DOWNLOAD my_stage/path/to/dir/ EXPIRE = 3600
---------- AST ------------
Presign(
    PresignStmt {
        action: Download,
        location: StageLocation(
            "my_stage/path/to/dir/",
        ),
        expire: 3600s,
        content_type: None,
    },
)


---------- Input ----------
PRESIGN @my_stage/path/to/file
---------- Output ---------
PRESIGN DOWNLOAD my_stage/path/to/file EXPIRE = 3600
---------- AST ------------
Presign(
    PresignStmt {
        action: Download,
        location: StageLocation(
            "my_stage/path/to/file",
        ),
        expire: 3600s,
        content_type: None,
    },
)


---------- Input ----------
PRESIGN @my_stage/my\ file.csv
---------- Output ---------
PRESIGN DOWNLOAD my_stage/my file.csv EXPIRE = 3600
---------- AST ------------
Presign(
    PresignStmt {
        action: Download,
        location: StageLocation(
            "my_stage/my file.csv",
        ),
        expire: 3600s,
        content_type: None,
    },
)


---------- Input ----------
PRESIGN @my_stage/\"file\".csv
---------- Output ---------
PRESIGN DOWNLOAD my_stage/"file".csv EXPIRE = 3600
---------- AST ------------
Presign(
    PresignStmt {
        action: Download,
        location: StageLocation(
            "my_stage/\"file\".csv",
        ),
        expire: 3600s,
        content_type: None,
    },
)


---------- Input ----------
PRESIGN @my_stage/\'file\'.csv
---------- Output ---------
PRESIGN DOWNLOAD my_stage/'file'.csv EXPIRE = 3600
---------- AST ------------
Presign(
    PresignStmt {
        action: Download,
        location: StageLocation(
            "my_stage/'file'.csv",
        ),
        expire: 3600s,
        content_type: None,
    },
)


---------- Input ----------
PRESIGN @my_stage/\\file\\.csv
---------- Output ---------
PRESIGN DOWNLOAD my_stage/\file\.csv EXPIRE = 3600
---------- AST ------------
Presign(
    PresignStmt {
        action: Download,
        location: StageLocation(
            "my_stage/\\file\\.csv",
        ),
        expire: 3600s,
        content_type: None,
    },
)


---------- Input ----------
PRESIGN DOWNLOAD @my_stage/path/to/file
---------- Output ---------
PRESIGN DOWNLOAD my_stage/path/to/file EXPIRE = 3600
---------- AST ------------
Presign(
    PresignStmt {
        action: Download,
        location: StageLocation(
            "my_stage/path/to/file",
        ),
        expire: 3600s,
        content_type: None,
    },
)


---------- Input ----------
PRESIGN UPLOAD @my_stage/path/to/file EXPIRE=7200
---------- Output ---------
PRESIGN UPLOAD my_stage/path/to/file EXPIRE = 7200
---------- AST ------------
Presign(
    PresignStmt {
        action: Upload,
        location: StageLocation(
            "my_stage/path/to/file",
        ),
        expire: 7200s,
        content_type: None,
    },
)


---------- Input ----------
PRESIGN UPLOAD @my_stage/path/to/file EXPIRE=7200 CONTENT_TYPE='application/octet-stream'
---------- Output ---------
PRESIGN UPLOAD my_stage/path/to/file EXPIRE = 7200 CONTENT_TYPE = 'application/octet-stream'
---------- AST ------------
Presign(
    PresignStmt {
        action: Upload,
        location: StageLocation(
            "my_stage/path/to/file",
        ),
        expire: 7200s,
        content_type: Some(
            "application/octet-stream",
        ),
    },
)


---------- Input ----------
PRESIGN UPLOAD @my_stage/path/to/file CONTENT_TYPE='application/octet-stream' EXPIRE=7200
---------- Output ---------
PRESIGN UPLOAD my_stage/path/to/file EXPIRE = 7200 CONTENT_TYPE = 'application/octet-stream'
---------- AST ------------
Presign(
    PresignStmt {
        action: Upload,
        location: StageLocation(
            "my_stage/path/to/file",
        ),
        expire: 7200s,
        content_type: Some(
            "application/octet-stream",
        ),
    },
)


---------- Input ----------
CREATE SHARE ENDPOINT IF NOT EXISTS t URL='http://127.0.0.1' TENANT=x ARGS=(jwks_key_file="https://eks.public/keys" ssl_cert="cert.pem") COMMENT='share endpoint comment';
---------- Output ---------
CREATE SHARE ENDPOINT IF NOT EXISTS t URL='http://127.0.0.1/' TENANT=x ARGS=(jwks_key_file=https://eks.public/keys,ssl_cert=cert.pem,) COMMENT = 'share endpoint comment'
---------- AST ------------
CreateShareEndpoint(
    CreateShareEndpointStmt {
        create_option: CreateIfNotExists,
        endpoint: Identifier {
            span: Some(
                36..37,
            ),
            name: "t",
            quote: None,
        },
        url: UriLocation {
            protocol: "http",
            name: "127.0.0.1",
            path: "/",
            part_prefix: "",
            connection: Connection {
                visited_keys: {},
                conns: {},
            },
        },
        tenant: Identifier {
            span: Some(
                68..69,
            ),
            name: "x",
            quote: None,
        },
        args: {
            "jwks_key_file": "https://eks.public/keys",
            "ssl_cert": "cert.pem",
        },
        comment: Some(
            "share endpoint comment",
        ),
    },
)


---------- Input ----------
CREATE OR REPLACE SHARE ENDPOINT t URL='http://127.0.0.1' TENANT=x ARGS=(jwks_key_file="https://eks.public/keys" ssl_cert="cert.pem") COMMENT='share endpoint comment';
---------- Output ---------
CREATE OR REPLACE SHARE ENDPOINT t URL='http://127.0.0.1/' TENANT=x ARGS=(jwks_key_file=https://eks.public/keys,ssl_cert=cert.pem,) COMMENT = 'share endpoint comment'
---------- AST ------------
CreateShareEndpoint(
    CreateShareEndpointStmt {
        create_option: CreateOrReplace,
        endpoint: Identifier {
            span: Some(
                33..34,
            ),
            name: "t",
            quote: None,
        },
        url: UriLocation {
            protocol: "http",
            name: "127.0.0.1",
            path: "/",
            part_prefix: "",
            connection: Connection {
                visited_keys: {},
                conns: {},
            },
        },
        tenant: Identifier {
            span: Some(
                65..66,
            ),
            name: "x",
            quote: None,
        },
        args: {
            "jwks_key_file": "https://eks.public/keys",
            "ssl_cert": "cert.pem",
        },
        comment: Some(
            "share endpoint comment",
        ),
    },
)


---------- Input ----------
CREATE SHARE t COMMENT='share comment';
---------- Output ---------
CREATE SHARE t COMMENT = 'share comment'
---------- AST ------------
CreateShare(
    CreateShareStmt {
        if_not_exists: false,
        share: Identifier {
            span: Some(
                13..14,
            ),
            name: "t",
            quote: None,
        },
        comment: Some(
            "share comment",
        ),
    },
)


---------- Input ----------
CREATE SHARE IF NOT EXISTS t;
---------- Output ---------
CREATE SHARE IF NOT EXISTS t
---------- AST ------------
CreateShare(
    CreateShareStmt {
        if_not_exists: true,
        share: Identifier {
            span: Some(
                27..28,
            ),
            name: "t",
            quote: None,
        },
        comment: None,
    },
)


---------- Input ----------
DROP SHARE a;
---------- Output ---------
DROP SHARE a
---------- AST ------------
DropShare(
    DropShareStmt {
        if_exists: false,
        share: Identifier {
            span: Some(
                11..12,
            ),
            name: "a",
            quote: None,
        },
    },
)


---------- Input ----------
DROP SHARE IF EXISTS a;
---------- Output ---------
DROP SHARE IF EXISTS a
---------- AST ------------
DropShare(
    DropShareStmt {
        if_exists: true,
        share: Identifier {
            span: Some(
                21..22,
            ),
            name: "a",
            quote: None,
        },
    },
)


---------- Input ----------
GRANT USAGE ON DATABASE db1 TO SHARE a;
---------- Output ---------
GRANT USAGE ON DATABASE db1 TO SHARE a
---------- AST ------------
GrantShareObject(
    GrantShareObjectStmt {
        share: Identifier {
            span: Some(
                37..38,
            ),
            name: "a",
            quote: None,
        },
        object: Database(
            "db1",
        ),
        privilege: Usage,
    },
)


---------- Input ----------
GRANT SELECT ON TABLE db1.tb1 TO SHARE a;
---------- Output ---------
GRANT SELECT ON TABLE db1.tb1 TO SHARE a
---------- AST ------------
GrantShareObject(
    GrantShareObjectStmt {
        share: Identifier {
            span: Some(
                39..40,
            ),
            name: "a",
            quote: None,
        },
        object: Table(
            "db1",
            "tb1",
        ),
        privilege: Select,
    },
)


---------- Input ----------
GRANT all ON stage s1 TO a;
---------- Output ---------
GRANT ALL PRIVILEGES ON STAGE s1 TO USER 'a'@'%'
---------- AST ------------
Grant(
    GrantStmt {
        source: ALL {
            level: Stage(
                "s1",
            ),
        },
        principal: User(
            UserIdentity {
                username: "a",
                hostname: "%",
            },
        ),
    },
)


---------- Input ----------
GRANT read ON stage s1 TO a;
---------- Output ---------
GRANT Read ON STAGE s1 TO USER 'a'@'%'
---------- AST ------------
Grant(
    GrantStmt {
        source: Privs {
            privileges: [
                Read,
            ],
            level: Stage(
                "s1",
            ),
        },
        principal: User(
            UserIdentity {
                username: "a",
                hostname: "%",
            },
        ),
    },
)


---------- Input ----------
GRANT write ON stage s1 TO a;
---------- Output ---------
GRANT Write ON STAGE s1 TO USER 'a'@'%'
---------- AST ------------
Grant(
    GrantStmt {
        source: Privs {
            privileges: [
                Write,
            ],
            level: Stage(
                "s1",
            ),
        },
        principal: User(
            UserIdentity {
                username: "a",
                hostname: "%",
            },
        ),
    },
)


---------- Input ----------
REVOKE write ON stage s1 FROM a;
---------- Output ---------
REVOKE Write ON STAGE s1 FROM USER 'a'@'%'
---------- AST ------------
Revoke(
    RevokeStmt {
        source: Privs {
            privileges: [
                Write,
            ],
            level: Stage(
                "s1",
            ),
        },
        principal: User(
            UserIdentity {
                username: "a",
                hostname: "%",
            },
        ),
    },
)


---------- Input ----------
GRANT all ON UDF a TO 'test-grant';
---------- Output ---------
GRANT USAGE ON UDF a TO USER 'test-grant'@'%'
---------- AST ------------
Grant(
    GrantStmt {
        source: Privs {
            privileges: [
                Usage,
            ],
            level: UDF(
                "a",
            ),
        },
        principal: User(
            UserIdentity {
                username: "test-grant",
                hostname: "%",
            },
        ),
    },
)


---------- Input ----------
GRANT usage ON UDF a TO 'test-grant';
---------- Output ---------
GRANT USAGE ON UDF a TO USER 'test-grant'@'%'
---------- AST ------------
Grant(
    GrantStmt {
        source: Privs {
            privileges: [
                Usage,
            ],
            level: UDF(
                "a",
            ),
        },
        principal: User(
            UserIdentity {
                username: "test-grant",
                hostname: "%",
            },
        ),
    },
)


---------- Input ----------
REVOKE usage ON UDF a FROM 'test-grant';
---------- Output ---------
REVOKE USAGE ON UDF a FROM USER 'test-grant'@'%'
---------- AST ------------
Revoke(
    RevokeStmt {
        source: Privs {
            privileges: [
                Usage,
            ],
            level: UDF(
                "a",
            ),
        },
        principal: User(
            UserIdentity {
                username: "test-grant",
                hostname: "%",
            },
        ),
    },
)


---------- Input ----------
REVOKE all ON UDF a FROM 'test-grant';
---------- Output ---------
REVOKE USAGE ON UDF a FROM USER 'test-grant'@'%'
---------- AST ------------
Revoke(
    RevokeStmt {
        source: Privs {
            privileges: [
                Usage,
            ],
            level: UDF(
                "a",
            ),
        },
        principal: User(
            UserIdentity {
                username: "test-grant",
                hostname: "%",
            },
        ),
    },
)


---------- Input ----------
REVOKE USAGE ON DATABASE db1 FROM SHARE a;
---------- Output ---------
REVOKE USAGE ON DATABASE db1 FROM SHARE a
---------- AST ------------
RevokeShareObject(
    RevokeShareObjectStmt {
        share: Identifier {
            span: Some(
                40..41,
            ),
            name: "a",
            quote: None,
        },
        object: Database(
            "db1",
        ),
        privilege: Usage,
    },
)


---------- Input ----------
REVOKE SELECT ON TABLE db1.tb1 FROM SHARE a;
---------- Output ---------
REVOKE SELECT ON TABLE db1.tb1 FROM SHARE a
---------- AST ------------
RevokeShareObject(
    RevokeShareObjectStmt {
        share: Identifier {
            span: Some(
                42..43,
            ),
            name: "a",
            quote: None,
        },
        object: Table(
            "db1",
            "tb1",
        ),
        privilege: Select,
    },
)


---------- Input ----------
ALTER SHARE a ADD TENANTS = b,c;
---------- Output ---------
ALTER SHARE a ADD TENANTS = b,c
---------- AST ------------
AlterShareTenants(
    AlterShareTenantsStmt {
        share: Identifier {
            span: Some(
                12..13,
            ),
            name: "a",
            quote: None,
        },
        if_exists: false,
        tenants: [
            Identifier {
                span: Some(
                    28..29,
                ),
                name: "b",
                quote: None,
            },
            Identifier {
                span: Some(
                    30..31,
                ),
                name: "c",
                quote: None,
            },
        ],
        is_add: true,
    },
)


---------- Input ----------
ALTER SHARE IF EXISTS a ADD TENANTS = b,c;
---------- Output ---------
ALTER SHARE IF EXISTS a ADD TENANTS = b,c
---------- AST ------------
AlterShareTenants(
    AlterShareTenantsStmt {
        share: Identifier {
            span: Some(
                22..23,
            ),
            name: "a",
            quote: None,
        },
        if_exists: true,
        tenants: [
            Identifier {
                span: Some(
                    38..39,
                ),
                name: "b",
                quote: None,
            },
            Identifier {
                span: Some(
                    40..41,
                ),
                name: "c",
                quote: None,
            },
        ],
        is_add: true,
    },
)


---------- Input ----------
ALTER SHARE IF EXISTS a REMOVE TENANTS = b,c;
---------- Output ---------
ALTER SHARE IF EXISTS a REMOVE TENANTS = b,c
---------- AST ------------
AlterShareTenants(
    AlterShareTenantsStmt {
        share: Identifier {
            span: Some(
                22..23,
            ),
            name: "a",
            quote: None,
        },
        if_exists: true,
        tenants: [
            Identifier {
                span: Some(
                    41..42,
                ),
                name: "b",
                quote: None,
            },
            Identifier {
                span: Some(
                    43..44,
                ),
                name: "c",
                quote: None,
            },
        ],
        is_add: false,
    },
)


---------- Input ----------
DESC SHARE b;
---------- Output ---------
DESC SHARE b
---------- AST ------------
DescShare(
    DescShareStmt {
        share: Identifier {
            span: Some(
                11..12,
            ),
            name: "b",
            quote: None,
        },
    },
)


---------- Input ----------
DESCRIBE SHARE b;
---------- Output ---------
DESC SHARE b
---------- AST ------------
DescShare(
    DescShareStmt {
        share: Identifier {
            span: Some(
                15..16,
            ),
            name: "b",
            quote: None,
        },
    },
)


---------- Input ----------
SHOW SHARES;
---------- Output ---------
SHOW SHARES
---------- AST ------------
ShowShares(
    ShowSharesStmt,
)


---------- Input ----------
SHOW GRANTS ON TABLE db1.tb1;
---------- Output ---------
SHOW GRANTS ON TABLE db1.tb1
---------- AST ------------
ShowObjectGrantPrivileges(
    ShowObjectGrantPrivilegesStmt {
        object: Table(
            "db1",
            "tb1",
        ),
    },
)


---------- Input ----------
SHOW GRANTS ON DATABASE db;
---------- Output ---------
SHOW GRANTS ON DATABASE db
---------- AST ------------
ShowObjectGrantPrivileges(
    ShowObjectGrantPrivilegesStmt {
        object: Database(
            "db",
        ),
    },
)


---------- Input ----------
SHOW GRANTS OF SHARE t;
---------- Output ---------
SHOW GRANTS OF SHARE t
---------- AST ------------
ShowGrantsOfShare(
    ShowGrantsOfShareStmt {
        share_name: "t",
    },
)


---------- Input ----------
UPDATE db1.tb1 set a = a + 1, b = 2 WHERE c > 3;
---------- Output ---------
UPDATE db1.tb1 SET a = (a + 1), b = 2 WHERE (c > 3)
---------- AST ------------
Update(
    UpdateStmt {
        hints: None,
        table: Table {
            span: Some(
                7..14,
            ),
            catalog: None,
            database: Some(
                Identifier {
                    span: Some(
                        7..10,
                    ),
                    name: "db1",
                    quote: None,
                },
            ),
            table: Identifier {
                span: Some(
                    11..14,
                ),
                name: "tb1",
                quote: None,
            },
            alias: None,
            travel_point: None,
            since_point: None,
            pivot: None,
            unpivot: None,
        },
        update_list: [
            UpdateExpr {
                name: Identifier {
                    span: Some(
                        19..20,
                    ),
                    name: "a",
                    quote: None,
                },
                expr: BinaryOp {
                    span: Some(
                        25..26,
                    ),
                    op: Plus,
                    left: ColumnRef {
                        span: Some(
                            23..24,
                        ),
                        column: ColumnRef {
                            database: None,
                            table: None,
                            column: Name(
                                Identifier {
                                    span: Some(
                                        23..24,
                                    ),
                                    name: "a",
                                    quote: None,
                                },
                            ),
                        },
                    },
                    right: Literal {
                        span: Some(
                            27..28,
                        ),
                        lit: UInt64(
                            1,
                        ),
                    },
                },
            },
            UpdateExpr {
                name: Identifier {
                    span: Some(
                        30..31,
                    ),
                    name: "b",
                    quote: None,
                },
                expr: Literal {
                    span: Some(
                        34..35,
                    ),
                    lit: UInt64(
                        2,
                    ),
                },
            },
        ],
        selection: Some(
            BinaryOp {
                span: Some(
                    44..45,
                ),
                op: Gt,
                left: ColumnRef {
                    span: Some(
                        42..43,
                    ),
                    column: ColumnRef {
                        database: None,
                        table: None,
                        column: Name(
                            Identifier {
                                span: Some(
                                    42..43,
                                ),
                                name: "c",
                                quote: None,
                            },
                        ),
                    },
                },
                right: Literal {
                    span: Some(
                        46..47,
                    ),
                    lit: UInt64(
                        3,
                    ),
                },
            },
        ),
    },
)


---------- Input ----------
SET max_threads = 10;
---------- Output ---------
SET max_threads = 10
---------- AST ------------
SetVariable {
    is_global: false,
    variable: Identifier {
        span: Some(
            4..15,
        ),
        name: "max_threads",
        quote: None,
    },
    value: Literal {
        span: Some(
            18..20,
        ),
        lit: UInt64(
            10,
        ),
    },
}


---------- Input ----------
SET max_threads = 10*2;
---------- Output ---------
SET max_threads = (10 * 2)
---------- AST ------------
SetVariable {
    is_global: false,
    variable: Identifier {
        span: Some(
            4..15,
        ),
        name: "max_threads",
        quote: None,
    },
    value: BinaryOp {
        span: Some(
            20..21,
        ),
        op: Multiply,
        left: Literal {
            span: Some(
                18..20,
            ),
            lit: UInt64(
                10,
            ),
        },
        right: Literal {
            span: Some(
                21..22,
            ),
            lit: UInt64(
                2,
            ),
        },
    },
}


---------- Input ----------
UNSET max_threads;
---------- Output ---------
UNSET max_threads
---------- AST ------------
UnSetVariable(
    UnSetStmt {
        source: Var {
            variable: Identifier {
                span: Some(
                    6..17,
                ),
                name: "max_threads",
                quote: None,
            },
        },
    },
)


---------- Input ----------
UNSET (max_threads, sql_dialect);
---------- Output ---------
UNSET (max_threads, sql_dialect)
---------- AST ------------
UnSetVariable(
    UnSetStmt {
        source: Vars {
            variables: [
                Identifier {
                    span: Some(
                        7..18,
                    ),
                    name: "max_threads",
                    quote: None,
                },
                Identifier {
                    span: Some(
                        20..31,
                    ),
                    name: "sql_dialect",
                    quote: None,
                },
            ],
        },
    },
)


---------- Input ----------
select $1 FROM '@my_stage/my data/'
---------- Output ---------
SELECT $1 FROM @my_stage/my data/
---------- AST ------------
Query(
    Query {
        span: Some(
            0..35,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..35,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    AliasedExpr {
                        expr: ColumnRef {
                            span: Some(
                                7..9,
                            ),
                            column: ColumnRef {
                                database: None,
                                table: None,
                                column: Position(
                                    ColumnPosition {
                                        span: Some(
                                            7..9,
                                        ),
                                        pos: 1,
                                        name: "$1",
                                    },
                                ),
                            },
                        },
                        alias: None,
                    },
                ],
                from: [
                    Location {
                        span: Some(
                            15..35,
                        ),
                        location: Stage(
                            "my_stage/my data/",
                        ),
                        options: SelectStageOptions {
                            files: None,
                            pattern: None,
                            file_format: None,
                            connection: {},
                        },
                        alias: None,
                    },
                ],
                selection: None,
                group_by: None,
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
SELECT t.c1 FROM @stage1/dir/file
        ( file_format => 'PARQUET', FILES => ('file1', 'file2')) t;
---------- Output ---------
SELECT t.c1 FROM @stage1/dir/file ( FILES => ('file1', 'file2'), FILE_FORMAT => 'PARQUET', ) AS t
---------- AST ------------
Query(
    Query {
        span: Some(
            0..100,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..100,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    AliasedExpr {
                        expr: ColumnRef {
                            span: Some(
                                7..8,
                            ),
                            column: ColumnRef {
                                database: None,
                                table: Some(
                                    Identifier {
                                        span: Some(
                                            7..8,
                                        ),
                                        name: "t",
                                        quote: None,
                                    },
                                ),
                                column: Name(
                                    Identifier {
                                        span: Some(
                                            9..11,
                                        ),
                                        name: "c1",
                                        quote: None,
                                    },
                                ),
                            },
                        },
                        alias: None,
                    },
                ],
                from: [
                    Location {
                        span: Some(
                            17..100,
                        ),
                        location: Stage(
                            "stage1/dir/file",
                        ),
                        options: SelectStageOptions {
                            files: Some(
                                [
                                    "file1",
                                    "file2",
                                ],
                            ),
                            pattern: None,
                            file_format: Some(
                                "PARQUET",
                            ),
                            connection: {},
                        },
                        alias: Some(
                            TableAlias {
                                name: Identifier {
                                    span: Some(
                                        99..100,
                                    ),
                                    name: "t",
                                    quote: None,
                                },
                                columns: [],
                            },
                        ),
                    },
                ],
                selection: None,
                group_by: None,
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
select table0.c1, table1.c2 from
            @stage1/dir/file ( FILE_FORMAT => 'parquet', FILES => ('file1', 'file2')) table0
            left join table1;
---------- Output ---------
SELECT table0.c1, table1.c2 FROM @stage1/dir/file ( FILES => ('file1', 'file2'), FILE_FORMAT => 'parquet', ) AS table0 LEFT OUTER JOIN table1
---------- AST ------------
Query(
    Query {
        span: Some(
            0..154,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..154,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    AliasedExpr {
                        expr: ColumnRef {
                            span: Some(
                                7..13,
                            ),
                            column: ColumnRef {
                                database: None,
                                table: Some(
                                    Identifier {
                                        span: Some(
                                            7..13,
                                        ),
                                        name: "table0",
                                        quote: None,
                                    },
                                ),
                                column: Name(
                                    Identifier {
                                        span: Some(
                                            14..16,
                                        ),
                                        name: "c1",
                                        quote: None,
                                    },
                                ),
                            },
                        },
                        alias: None,
                    },
                    AliasedExpr {
                        expr: ColumnRef {
                            span: Some(
                                18..24,
                            ),
                            column: ColumnRef {
                                database: None,
                                table: Some(
                                    Identifier {
                                        span: Some(
                                            18..24,
                                        ),
                                        name: "table1",
                                        quote: None,
                                    },
                                ),
                                column: Name(
                                    Identifier {
                                        span: Some(
                                            25..27,
                                        ),
                                        name: "c2",
                                        quote: None,
                                    },
                                ),
                            },
                        },
                        alias: None,
                    },
                ],
                from: [
                    Join {
                        span: Some(
                            138..147,
                        ),
                        join: Join {
                            op: LeftOuter,
                            condition: None,
                            left: Location {
                                span: Some(
                                    45..125,
                                ),
                                location: Stage(
                                    "stage1/dir/file",
                                ),
                                options: SelectStageOptions {
                                    files: Some(
                                        [
                                            "file1",
                                            "file2",
                                        ],
                                    ),
                                    pattern: None,
                                    file_format: Some(
                                        "parquet",
                                    ),
                                    connection: {},
                                },
                                alias: Some(
                                    TableAlias {
                                        name: Identifier {
                                            span: Some(
                                                119..125,
                                            ),
                                            name: "table0",
                                            quote: None,
                                        },
                                        columns: [],
                                    },
                                ),
                            },
                            right: Table {
                                span: Some(
                                    148..154,
                                ),
                                catalog: None,
                                database: None,
                                table: Identifier {
                                    span: Some(
                                        148..154,
                                    ),
                                    name: "table1",
                                    quote: None,
                                },
                                alias: None,
                                travel_point: None,
                                since_point: None,
                                pivot: None,
                                unpivot: None,
                            },
                        },
                    },
                ],
                selection: None,
                group_by: None,
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
SELECT c1 FROM 's3://test/bucket' (PATTERN => '*.parquet', connection => (ENDPOINT_URL = 'xxx')) t;
---------- Output ---------
SELECT c1 FROM 's3://test/bucket' ( PATTERN => '*.parquet', CONNECTION => (endpoint_url = 'xxx' ) ) AS t
---------- AST ------------
Query(
    Query {
        span: Some(
            0..98,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..98,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    AliasedExpr {
                        expr: ColumnRef {
                            span: Some(
                                7..9,
                            ),
                            column: ColumnRef {
                                database: None,
                                table: None,
                                column: Name(
                                    Identifier {
                                        span: Some(
                                            7..9,
                                        ),
                                        name: "c1",
                                        quote: None,
                                    },
                                ),
                            },
                        },
                        alias: None,
                    },
                ],
                from: [
                    Location {
                        span: Some(
                            15..98,
                        ),
                        location: Uri(
                            UriLocation {
                                protocol: "s3",
                                name: "test",
                                path: "/bucket",
                                part_prefix: "",
                                connection: Connection {
                                    visited_keys: {},
                                    conns: {},
                                },
                            },
                        ),
                        options: SelectStageOptions {
                            files: None,
                            pattern: Some(
                                "*.parquet",
                            ),
                            file_format: None,
                            connection: {
                                "endpoint_url": "xxx",
                            },
                        },
                        alias: Some(
                            TableAlias {
                                name: Identifier {
                                    span: Some(
                                        97..98,
                                    ),
                                    name: "t",
                                    quote: None,
                                },
                                columns: [],
                            },
                        ),
                    },
                ],
                selection: None,
                group_by: None,
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
CREATE FILE FORMAT my_csv
            type = CSV field_delimiter = ',' record_delimiter = '\n' skip_header = 1;
---------- Output ---------
CREATE FILE_FORMAT my_csv {"field_delimiter": ",", "record_delimiter": "\n", "skip_header": "1", "type": "CSV"}
---------- AST ------------
CreateFileFormat {
    create_option: None,
    name: "my_csv",
    file_format_options: FileFormatOptionsAst {
        options: {
            "field_delimiter": ",",
            "record_delimiter": "\n",
            "skip_header": "1",
            "type": "CSV",
        },
    },
}


---------- Input ----------
CREATE OR REPLACE FILE FORMAT my_csv
            type = CSV field_delimiter = ',' record_delimiter = '\n' skip_header = 1;
---------- Output ---------
CREATE OR REPLACE FILE_FORMAT my_csv {"field_delimiter": ",", "record_delimiter": "\n", "skip_header": "1", "type": "CSV"}
---------- AST ------------
CreateFileFormat {
    create_option: CreateOrReplace,
    name: "my_csv",
    file_format_options: FileFormatOptionsAst {
        options: {
            "field_delimiter": ",",
            "record_delimiter": "\n",
            "skip_header": "1",
            "type": "CSV",
        },
    },
}


---------- Input ----------
SHOW FILE FORMATS
---------- Output ---------
SHOW FILE FORMATS
---------- AST ------------
ShowFileFormats


---------- Input ----------
DROP FILE FORMAT my_csv
---------- Output ---------
DROP FILE_FORMAT my_csv
---------- AST ------------
DropFileFormat {
    if_exists: false,
    name: "my_csv",
}


---------- Input ----------
SELECT * FROM t GROUP BY GROUPING SETS (a, b, c, d)
---------- Output ---------
SELECT * FROM t GROUP BY GROUPING SETS ((a), (b), (c), (d))
---------- AST ------------
Query(
    Query {
        span: Some(
            0..51,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..51,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    StarColumns {
                        qualified: [
                            Star(
                                Some(
                                    7..8,
                                ),
                            ),
                        ],
                        column_filter: None,
                    },
                ],
                from: [
                    Table {
                        span: Some(
                            14..15,
                        ),
                        catalog: None,
                        database: None,
                        table: Identifier {
                            span: Some(
                                14..15,
                            ),
                            name: "t",
                            quote: None,
                        },
                        alias: None,
                        travel_point: None,
                        since_point: None,
                        pivot: None,
                        unpivot: None,
                    },
                ],
                selection: None,
                group_by: Some(
                    GroupingSets(
                        [
                            [
                                ColumnRef {
                                    span: Some(
                                        40..41,
                                    ),
                                    column: ColumnRef {
                                        database: None,
                                        table: None,
                                        column: Name(
                                            Identifier {
                                                span: Some(
                                                    40..41,
                                                ),
                                                name: "a",
                                                quote: None,
                                            },
                                        ),
                                    },
                                },
                            ],
                            [
                                ColumnRef {
                                    span: Some(
                                        43..44,
                                    ),
                                    column: ColumnRef {
                                        database: None,
                                        table: None,
                                        column: Name(
                                            Identifier {
                                                span: Some(
                                                    43..44,
                                                ),
                                                name: "b",
                                                quote: None,
                                            },
                                        ),
                                    },
                                },
                            ],
                            [
                                ColumnRef {
                                    span: Some(
                                        46..47,
                                    ),
                                    column: ColumnRef {
                                        database: None,
                                        table: None,
                                        column: Name(
                                            Identifier {
                                                span: Some(
                                                    46..47,
                                                ),
                                                name: "c",
                                                quote: None,
                                            },
                                        ),
                                    },
                                },
                            ],
                            [
                                ColumnRef {
                                    span: Some(
                                        49..50,
                                    ),
                                    column: ColumnRef {
                                        database: None,
                                        table: None,
                                        column: Name(
                                            Identifier {
                                                span: Some(
                                                    49..50,
                                                ),
                                                name: "d",
                                                quote: None,
                                            },
                                        ),
                                    },
                                },
                            ],
                        ],
                    ),
                ),
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
SELECT * FROM t GROUP BY GROUPING SETS (a, b, (c, d))
---------- Output ---------
SELECT * FROM t GROUP BY GROUPING SETS ((a), (b), (c, d))
---------- AST ------------
Query(
    Query {
        span: Some(
            0..53,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..53,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    StarColumns {
                        qualified: [
                            Star(
                                Some(
                                    7..8,
                                ),
                            ),
                        ],
                        column_filter: None,
                    },
                ],
                from: [
                    Table {
                        span: Some(
                            14..15,
                        ),
                        catalog: None,
                        database: None,
                        table: Identifier {
                            span: Some(
                                14..15,
                            ),
                            name: "t",
                            quote: None,
                        },
                        alias: None,
                        travel_point: None,
                        since_point: None,
                        pivot: None,
                        unpivot: None,
                    },
                ],
                selection: None,
                group_by: Some(
                    GroupingSets(
                        [
                            [
                                ColumnRef {
                                    span: Some(
                                        40..41,
                                    ),
                                    column: ColumnRef {
                                        database: None,
                                        table: None,
                                        column: Name(
                                            Identifier {
                                                span: Some(
                                                    40..41,
                                                ),
                                                name: "a",
                                                quote: None,
                                            },
                                        ),
                                    },
                                },
                            ],
                            [
                                ColumnRef {
                                    span: Some(
                                        43..44,
                                    ),
                                    column: ColumnRef {
                                        database: None,
                                        table: None,
                                        column: Name(
                                            Identifier {
                                                span: Some(
                                                    43..44,
                                                ),
                                                name: "b",
                                                quote: None,
                                            },
                                        ),
                                    },
                                },
                            ],
                            [
                                ColumnRef {
                                    span: Some(
                                        47..48,
                                    ),
                                    column: ColumnRef {
                                        database: None,
                                        table: None,
                                        column: Name(
                                            Identifier {
                                                span: Some(
                                                    47..48,
                                                ),
                                                name: "c",
                                                quote: None,
                                            },
                                        ),
                                    },
                                },
                                ColumnRef {
                                    span: Some(
                                        50..51,
                                    ),
                                    column: ColumnRef {
                                        database: None,
                                        table: None,
                                        column: Name(
                                            Identifier {
                                                span: Some(
                                                    50..51,
                                                ),
                                                name: "d",
                                                quote: None,
                                            },
                                        ),
                                    },
                                },
                            ],
                        ],
                    ),
                ),
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
SELECT * FROM t GROUP BY GROUPING SETS ((a, b), (c), (d, e))
---------- Output ---------
SELECT * FROM t GROUP BY GROUPING SETS ((a, b), (c), (d, e))
---------- AST ------------
Query(
    Query {
        span: Some(
            0..60,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..60,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    StarColumns {
                        qualified: [
                            Star(
                                Some(
                                    7..8,
                                ),
                            ),
                        ],
                        column_filter: None,
                    },
                ],
                from: [
                    Table {
                        span: Some(
                            14..15,
                        ),
                        catalog: None,
                        database: None,
                        table: Identifier {
                            span: Some(
                                14..15,
                            ),
                            name: "t",
                            quote: None,
                        },
                        alias: None,
                        travel_point: None,
                        since_point: None,
                        pivot: None,
                        unpivot: None,
                    },
                ],
                selection: None,
                group_by: Some(
                    GroupingSets(
                        [
                            [
                                ColumnRef {
                                    span: Some(
                                        41..42,
                                    ),
                                    column: ColumnRef {
                                        database: None,
                                        table: None,
                                        column: Name(
                                            Identifier {
                                                span: Some(
                                                    41..42,
                                                ),
                                                name: "a",
                                                quote: None,
                                            },
                                        ),
                                    },
                                },
                                ColumnRef {
                                    span: Some(
                                        44..45,
                                    ),
                                    column: ColumnRef {
                                        database: None,
                                        table: None,
                                        column: Name(
                                            Identifier {
                                                span: Some(
                                                    44..45,
                                                ),
                                                name: "b",
                                                quote: None,
                                            },
                                        ),
                                    },
                                },
                            ],
                            [
                                ColumnRef {
                                    span: Some(
                                        49..50,
                                    ),
                                    column: ColumnRef {
                                        database: None,
                                        table: None,
                                        column: Name(
                                            Identifier {
                                                span: Some(
                                                    49..50,
                                                ),
                                                name: "c",
                                                quote: None,
                                            },
                                        ),
                                    },
                                },
                            ],
                            [
                                ColumnRef {
                                    span: Some(
                                        54..55,
                                    ),
                                    column: ColumnRef {
                                        database: None,
                                        table: None,
                                        column: Name(
                                            Identifier {
                                                span: Some(
                                                    54..55,
                                                ),
                                                name: "d",
                                                quote: None,
                                            },
                                        ),
                                    },
                                },
                                ColumnRef {
                                    span: Some(
                                        57..58,
                                    ),
                                    column: ColumnRef {
                                        database: None,
                                        table: None,
                                        column: Name(
                                            Identifier {
                                                span: Some(
                                                    57..58,
                                                ),
                                                name: "e",
                                                quote: None,
                                            },
                                        ),
                                    },
                                },
                            ],
                        ],
                    ),
                ),
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
SELECT * FROM t GROUP BY GROUPING SETS ((a, b), (), (d, e))
---------- Output ---------
SELECT * FROM t GROUP BY GROUPING SETS ((a, b), (), (d, e))
---------- AST ------------
Query(
    Query {
        span: Some(
            0..59,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..59,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    StarColumns {
                        qualified: [
                            Star(
                                Some(
                                    7..8,
                                ),
                            ),
                        ],
                        column_filter: None,
                    },
                ],
                from: [
                    Table {
                        span: Some(
                            14..15,
                        ),
                        catalog: None,
                        database: None,
                        table: Identifier {
                            span: Some(
                                14..15,
                            ),
                            name: "t",
                            quote: None,
                        },
                        alias: None,
                        travel_point: None,
                        since_point: None,
                        pivot: None,
                        unpivot: None,
                    },
                ],
                selection: None,
                group_by: Some(
                    GroupingSets(
                        [
                            [
                                ColumnRef {
                                    span: Some(
                                        41..42,
                                    ),
                                    column: ColumnRef {
                                        database: None,
                                        table: None,
                                        column: Name(
                                            Identifier {
                                                span: Some(
                                                    41..42,
                                                ),
                                                name: "a",
                                                quote: None,
                                            },
                                        ),
                                    },
                                },
                                ColumnRef {
                                    span: Some(
                                        44..45,
                                    ),
                                    column: ColumnRef {
                                        database: None,
                                        table: None,
                                        column: Name(
                                            Identifier {
                                                span: Some(
                                                    44..45,
                                                ),
                                                name: "b",
                                                quote: None,
                                            },
                                        ),
                                    },
                                },
                            ],
                            [],
                            [
                                ColumnRef {
                                    span: Some(
                                        53..54,
                                    ),
                                    column: ColumnRef {
                                        database: None,
                                        table: None,
                                        column: Name(
                                            Identifier {
                                                span: Some(
                                                    53..54,
                                                ),
                                                name: "d",
                                                quote: None,
                                            },
                                        ),
                                    },
                                },
                                ColumnRef {
                                    span: Some(
                                        56..57,
                                    ),
                                    column: ColumnRef {
                                        database: None,
                                        table: None,
                                        column: Name(
                                            Identifier {
                                                span: Some(
                                                    56..57,
                                                ),
                                                name: "e",
                                                quote: None,
                                            },
                                        ),
                                    },
                                },
                            ],
                        ],
                    ),
                ),
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
SELECT * FROM t GROUP BY CUBE (a, b, c)
---------- Output ---------
SELECT * FROM t GROUP BY CUBE (a, b, c)
---------- AST ------------
Query(
    Query {
        span: Some(
            0..39,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..39,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    StarColumns {
                        qualified: [
                            Star(
                                Some(
                                    7..8,
                                ),
                            ),
                        ],
                        column_filter: None,
                    },
                ],
                from: [
                    Table {
                        span: Some(
                            14..15,
                        ),
                        catalog: None,
                        database: None,
                        table: Identifier {
                            span: Some(
                                14..15,
                            ),
                            name: "t",
                            quote: None,
                        },
                        alias: None,
                        travel_point: None,
                        since_point: None,
                        pivot: None,
                        unpivot: None,
                    },
                ],
                selection: None,
                group_by: Some(
                    Cube(
                        [
                            ColumnRef {
                                span: Some(
                                    31..32,
                                ),
                                column: ColumnRef {
                                    database: None,
                                    table: None,
                                    column: Name(
                                        Identifier {
                                            span: Some(
                                                31..32,
                                            ),
                                            name: "a",
                                            quote: None,
                                        },
                                    ),
                                },
                            },
                            ColumnRef {
                                span: Some(
                                    34..35,
                                ),
                                column: ColumnRef {
                                    database: None,
                                    table: None,
                                    column: Name(
                                        Identifier {
                                            span: Some(
                                                34..35,
                                            ),
                                            name: "b",
                                            quote: None,
                                        },
                                    ),
                                },
                            },
                            ColumnRef {
                                span: Some(
                                    37..38,
                                ),
                                column: ColumnRef {
                                    database: None,
                                    table: None,
                                    column: Name(
                                        Identifier {
                                            span: Some(
                                                37..38,
                                            ),
                                            name: "c",
                                            quote: None,
                                        },
                                    ),
                                },
                            },
                        ],
                    ),
                ),
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
SELECT * FROM t GROUP BY ROLLUP (a, b, c)
---------- Output ---------
SELECT * FROM t GROUP BY ROLLUP (a, b, c)
---------- AST ------------
Query(
    Query {
        span: Some(
            0..41,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    0..41,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    StarColumns {
                        qualified: [
                            Star(
                                Some(
                                    7..8,
                                ),
                            ),
                        ],
                        column_filter: None,
                    },
                ],
                from: [
                    Table {
                        span: Some(
                            14..15,
                        ),
                        catalog: None,
                        database: None,
                        table: Identifier {
                            span: Some(
                                14..15,
                            ),
                            name: "t",
                            quote: None,
                        },
                        alias: None,
                        travel_point: None,
                        since_point: None,
                        pivot: None,
                        unpivot: None,
                    },
                ],
                selection: None,
                group_by: Some(
                    Rollup(
                        [
                            ColumnRef {
                                span: Some(
                                    33..34,
                                ),
                                column: ColumnRef {
                                    database: None,
                                    table: None,
                                    column: Name(
                                        Identifier {
                                            span: Some(
                                                33..34,
                                            ),
                                            name: "a",
                                            quote: None,
                                        },
                                    ),
                                },
                            },
                            ColumnRef {
                                span: Some(
                                    36..37,
                                ),
                                column: ColumnRef {
                                    database: None,
                                    table: None,
                                    column: Name(
                                        Identifier {
                                            span: Some(
                                                36..37,
                                            ),
                                            name: "b",
                                            quote: None,
                                        },
                                    ),
                                },
                            },
                            ColumnRef {
                                span: Some(
                                    39..40,
                                ),
                                column: ColumnRef {
                                    database: None,
                                    table: None,
                                    column: Name(
                                        Identifier {
                                            span: Some(
                                                39..40,
                                            ),
                                            name: "c",
                                            quote: None,
                                        },
                                    ),
                                },
                            },
                        ],
                    ),
                ),
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
CREATE MASKING POLICY email_mask AS (val STRING) RETURNS STRING -> CASE WHEN current_role() IN ('ANALYST') THEN VAL ELSE '*********'END comment = 'this is a masking policy'
---------- Output ---------
CREATE MASKING POLICY email_mask AS (val STRING) RETURNS STRING -> CASE WHEN current_role() IN('ANALYST') THEN VAL ELSE '*********' END COMMENT = 'this is a masking policy'
---------- AST ------------
CreateDatamaskPolicy(
    CreateDatamaskPolicyStmt {
        create_option: None,
        name: "email_mask",
        policy: DataMaskPolicy {
            args: [
                DataMaskArg {
                    arg_name: "val",
                    arg_type: String,
                },
            ],
            return_type: String,
            body: Case {
                span: Some(
                    67..135,
                ),
                operand: None,
                conditions: [
                    InList {
                        span: Some(
                            92..106,
                        ),
                        expr: FunctionCall {
                            span: Some(
                                77..91,
                            ),
                            func: FunctionCall {
                                distinct: false,
                                name: Identifier {
                                    span: Some(
                                        77..89,
                                    ),
                                    name: "current_role",
                                    quote: None,
                                },
                                args: [],
                                params: [],
                                window: None,
                                lambda: None,
                            },
                        },
                        list: [
                            Literal {
                                span: Some(
                                    96..105,
                                ),
                                lit: String(
                                    "ANALYST",
                                ),
                            },
                        ],
                        not: false,
                    },
                ],
                results: [
                    ColumnRef {
                        span: Some(
                            112..115,
                        ),
                        column: ColumnRef {
                            database: None,
                            table: None,
                            column: Name(
                                Identifier {
                                    span: Some(
                                        112..115,
                                    ),
                                    name: "VAL",
                                    quote: None,
                                },
                            ),
                        },
                    },
                ],
                else_result: Some(
                    Literal {
                        span: Some(
                            121..132,
                        ),
                        lit: String(
                            "*********",
                        ),
                    },
                ),
            },
            comment: Some(
                "this is a masking policy",
            ),
        },
    },
)


---------- Input ----------
CREATE OR REPLACE MASKING POLICY email_mask AS (val STRING) RETURNS STRING -> CASE WHEN current_role() IN ('ANALYST') THEN VAL ELSE '*********'END comment = 'this is a masking policy'
---------- Output ---------
CREATE OR REPLACE MASKING POLICY email_mask AS (val STRING) RETURNS STRING -> CASE WHEN current_role() IN('ANALYST') THEN VAL ELSE '*********' END COMMENT = 'this is a masking policy'
---------- AST ------------
CreateDatamaskPolicy(
    CreateDatamaskPolicyStmt {
        create_option: CreateOrReplace,
        name: "email_mask",
        policy: DataMaskPolicy {
            args: [
                DataMaskArg {
                    arg_name: "val",
                    arg_type: String,
                },
            ],
            return_type: String,
            body: Case {
                span: Some(
                    78..146,
                ),
                operand: None,
                conditions: [
                    InList {
                        span: Some(
                            103..117,
                        ),
                        expr: FunctionCall {
                            span: Some(
                                88..102,
                            ),
                            func: FunctionCall {
                                distinct: false,
                                name: Identifier {
                                    span: Some(
                                        88..100,
                                    ),
                                    name: "current_role",
                                    quote: None,
                                },
                                args: [],
                                params: [],
                                window: None,
                                lambda: None,
                            },
                        },
                        list: [
                            Literal {
                                span: Some(
                                    107..116,
                                ),
                                lit: String(
                                    "ANALYST",
                                ),
                            },
                        ],
                        not: false,
                    },
                ],
                results: [
                    ColumnRef {
                        span: Some(
                            123..126,
                        ),
                        column: ColumnRef {
                            database: None,
                            table: None,
                            column: Name(
                                Identifier {
                                    span: Some(
                                        123..126,
                                    ),
                                    name: "VAL",
                                    quote: None,
                                },
                            ),
                        },
                    },
                ],
                else_result: Some(
                    Literal {
                        span: Some(
                            132..143,
                        ),
                        lit: String(
                            "*********",
                        ),
                    },
                ),
            },
            comment: Some(
                "this is a masking policy",
            ),
        },
    },
)


---------- Input ----------
DESC MASKING POLICY email_mask
---------- Output ---------
DESCRIBE MASKING POLICY email_mask
---------- AST ------------
DescDatamaskPolicy(
    DescDatamaskPolicyStmt {
        name: "email_mask",
    },
)


---------- Input ----------
DROP MASKING POLICY IF EXISTS email_mask
---------- Output ---------
DROP MASKING POLICY IF EXISTS email_mask
---------- AST ------------
DropDatamaskPolicy(
    DropDatamaskPolicyStmt {
        if_exists: true,
        name: "email_mask",
    },
)


---------- Input ----------
CREATE VIRTUAL COLUMN (a['k1']['k2'], b[0][1]) FOR t
---------- Output ---------
CREATE VIRTUAL COLUMN (a['k1']['k2'], b[0][1]) FOR t
---------- AST ------------
CreateVirtualColumn(
    CreateVirtualColumnStmt {
        create_option: None,
        catalog: None,
        database: None,
        table: Identifier {
            span: Some(
                51..52,
            ),
            name: "t",
            quote: None,
        },
        virtual_columns: [
            MapAccess {
                span: Some(
                    30..36,
                ),
                expr: MapAccess {
                    span: Some(
                        24..30,
                    ),
                    expr: ColumnRef {
                        span: Some(
                            23..24,
                        ),
                        column: ColumnRef {
                            database: None,
                            table: None,
                            column: Name(
                                Identifier {
                                    span: Some(
                                        23..24,
                                    ),
                                    name: "a",
                                    quote: None,
                                },
                            ),
                        },
                    },
                    accessor: Bracket {
                        key: Literal {
                            span: Some(
                                25..29,
                            ),
                            lit: String(
                                "k1",
                            ),
                        },
                    },
                },
                accessor: Bracket {
                    key: Literal {
                        span: Some(
                            31..35,
                        ),
                        lit: String(
                            "k2",
                        ),
                    },
                },
            },
            MapAccess {
                span: Some(
                    42..45,
                ),
                expr: MapAccess {
                    span: Some(
                        39..42,
                    ),
                    expr: ColumnRef {
                        span: Some(
                            38..39,
                        ),
                        column: ColumnRef {
                            database: None,
                            table: None,
                            column: Name(
                                Identifier {
                                    span: Some(
                                        38..39,
                                    ),
                                    name: "b",
                                    quote: None,
                                },
                            ),
                        },
                    },
                    accessor: Bracket {
                        key: Literal {
                            span: Some(
                                40..41,
                            ),
                            lit: UInt64(
                                0,
                            ),
                        },
                    },
                },
                accessor: Bracket {
                    key: Literal {
                        span: Some(
                            43..44,
                        ),
                        lit: UInt64(
                            1,
                        ),
                    },
                },
            },
        ],
    },
)


---------- Input ----------
CREATE OR REPLACE VIRTUAL COLUMN (a['k1']['k2'], b[0][1]) FOR t
---------- Output ---------
CREATE OR REPLACE VIRTUAL COLUMN (a['k1']['k2'], b[0][1]) FOR t
---------- AST ------------
CreateVirtualColumn(
    CreateVirtualColumnStmt {
        create_option: CreateOrReplace,
        catalog: None,
        database: None,
        table: Identifier {
            span: Some(
                62..63,
            ),
            name: "t",
            quote: None,
        },
        virtual_columns: [
            MapAccess {
                span: Some(
                    41..47,
                ),
                expr: MapAccess {
                    span: Some(
                        35..41,
                    ),
                    expr: ColumnRef {
                        span: Some(
                            34..35,
                        ),
                        column: ColumnRef {
                            database: None,
                            table: None,
                            column: Name(
                                Identifier {
                                    span: Some(
                                        34..35,
                                    ),
                                    name: "a",
                                    quote: None,
                                },
                            ),
                        },
                    },
                    accessor: Bracket {
                        key: Literal {
                            span: Some(
                                36..40,
                            ),
                            lit: String(
                                "k1",
                            ),
                        },
                    },
                },
                accessor: Bracket {
                    key: Literal {
                        span: Some(
                            42..46,
                        ),
                        lit: String(
                            "k2",
                        ),
                    },
                },
            },
            MapAccess {
                span: Some(
                    53..56,
                ),
                expr: MapAccess {
                    span: Some(
                        50..53,
                    ),
                    expr: ColumnRef {
                        span: Some(
                            49..50,
                        ),
                        column: ColumnRef {
                            database: None,
                            table: None,
                            column: Name(
                                Identifier {
                                    span: Some(
                                        49..50,
                                    ),
                                    name: "b",
                                    quote: None,
                                },
                            ),
                        },
                    },
                    accessor: Bracket {
                        key: Literal {
                            span: Some(
                                51..52,
                            ),
                            lit: UInt64(
                                0,
                            ),
                        },
                    },
                },
                accessor: Bracket {
                    key: Literal {
                        span: Some(
                            54..55,
                        ),
                        lit: UInt64(
                            1,
                        ),
                    },
                },
            },
        ],
    },
)


---------- Input ----------
ALTER VIRTUAL COLUMN (a['k1']['k2'], b[0][1]) FOR t
---------- Output ---------
ALTER VIRTUAL COLUMN (a['k1']['k2'], b[0][1]) FOR t
---------- AST ------------
AlterVirtualColumn(
    AlterVirtualColumnStmt {
        if_exists: false,
        catalog: None,
        database: None,
        table: Identifier {
            span: Some(
                50..51,
            ),
            name: "t",
            quote: None,
        },
        virtual_columns: [
            MapAccess {
                span: Some(
                    29..35,
                ),
                expr: MapAccess {
                    span: Some(
                        23..29,
                    ),
                    expr: ColumnRef {
                        span: Some(
                            22..23,
                        ),
                        column: ColumnRef {
                            database: None,
                            table: None,
                            column: Name(
                                Identifier {
                                    span: Some(
                                        22..23,
                                    ),
                                    name: "a",
                                    quote: None,
                                },
                            ),
                        },
                    },
                    accessor: Bracket {
                        key: Literal {
                            span: Some(
                                24..28,
                            ),
                            lit: String(
                                "k1",
                            ),
                        },
                    },
                },
                accessor: Bracket {
                    key: Literal {
                        span: Some(
                            30..34,
                        ),
                        lit: String(
                            "k2",
                        ),
                    },
                },
            },
            MapAccess {
                span: Some(
                    41..44,
                ),
                expr: MapAccess {
                    span: Some(
                        38..41,
                    ),
                    expr: ColumnRef {
                        span: Some(
                            37..38,
                        ),
                        column: ColumnRef {
                            database: None,
                            table: None,
                            column: Name(
                                Identifier {
                                    span: Some(
                                        37..38,
                                    ),
                                    name: "b",
                                    quote: None,
                                },
                            ),
                        },
                    },
                    accessor: Bracket {
                        key: Literal {
                            span: Some(
                                39..40,
                            ),
                            lit: UInt64(
                                0,
                            ),
                        },
                    },
                },
                accessor: Bracket {
                    key: Literal {
                        span: Some(
                            42..43,
                        ),
                        lit: UInt64(
                            1,
                        ),
                    },
                },
            },
        ],
    },
)


---------- Input ----------
DROP VIRTUAL COLUMN FOR t
---------- Output ---------
DROP VIRTUAL COLUMN FOR t
---------- AST ------------
DropVirtualColumn(
    DropVirtualColumnStmt {
        if_exists: false,
        catalog: None,
        database: None,
        table: Identifier {
            span: Some(
                24..25,
            ),
            name: "t",
            quote: None,
        },
    },
)


---------- Input ----------
REFRESH VIRTUAL COLUMN FOR t
---------- Output ---------
REFRESH VIRTUAL COLUMN FOR t
---------- AST ------------
RefreshVirtualColumn(
    RefreshVirtualColumnStmt {
        catalog: None,
        database: None,
        table: Identifier {
            span: Some(
                27..28,
            ),
            name: "t",
            quote: None,
        },
    },
)


---------- Input ----------
CREATE NETWORK POLICY mypolicy ALLOWED_IP_LIST=('192.168.10.0/24') BLOCKED_IP_LIST=('192.168.10.99') COMMENT='test'
---------- Output ---------
CREATE NETWORK POLICY mypolicy ALLOWED_IP_LIST = ('192.168.10.0/24') BLOCKED_IP_LIST = ('192.168.10.99') COMMENT = 'test'
---------- AST ------------
CreateNetworkPolicy(
    CreateNetworkPolicyStmt {
        create_option: None,
        name: "mypolicy",
        allowed_ip_list: [
            "192.168.10.0/24",
        ],
        blocked_ip_list: Some(
            [
                "192.168.10.99",
            ],
        ),
        comment: Some(
            "test",
        ),
    },
)


---------- Input ----------
CREATE OR REPLACE NETWORK POLICY mypolicy ALLOWED_IP_LIST=('192.168.10.0/24') BLOCKED_IP_LIST=('192.168.10.99') COMMENT='test'
---------- Output ---------
CREATE OR REPLACE NETWORK POLICY mypolicy ALLOWED_IP_LIST = ('192.168.10.0/24') BLOCKED_IP_LIST = ('192.168.10.99') COMMENT = 'test'
---------- AST ------------
CreateNetworkPolicy(
    CreateNetworkPolicyStmt {
        create_option: CreateOrReplace,
        name: "mypolicy",
        allowed_ip_list: [
            "192.168.10.0/24",
        ],
        blocked_ip_list: Some(
            [
                "192.168.10.99",
            ],
        ),
        comment: Some(
            "test",
        ),
    },
)


---------- Input ----------
ALTER NETWORK POLICY mypolicy SET ALLOWED_IP_LIST=('192.168.10.0/24','192.168.255.1') BLOCKED_IP_LIST=('192.168.1.99') COMMENT='test'
---------- Output ---------
ALTER NETWORK POLICY mypolicy SET  ALLOWED_IP_LIST = ('192.168.10.0/24','192.168.255.1') BLOCKED_IP_LIST = ('192.168.1.99') COMMENT = 'test'
---------- AST ------------
AlterNetworkPolicy(
    AlterNetworkPolicyStmt {
        if_exists: false,
        name: "mypolicy",
        allowed_ip_list: Some(
            [
                "192.168.10.0/24",
                "192.168.255.1",
            ],
        ),
        blocked_ip_list: Some(
            [
                "192.168.1.99",
            ],
        ),
        comment: Some(
            "test",
        ),
    },
)


---------- Input ----------
CREATE TASK IF NOT EXISTS MyTask1 WAREHOUSE = 'MyWarehouse' SCHEDULE = 15 MINUTE SUSPEND_TASK_AFTER_NUM_FAILURES = 3 ERROR_INTEGRATION = 'notification_name' COMMENT = 'This is test task 1' DATABASE = 'target', TIMEZONE = 'America/Los Angeles' AS SELECT * FROM MyTable1
---------- Output ---------
CREATE TASK IF NOT EXISTS MyTask1 WAREHOUSE = MyWarehouse SCHEDULE 900 SECOND database = 'target' timezone = 'America/Los Angeles' SUSPEND_TASK_AFTER 3 FAILURES COMMENTS = 'This is test task 1' ERROR INTEGRATION = 'notification_name' AS SELECT * FROM MyTable1
---------- AST ------------
CreateTask(
    CreateTaskStmt {
        if_not_exists: true,
        name: "MyTask1",
        warehouse_opts: WarehouseOptions {
            warehouse: Some(
                "MyWarehouse",
            ),
        },
        schedule_opts: Some(
            IntervalSecs(
                900,
            ),
        ),
        session_parameters: {
            "database": "target",
            "timezone": "America/Los Angeles",
        },
        suspend_task_after_num_failures: Some(
            3,
        ),
        error_integration: Some(
            "notification_name",
        ),
        comments: "This is test task 1",
        after: [],
        when_condition: None,
        sql: "SELECT * FROM MyTable1",
        sqls: None,
    },
)


---------- Input ----------
CREATE TASK IF NOT EXISTS MyTask1 WAREHOUSE = 'MyWarehouse' SCHEDULE = 15 SECOND SUSPEND_TASK_AFTER_NUM_FAILURES = 3 COMMENT = 'This is test task 1' AS SELECT * FROM MyTable1
---------- Output ---------
CREATE TASK IF NOT EXISTS MyTask1 WAREHOUSE = MyWarehouse SCHEDULE 15 SECOND SUSPEND_TASK_AFTER 3 FAILURES COMMENTS = 'This is test task 1' AS SELECT * FROM MyTable1
---------- AST ------------
CreateTask(
    CreateTaskStmt {
        if_not_exists: true,
        name: "MyTask1",
        warehouse_opts: WarehouseOptions {
            warehouse: Some(
                "MyWarehouse",
            ),
        },
        schedule_opts: Some(
            IntervalSecs(
                15,
            ),
        ),
        session_parameters: {},
        suspend_task_after_num_failures: Some(
            3,
        ),
        error_integration: None,
        comments: "This is test task 1",
        after: [],
        when_condition: None,
        sql: "SELECT * FROM MyTable1",
        sqls: None,
    },
)


---------- Input ----------
CREATE TASK IF NOT EXISTS MyTask1 WAREHOUSE = 'MyWarehouse' SCHEDULE = 1215 SECOND SUSPEND_TASK_AFTER_NUM_FAILURES = 3 COMMENT = 'This is test task 1' AS SELECT * FROM MyTable1
---------- Output ---------
CREATE TASK IF NOT EXISTS MyTask1 WAREHOUSE = MyWarehouse SCHEDULE 1215 SECOND SUSPEND_TASK_AFTER 3 FAILURES COMMENTS = 'This is test task 1' AS SELECT * FROM MyTable1
---------- AST ------------
CreateTask(
    CreateTaskStmt {
        if_not_exists: true,
        name: "MyTask1",
        warehouse_opts: WarehouseOptions {
            warehouse: Some(
                "MyWarehouse",
            ),
        },
        schedule_opts: Some(
            IntervalSecs(
                1215,
            ),
        ),
        session_parameters: {},
        suspend_task_after_num_failures: Some(
            3,
        ),
        error_integration: None,
        comments: "This is test task 1",
        after: [],
        when_condition: None,
        sql: "SELECT * FROM MyTable1",
        sqls: None,
    },
)


---------- Input ----------
CREATE TASK IF NOT EXISTS MyTask1 SCHEDULE = USING CRON '0 6 * * *' 'America/Los_Angeles' COMMENT = 'serverless + cron' AS insert into t (c1, c2) values (1, 2), (3, 4)
---------- Output ---------
CREATE TASK IF NOT EXISTS MyTask1 SCHEDULE CRON '0 6 * * *' TIMEZONE 'America/Los_Angeles' COMMENTS = 'serverless + cron' AS INSERT INTO t (c1, c2) VALUES (1, 2), (3, 4)
---------- AST ------------
CreateTask(
    CreateTaskStmt {
        if_not_exists: true,
        name: "MyTask1",
        warehouse_opts: WarehouseOptions {
            warehouse: None,
        },
        schedule_opts: Some(
            CronExpression(
                "0 6 * * *",
                Some(
                    "America/Los_Angeles",
                ),
            ),
        ),
        session_parameters: {},
        suspend_task_after_num_failures: None,
        error_integration: None,
        comments: "serverless + cron",
        after: [],
        when_condition: None,
        sql: "INSERT INTO t (c1, c2) VALUES (1, 2), (3, 4)",
        sqls: None,
    },
)


---------- Input ----------
CREATE TASK IF NOT EXISTS MyTask1 SCHEDULE = USING CRON '0 12 * * *' AS copy into streams_test.paper_table from @stream_stage FILE_FORMAT = (TYPE = PARQUET) PURGE=true
---------- Output ---------
CREATE TASK IF NOT EXISTS MyTask1 SCHEDULE CRON '0 12 * * *' AS COPY INTO streams_test.paper_table FROM @stream_stage FILE_FORMAT = (type = 'PARQUET') PURGE = true FORCE = false DISABLE_VARIANT_CHECK = false ON_ERROR = abort
---------- AST ------------
CreateTask(
    CreateTaskStmt {
        if_not_exists: true,
        name: "MyTask1",
        warehouse_opts: WarehouseOptions {
            warehouse: None,
        },
        schedule_opts: Some(
            CronExpression(
                "0 12 * * *",
                None,
            ),
        ),
        session_parameters: {},
        suspend_task_after_num_failures: None,
        error_integration: None,
        comments: "",
        after: [],
        when_condition: None,
        sql: "COPY INTO streams_test.paper_table FROM @stream_stage FILE_FORMAT = (type = 'PARQUET') PURGE = true FORCE = false DISABLE_VARIANT_CHECK = false ON_ERROR = abort",
        sqls: None,
    },
)


---------- Input ----------
CREATE TASK IF NOT EXISTS MyTask1 SCHEDULE = USING CRON '0 13 * * *' AS COPY INTO @my_internal_stage FROM canadian_city_population FILE_FORMAT = (TYPE = PARQUET)
---------- Output ---------
CREATE TASK IF NOT EXISTS MyTask1 SCHEDULE CRON '0 13 * * *' AS COPY INTO @my_internal_stage FROM canadian_city_population FILE_FORMAT = (type = 'PARQUET') SINGLE = false MAX_FILE_SIZE = 0 DETAILED_OUTPUT = false
---------- AST ------------
CreateTask(
    CreateTaskStmt {
        if_not_exists: true,
        name: "MyTask1",
        warehouse_opts: WarehouseOptions {
            warehouse: None,
        },
        schedule_opts: Some(
            CronExpression(
                "0 13 * * *",
                None,
            ),
        ),
        session_parameters: {},
        suspend_task_after_num_failures: None,
        error_integration: None,
        comments: "",
        after: [],
        when_condition: None,
        sql: "COPY INTO @my_internal_stage FROM canadian_city_population FILE_FORMAT = (type = 'PARQUET') SINGLE = false MAX_FILE_SIZE = 0 DETAILED_OUTPUT = false",
        sqls: None,
    },
)


---------- Input ----------
CREATE TASK IF NOT EXISTS MyTask1 AFTER 'task2', 'task3' WHEN SYSTEM$GET_PREDECESSOR_RETURN_VALUE('task_name') != 'VALIDATION' AS VACUUM TABLE t
---------- Output ---------
CREATE TASK IF NOT EXISTS MyTask1 AFTER = '["task2", "task3"]' WHEN = 'Some("(SYSTEM$GET_PREDECESSOR_RETURN_VALUE('task_name') <> 'VALIDATION')")' AS VACUUM TABLE t 
---------- AST ------------
CreateTask(
    CreateTaskStmt {
        if_not_exists: true,
        name: "MyTask1",
        warehouse_opts: WarehouseOptions {
            warehouse: None,
        },
        schedule_opts: None,
        session_parameters: {},
        suspend_task_after_num_failures: None,
        error_integration: None,
        comments: "",
        after: [
            "task2",
            "task3",
        ],
        when_condition: Some(
            "(SYSTEM$GET_PREDECESSOR_RETURN_VALUE('task_name') <> 'VALIDATION')",
        ),
        sql: "VACUUM TABLE t ",
        sqls: None,
    },
)


---------- Input ----------
CREATE TASK IF NOT EXISTS MyTask1 DATABASE = 'target', TIMEZONE = 'America/Los Angeles'  AS VACUUM TABLE t
---------- Output ---------
CREATE TASK IF NOT EXISTS MyTask1 database = 'target' timezone = 'America/Los Angeles' AS VACUUM TABLE t 
---------- AST ------------
CreateTask(
    CreateTaskStmt {
        if_not_exists: true,
        name: "MyTask1",
        warehouse_opts: WarehouseOptions {
            warehouse: None,
        },
        schedule_opts: None,
        session_parameters: {
            "database": "target",
            "timezone": "America/Los Angeles",
        },
        suspend_task_after_num_failures: None,
        error_integration: None,
        comments: "",
        after: [],
        when_condition: None,
        sql: "VACUUM TABLE t ",
        sqls: None,
    },
)


---------- Input ----------
CREATE TASK IF NOT EXISTS MyTask1 DATABASE = 'target', TIMEZONE = 'America/Los Angeles'  as
            BEGIN
              begin;
              insert into t values('a;');
              delete from t where c = ';';
              vacuum table t;
              merge into t using s on t.id = s.id when matched then update *;
              commit;
            END
---------- Output ---------
CREATE TASK IF NOT EXISTS MyTask1 database = 'target' timezone = 'America/Los Angeles'
BEGIN
BEGIN;
INSERT INTO t VALUES ('a;');
DELETE FROM t WHERE (c = ';');
VACUUM TABLE t ;
MERGE INTO t USING s ON (t.id = s.id) WHEN MATCHED THEN UPDATE *;
COMMITEND
---------- AST ------------
CreateTask(
    CreateTaskStmt {
        if_not_exists: true,
        name: "MyTask1",
        warehouse_opts: WarehouseOptions {
            warehouse: None,
        },
        schedule_opts: None,
        session_parameters: {
            "database": "target",
            "timezone": "America/Los Angeles",
        },
        suspend_task_after_num_failures: None,
        error_integration: None,
        comments: "",
        after: [],
        when_condition: None,
        sql: "",
        sqls: Some(
            [
                "BEGIN",
                "INSERT INTO t VALUES ('a;')",
                "DELETE FROM t WHERE (c = ';')",
                "VACUUM TABLE t ",
                "MERGE INTO t USING s ON (t.id = s.id) WHEN MATCHED THEN UPDATE *",
                "COMMIT",
            ],
        ),
    },
)


---------- Input ----------
ALTER TASK MyTask1 RESUME
---------- Output ---------
ALTER TASK MyTask1 RESUME
---------- AST ------------
AlterTask(
    AlterTaskStmt {
        if_exists: false,
        name: "MyTask1",
        options: Resume,
    },
)


---------- Input ----------
ALTER TASK MyTask1 SUSPEND
---------- Output ---------
ALTER TASK MyTask1 SUSPEND
---------- AST ------------
AlterTask(
    AlterTaskStmt {
        if_exists: false,
        name: "MyTask1",
        options: Suspend,
    },
)


---------- Input ----------
ALTER TASK MyTask1 ADD AFTER 'task2', 'task3'
---------- Output ---------
ALTER TASK MyTask1 ADD AFTER = '["task2", "task3"]'
---------- AST ------------
AlterTask(
    AlterTaskStmt {
        if_exists: false,
        name: "MyTask1",
        options: AddAfter(
            [
                "task2",
                "task3",
            ],
        ),
    },
)


---------- Input ----------
ALTER TASK MyTask1 REMOVE AFTER 'task2'
---------- Output ---------
ALTER TASK MyTask1 REMOVE AFTER = '["task2"]'
---------- AST ------------
AlterTask(
    AlterTaskStmt {
        if_exists: false,
        name: "MyTask1",
        options: RemoveAfter(
            [
                "task2",
            ],
        ),
    },
)


---------- Input ----------
ALTER TASK MyTask1 SET WAREHOUSE= 'MyWarehouse' SCHEDULE = USING CRON '0 6 * * *' 'America/Los_Angeles' COMMENT = 'serverless + cron'
---------- Output ---------
ALTER TASK MyTask1 SET WAREHOUSE = MyWarehouse SET  SCHEDULE CRON '0 6 * * *' TIMEZONE 'America/Los_Angeles' COMMENTS = 'serverless + cron'
---------- AST ------------
AlterTask(
    AlterTaskStmt {
        if_exists: false,
        name: "MyTask1",
        options: Set {
            warehouse: Some(
                "MyWarehouse",
            ),
            schedule: Some(
                CronExpression(
                    "0 6 * * *",
                    Some(
                        "America/Los_Angeles",
                    ),
                ),
            ),
            suspend_task_after_num_failures: None,
            comments: Some(
                "serverless + cron",
            ),
            session_parameters: None,
            error_integration: None,
        },
    },
)


---------- Input ----------
ALTER TASK MyTask1 SET WAREHOUSE= 'MyWarehouse' SCHEDULE = 13 MINUTE SUSPEND_TASK_AFTER_NUM_FAILURES = 10 COMMENT = 'serverless + cron'
---------- Output ---------
ALTER TASK MyTask1 SET WAREHOUSE = MyWarehouse SET  SCHEDULE 780 SECOND SUSPEND TASK AFTER 10 FAILURES COMMENTS = 'serverless + cron'
---------- AST ------------
AlterTask(
    AlterTaskStmt {
        if_exists: false,
        name: "MyTask1",
        options: Set {
            warehouse: Some(
                "MyWarehouse",
            ),
            schedule: Some(
                IntervalSecs(
                    780,
                ),
            ),
            suspend_task_after_num_failures: Some(
                10,
            ),
            comments: Some(
                "serverless + cron",
            ),
            session_parameters: None,
            error_integration: None,
        },
    },
)


---------- Input ----------
ALTER TASK MyTask1 SET WAREHOUSE= 'MyWarehouse' SCHEDULE = 5 SECOND SUSPEND_TASK_AFTER_NUM_FAILURES = 10 COMMENT = 'serverless + cron'
---------- Output ---------
ALTER TASK MyTask1 SET WAREHOUSE = MyWarehouse SET  SCHEDULE 5 SECOND SUSPEND TASK AFTER 10 FAILURES COMMENTS = 'serverless + cron'
---------- AST ------------
AlterTask(
    AlterTaskStmt {
        if_exists: false,
        name: "MyTask1",
        options: Set {
            warehouse: Some(
                "MyWarehouse",
            ),
            schedule: Some(
                IntervalSecs(
                    5,
                ),
            ),
            suspend_task_after_num_failures: Some(
                10,
            ),
            comments: Some(
                "serverless + cron",
            ),
            session_parameters: None,
            error_integration: None,
        },
    },
)


---------- Input ----------
ALTER TASK MyTask1 SET DATABASE='newDB', TIMEZONE='America/Los_Angeles'
---------- Output ---------
ALTER TASK MyTask1 database = 'newDB' timezone = 'America/Los_Angeles'
---------- AST ------------
AlterTask(
    AlterTaskStmt {
        if_exists: false,
        name: "MyTask1",
        options: Set {
            warehouse: None,
            schedule: None,
            suspend_task_after_num_failures: None,
            comments: None,
            session_parameters: Some(
                {
                    "database": "newDB",
                    "timezone": "America/Los_Angeles",
                },
            ),
            error_integration: None,
        },
    },
)


---------- Input ----------
ALTER TASK MyTask1 SET ERROR_INTEGRATION = 'candidate_notifictaion'
---------- Output ---------
ALTER TASK MyTask1 ERROR INTEGRATION = 'candidate_notifictaion'
---------- AST ------------
AlterTask(
    AlterTaskStmt {
        if_exists: false,
        name: "MyTask1",
        options: Set {
            warehouse: None,
            schedule: None,
            suspend_task_after_num_failures: None,
            comments: None,
            session_parameters: None,
            error_integration: Some(
                "candidate_notifictaion",
            ),
        },
    },
)


---------- Input ----------
ALTER TASK MyTask2 MODIFY AS SELECT CURRENT_VERSION()
---------- Output ---------
ALTER TASK MyTask2 AS SELECT CURRENT_VERSION()
---------- AST ------------
AlterTask(
    AlterTaskStmt {
        if_exists: false,
        name: "MyTask2",
        options: ModifyAs(
            "SELECT CURRENT_VERSION()",
        ),
    },
)


---------- Input ----------
ALTER TASK MyTask1 MODIFY WHEN SYSTEM$GET_PREDECESSOR_RETURN_VALUE('task_name') != 'VALIDATION'
---------- Output ---------
ALTER TASK MyTask1 WHEN (SYSTEM$GET_PREDECESSOR_RETURN_VALUE('task_name') <> 'VALIDATION')
---------- AST ------------
AlterTask(
    AlterTaskStmt {
        if_exists: false,
        name: "MyTask1",
        options: ModifyWhen(
            "(SYSTEM$GET_PREDECESSOR_RETURN_VALUE('task_name') <> 'VALIDATION')",
        ),
    },
)


---------- Input ----------
DROP TASK MyTask1
---------- Output ---------
DROP TASK MyTask1
---------- AST ------------
DropTask(
    DropTaskStmt {
        if_exists: false,
        name: "MyTask1",
    },
)


---------- Input ----------
SHOW TASKS
---------- Output ---------
SHOW TASKS
---------- AST ------------
ShowTasks(
    ShowTasksStmt {
        limit: None,
    },
)


---------- Input ----------
EXECUTE TASK MyTask
---------- Output ---------
EXECUTE TASK MyTask
---------- AST ------------
ExecuteTask(
    ExecuteTaskStmt {
        name: "MyTask",
    },
)


---------- Input ----------
DESC TASK MyTask
---------- Output ---------
DESCRIBE TASK MyTask
---------- AST ------------
DescribeTask(
    DescribeTaskStmt {
        name: "MyTask",
    },
)


---------- Input ----------
CREATE CONNECTION IF NOT EXISTS my_conn STORAGE_TYPE='s3'
---------- Output ---------
CREATE CONNECTION IF NOT EXISTS my_conn STORAGE_TYPE = s3 
---------- AST ------------
CreateConnection(
    CreateConnectionStmt {
        name: Identifier {
            span: Some(
                32..39,
            ),
            name: "my_conn",
            quote: None,
        },
        storage_type: "s3",
        storage_params: {},
        create_option: CreateIfNotExists,
    },
)


---------- Input ----------
CREATE CONNECTION IF NOT EXISTS my_conn STORAGE_TYPE='s3' any_arg='any_value'
---------- Output ---------
CREATE CONNECTION IF NOT EXISTS my_conn STORAGE_TYPE = s3 any_arg = ******lue
---------- AST ------------
CreateConnection(
    CreateConnectionStmt {
        name: Identifier {
            span: Some(
                32..39,
            ),
            name: "my_conn",
            quote: None,
        },
        storage_type: "s3",
        storage_params: {
            "any_arg": "any_value",
        },
        create_option: CreateIfNotExists,
    },
)


---------- Input ----------
CREATE OR REPLACE CONNECTION my_conn STORAGE_TYPE='s3' any_arg='any_value'
---------- Output ---------
CREATE OR REPLACE CONNECTION my_conn STORAGE_TYPE = s3 any_arg = ******lue
---------- AST ------------
CreateConnection(
    CreateConnectionStmt {
        name: Identifier {
            span: Some(
                29..36,
            ),
            name: "my_conn",
            quote: None,
        },
        storage_type: "s3",
        storage_params: {
            "any_arg": "any_value",
        },
        create_option: CreateOrReplace,
    },
)


---------- Input ----------
DROP CONNECTION IF EXISTS my_conn;
---------- Output ---------
CREATE CONNECTION IF NOT EXISTS my_conn 
---------- AST ------------
DropConnection(
    DropConnectionStmt {
        if_exists: true,
        name: Identifier {
            span: Some(
                26..33,
            ),
            name: "my_conn",
            quote: None,
        },
    },
)


---------- Input ----------
DESC CONNECTION my_conn;
---------- Output ---------
CREATE CONNECTION my_conn 
---------- AST ------------
DescribeConnection(
    DescribeConnectionStmt {
        name: Identifier {
            span: Some(
                16..23,
            ),
            name: "my_conn",
            quote: None,
        },
    },
)


---------- Input ----------
SHOW CONNECTIONS;
---------- Output ---------
SHOW CONNECTIONS
---------- AST ------------
ShowConnections(
    ShowConnectionsStmt,
)


---------- Input ----------
SHOW LOCKS IN ACCOUNT
---------- Output ---------
SHOW LOCKS IN ACCOUNT
---------- AST ------------
ShowLocks(
    ShowLocksStmt {
        in_account: true,
        limit: None,
    },
)


---------- Input ----------
CREATE PIPE IF NOT EXISTS MyPipe1 AUTO_INGEST = TRUE COMMENT = 'This is test pipe 1' AS COPY INTO MyTable1 FROM '@~/MyStage1' FILE_FORMAT = (TYPE = 'CSV')
---------- Output ---------
CREATE PIPE IF NOT EXISTS MyPipe1 AUTO_INGEST = TRUE COMMENTS = 'This is test pipe 1' AS COPY INTO MyTable1 FROM @~/MyStage1 FILE_FORMAT = (type = 'CSV') PURGE = false FORCE = false DISABLE_VARIANT_CHECK = false ON_ERROR = abort
---------- AST ------------
CreatePipe(
    CreatePipeStmt {
        if_not_exists: true,
        name: "MyPipe1",
        auto_ingest: true,
        comments: "This is test pipe 1",
        copy_stmt: CopyIntoTableStmt {
            src: Location(
                Stage(
                    "~/MyStage1",
                ),
            ),
            dst: TableRef {
                catalog: None,
                database: None,
                table: Identifier {
                    span: Some(
                        98..106,
                    ),
                    name: "MyTable1",
                    quote: None,
                },
            },
            dst_columns: None,
            hints: None,
            file_format: {
                "type": "CSV",
            },
            files: None,
            pattern: None,
            force: false,
            validation_mode: "",
            size_limit: 0,
            max_files: 0,
            split_size: 0,
            purge: false,
            disable_variant_check: false,
            return_failed_only: false,
            on_error: "abort",
        },
    },
)


---------- Input ----------
CREATE PIPE pipe1 AS COPY INTO db1.MyTable1 FROM @~/mybucket/data.csv
---------- Output ---------
CREATE PIPE pipe1 AS COPY INTO db1.MyTable1 FROM @~/mybucket/data.csv PURGE = false FORCE = false DISABLE_VARIANT_CHECK = false ON_ERROR = abort
---------- AST ------------
CreatePipe(
    CreatePipeStmt {
        if_not_exists: false,
        name: "pipe1",
        auto_ingest: false,
        comments: "",
        copy_stmt: CopyIntoTableStmt {
            src: Location(
                Stage(
                    "~/mybucket/data.csv",
                ),
            ),
            dst: TableRef {
                catalog: None,
                database: Some(
                    Identifier {
                        span: Some(
                            31..34,
                        ),
                        name: "db1",
                        quote: None,
                    },
                ),
                table: Identifier {
                    span: Some(
                        35..43,
                    ),
                    name: "MyTable1",
                    quote: None,
                },
            },
            dst_columns: None,
            hints: None,
            file_format: {},
            files: None,
            pattern: None,
            force: false,
            validation_mode: "",
            size_limit: 0,
            max_files: 0,
            split_size: 0,
            purge: false,
            disable_variant_check: false,
            return_failed_only: false,
            on_error: "abort",
        },
    },
)


---------- Input ----------
ALTER PIPE mypipe REFRESH
---------- Output ---------
ALTER PIPE mypipe REFRESH
---------- AST ------------
AlterPipe(
    AlterPipeStmt {
        if_exists: false,
        name: "mypipe",
        options: Refresh {
            prefix: None,
            modified_after: None,
        },
    },
)


---------- Input ----------
ALTER PIPE mypipe REFRESH PREFIX='d1/'
---------- Output ---------
ALTER PIPE mypipe REFRESH PREFIX = 'd1/'
---------- AST ------------
AlterPipe(
    AlterPipeStmt {
        if_exists: false,
        name: "mypipe",
        options: Refresh {
            prefix: Some(
                "d1/",
            ),
            modified_after: None,
        },
    },
)


---------- Input ----------
ALTER PIPE mypipe REFRESH PREFIX='d1/' MODIFIED_AFTER='2018-07-30T13:56:46-07:00'
---------- Output ---------
ALTER PIPE mypipe REFRESH PREFIX = 'd1/' MODIFIED_AFTER = '2018-07-30T13:56:46-07:00'
---------- AST ------------
AlterPipe(
    AlterPipeStmt {
        if_exists: false,
        name: "mypipe",
        options: Refresh {
            prefix: Some(
                "d1/",
            ),
            modified_after: Some(
                "2018-07-30T13:56:46-07:00",
            ),
        },
    },
)


---------- Input ----------
ALTER PIPE mypipe SET PIPE_EXECUTION_PAUSED = true
---------- Output ---------
ALTER PIPE mypipe SET PIPE_EXECUTION_PAUSED = true
---------- AST ------------
AlterPipe(
    AlterPipeStmt {
        if_exists: false,
        name: "mypipe",
        options: Set {
            execution_paused: Some(
                true,
            ),
            comments: None,
        },
    },
)


---------- Input ----------
DROP PIPE mypipe
---------- Output ---------
DROP PIPE mypipe
---------- AST ------------
DropPipe(
    DropPipeStmt {
        if_exists: false,
        name: "mypipe",
    },
)


---------- Input ----------
DESC PIPE mypipe
---------- Output ---------
DESCRIBE PIPE mypipe
---------- AST ------------
DescribePipe(
    DescribePipeStmt {
        name: "mypipe",
    },
)


---------- Input ----------
CREATE NOTIFICATION INTEGRATION IF NOT EXISTS SampleNotification type = webhook enabled = true webhook = (url = 'https://example.com', method = 'GET', authorization_header = 'bearer auth')
---------- Output ---------
CREATE NOTIFICATION INTEGRATION IF NOT EXISTS SampleNotification TYPE = webhook  WEBHOOK = (URL = 'https://example.com' METHOD = 'GET' AUTHORIZATION_HEADER = 'bearer auth' )
---------- AST ------------
CreateNotification(
    CreateNotificationStmt {
        if_not_exists: true,
        name: "SampleNotification",
        notification_type: "webhook",
        enabled: true,
        webhook_opts: Some(
            NotificationWebhookOptions {
                url: Some(
                    "https://example.com",
                ),
                method: Some(
                    "GET",
                ),
                authorization_header: Some(
                    "bearer auth",
                ),
            },
        ),
        comments: "",
    },
)


---------- Input ----------
CREATE NOTIFICATION INTEGRATION SampleNotification type = webhook enabled = true webhook = (url = 'https://example.com') COMMENT = 'notify'
---------- Output ---------
CREATE NOTIFICATION INTEGRATION SampleNotification TYPE = webhook  WEBHOOK = (URL = 'https://example.com' ) COMMENTS = 'notify'
---------- AST ------------
CreateNotification(
    CreateNotificationStmt {
        if_not_exists: false,
        name: "SampleNotification",
        notification_type: "webhook",
        enabled: true,
        webhook_opts: Some(
            NotificationWebhookOptions {
                url: Some(
                    "https://example.com",
                ),
                method: None,
                authorization_header: None,
            },
        ),
        comments: "notify",
    },
)


---------- Input ----------
ALTER NOTIFICATION INTEGRATION SampleNotification SET enabled = true
---------- Output ---------
ALTER NOTIFICATION INTEGRATION SampleNotification SET ENABLED = true
---------- AST ------------
AlterNotification(
    AlterNotificationStmt {
        if_exists: false,
        name: "SampleNotification",
        options: Set(
            AlterNotificationSetOptions {
                enabled: Some(
                    true,
                ),
                webhook_opts: None,
                comments: None,
            },
        ),
    },
)


---------- Input ----------
ALTER NOTIFICATION INTEGRATION SampleNotification SET webhook = (url = 'https://example.com')
---------- Output ---------
ALTER NOTIFICATION INTEGRATION SampleNotification SET   WEBHOOK = (URL = 'https://example.com' )
---------- AST ------------
AlterNotification(
    AlterNotificationStmt {
        if_exists: false,
        name: "SampleNotification",
        options: Set(
            AlterNotificationSetOptions {
                enabled: None,
                webhook_opts: Some(
                    NotificationWebhookOptions {
                        url: Some(
                            "https://example.com",
                        ),
                        method: None,
                        authorization_header: None,
                    },
                ),
                comments: None,
            },
        ),
    },
)


---------- Input ----------
ALTER NOTIFICATION INTEGRATION SampleNotification SET comment = '1'
---------- Output ---------
ALTER NOTIFICATION INTEGRATION SampleNotification SET  COMMENTS = '1'
---------- AST ------------
AlterNotification(
    AlterNotificationStmt {
        if_exists: false,
        name: "SampleNotification",
        options: Set(
            AlterNotificationSetOptions {
                enabled: None,
                webhook_opts: None,
                comments: Some(
                    "1",
                ),
            },
        ),
    },
)


---------- Input ----------
DROP NOTIFICATION INTEGRATION SampleNotification
---------- Output ---------
DROP NOTIFICATION INTEGRATION SampleNotification
---------- AST ------------
DropNotification(
    DropNotificationStmt {
        if_exists: false,
        name: "SampleNotification",
    },
)


---------- Input ----------
DESC NOTIFICATION INTEGRATION SampleNotification
---------- Output ---------
DESCRIBE NOTIFICATION INTEGRATION SampleNotification
---------- AST ------------
DescribeNotification(
    DescribeNotificationStmt {
        name: "SampleNotification",
    },
)


---------- Input ----------
--各环节转各环节转各环节转各环节转各
  select 34343
---------- Output ---------
SELECT 34343
---------- AST ------------
Query(
    Query {
        span: Some(
            56..68,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    56..68,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    AliasedExpr {
                        expr: Literal {
                            span: Some(
                                63..68,
                            ),
                            lit: UInt64(
                                34343,
                            ),
                        },
                        alias: None,
                    },
                ],
                from: [],
                selection: None,
                group_by: None,
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
-- 96477300355	31379974136	3.074486292973661
select 34343
---------- Output ---------
SELECT 34343
---------- AST ------------
Query(
    Query {
        span: Some(
            45..57,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    45..57,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    AliasedExpr {
                        expr: Literal {
                            span: Some(
                                52..57,
                            ),
                            lit: UInt64(
                                34343,
                            ),
                        },
                        alias: None,
                    },
                ],
                from: [],
                selection: None,
                group_by: None,
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
-- xxxxx
  select 34343;
---------- Output ---------
SELECT 34343
---------- AST ------------
Query(
    Query {
        span: Some(
            11..23,
        ),
        with: None,
        body: Select(
            SelectStmt {
                span: Some(
                    11..23,
                ),
                hints: None,
                distinct: false,
                select_list: [
                    AliasedExpr {
                        expr: Literal {
                            span: Some(
                                18..23,
                            ),
                            lit: UInt64(
                                34343,
                            ),
                        },
                        alias: None,
                    },
                ],
                from: [],
                selection: None,
                group_by: None,
                having: None,
                window_list: None,
                qualify: None,
            },
        ),
        order_by: [],
        limit: [],
        offset: None,
        ignore_result: false,
    },
)


---------- Input ----------
GRANT OWNERSHIP ON d20_0014.* TO ROLE 'd20_0015_owner';
---------- Output ---------
GRANT OWNERSHIP ON d20_0014.* TO ROLE d20_0015_owner
---------- AST ------------
Grant(
    GrantStmt {
        source: Privs {
            privileges: [
                Ownership,
            ],
            level: Database(
                Some(
                    "d20_0014",
                ),
            ),
        },
        principal: Role(
            "d20_0015_owner",
        ),
    },
)


---------- Input ----------
GRANT OWNERSHIP ON d20_0014.t TO ROLE 'd20_0015_owner';
---------- Output ---------
GRANT OWNERSHIP ON d20_0014.t TO ROLE d20_0015_owner
---------- AST ------------
Grant(
    GrantStmt {
        source: Privs {
            privileges: [
                Ownership,
            ],
            level: Table(
                Some(
                    "d20_0014",
                ),
                "t",
            ),
        },
        principal: Role(
            "d20_0015_owner",
        ),
    },
)


---------- Input ----------
GRANT OWNERSHIP ON STAGE s1 TO ROLE 'd20_0015_owner';
---------- Output ---------
GRANT OWNERSHIP ON STAGE s1 TO ROLE d20_0015_owner
---------- AST ------------
Grant(
    GrantStmt {
        source: Privs {
            privileges: [
                Ownership,
            ],
            level: Stage(
                "s1",
            ),
        },
        principal: Role(
            "d20_0015_owner",
        ),
    },
)


---------- Input ----------
GRANT OWNERSHIP ON UDF f1 TO ROLE 'd20_0015_owner';
---------- Output ---------
GRANT OWNERSHIP ON UDF f1 TO ROLE d20_0015_owner
---------- AST ------------
Grant(
    GrantStmt {
        source: Privs {
            privileges: [
                Ownership,
            ],
            level: UDF(
                "f1",
            ),
        },
        principal: Role(
            "d20_0015_owner",
        ),
    },
)


---------- Input ----------
CREATE FUNCTION IF NOT EXISTS isnotempty AS(p) -> not(is_null(p));
---------- Output ---------
CREATE FUNCTION IF NOT EXISTS isnotempty AS (p) -> (NOT is_null(p))
---------- AST ------------
CreateUDF(
    CreateUDFStmt {
        create_option: CreateIfNotExists,
        udf_name: Identifier {
            span: Some(
                30..40,
            ),
            name: "isnotempty",
            quote: None,
        },
        description: None,
        definition: LambdaUDF {
            parameters: [
                Identifier {
                    span: Some(
                        44..45,
                    ),
                    name: "p",
                    quote: None,
                },
            ],
            definition: UnaryOp {
                span: Some(
                    50..53,
                ),
                op: Not,
                expr: FunctionCall {
                    span: Some(
                        54..64,
                    ),
                    func: FunctionCall {
                        distinct: false,
                        name: Identifier {
                            span: Some(
                                54..61,
                            ),
                            name: "is_null",
                            quote: None,
                        },
                        args: [
                            ColumnRef {
                                span: Some(
                                    62..63,
                                ),
                                column: ColumnRef {
                                    database: None,
                                    table: None,
                                    column: Name(
                                        Identifier {
                                            span: Some(
                                                62..63,
                                            ),
                                            name: "p",
                                            quote: None,
                                        },
                                    ),
                                },
                            },
                        ],
                        params: [],
                        window: None,
                        lambda: None,
                    },
                },
            },
        },
    },
)


---------- Input ----------
CREATE OR REPLACE FUNCTION isnotempty_test_replace AS(p) -> not(is_null(p))  DESC = 'This is a description';
---------- Output ---------
CREATE OR REPLACE FUNCTION isnotempty_test_replace AS (p) -> (NOT is_null(p)) DESC = 'This is a description'
---------- AST ------------
CreateUDF(
    CreateUDFStmt {
        create_option: CreateOrReplace,
        udf_name: Identifier {
            span: Some(
                27..50,
            ),
            name: "isnotempty_test_replace",
            quote: None,
        },
        description: Some(
            "This is a description",
        ),
        definition: LambdaUDF {
            parameters: [
                Identifier {
                    span: Some(
                        54..55,
                    ),
                    name: "p",
                    quote: None,
                },
            ],
            definition: UnaryOp {
                span: Some(
                    60..63,
                ),
                op: Not,
                expr: FunctionCall {
                    span: Some(
                        64..74,
                    ),
                    func: FunctionCall {
                        distinct: false,
                        name: Identifier {
                            span: Some(
                                64..71,
                            ),
                            name: "is_null",
                            quote: None,
                        },
                        args: [
                            ColumnRef {
                                span: Some(
                                    72..73,
                                ),
                                column: ColumnRef {
                                    database: None,
                                    table: None,
                                    column: Name(
                                        Identifier {
                                            span: Some(
                                                72..73,
                                            ),
                                            name: "p",
                                            quote: None,
                                        },
                                    ),
                                },
                            },
                        ],
                        params: [],
                        window: None,
                        lambda: None,
                    },
                },
            },
        },
    },
)


---------- Input ----------
CREATE FUNCTION binary_reverse (BINARY) RETURNS BINARY LANGUAGE python HANDLER = 'binary_reverse' ADDRESS = 'http://0.0.0.0:8815';
---------- Output ---------
CREATE FUNCTION binary_reverse (BINARY NULL) RETURNS BINARY NULL LANGUAGE python HANDLER = binary_reverse ADDRESS = http://0.0.0.0:8815
---------- AST ------------
CreateUDF(
    CreateUDFStmt {
        create_option: None,
        udf_name: Identifier {
            span: Some(
                16..30,
            ),
            name: "binary_reverse",
            quote: None,
        },
        description: None,
        definition: UDFServer {
            arg_types: [
                Nullable(
                    Binary,
                ),
            ],
            return_type: Nullable(
                Binary,
            ),
            address: "http://0.0.0.0:8815",
            handler: "binary_reverse",
            language: "python",
        },
    },
)


---------- Input ----------
CREATE OR REPLACE FUNCTION binary_reverse (BINARY) RETURNS BINARY LANGUAGE python HANDLER = 'binary_reverse' ADDRESS = 'http://0.0.0.0:8815';
---------- Output ---------
CREATE OR REPLACE FUNCTION binary_reverse (BINARY NULL) RETURNS BINARY NULL LANGUAGE python HANDLER = binary_reverse ADDRESS = http://0.0.0.0:8815
---------- AST ------------
CreateUDF(
    CreateUDFStmt {
        create_option: CreateOrReplace,
        udf_name: Identifier {
            span: Some(
                27..41,
            ),
            name: "binary_reverse",
            quote: None,
        },
        description: None,
        definition: UDFServer {
            arg_types: [
                Nullable(
                    Binary,
                ),
            ],
            return_type: Nullable(
                Binary,
            ),
            address: "http://0.0.0.0:8815",
            handler: "binary_reverse",
            language: "python",
        },
    },
)


---------- Input ----------
create or replace function addone(int)
returns int
language python
handler = 'addone_py'
as
$$
def addone_py(i):
  return i+1
$$;
---------- Output ---------
CREATE OR REPLACE FUNCTION addone (Int32 NULL) RETURNS Int32 NULL LANGUAGE python runtime_version =  HANDLER = addone_py AS $$
def addone_py(i):
  return i+1
$$
---------- AST ------------
CreateUDF(
    CreateUDFStmt {
        create_option: CreateOrReplace,
        udf_name: Identifier {
            span: Some(
                27..33,
            ),
            name: "addone",
            quote: None,
        },
        description: None,
        definition: UDFScript {
            arg_types: [
                Nullable(
                    Int32,
                ),
            ],
            return_type: Nullable(
                Int32,
            ),
            code: "\ndef addone_py(i):\n  return i+1\n",
            handler: "addone_py",
            language: "python",
            runtime_version: "",
        },
    },
)


---------- Input ----------
DROP FUNCTION binary_reverse;
---------- Output ---------
DROP FUNCTION binary_reverse
---------- AST ------------
DropUDF {
    if_exists: false,
    udf_name: Identifier {
        span: Some(
            14..28,
        ),
        name: "binary_reverse",
        quote: None,
    },
}


---------- Input ----------
DROP FUNCTION isnotempty;
---------- Output ---------
DROP FUNCTION isnotempty
---------- AST ------------
DropUDF {
    if_exists: false,
    udf_name: Identifier {
        span: Some(
            14..24,
        ),
        name: "isnotempty",
        quote: None,
    },
}


